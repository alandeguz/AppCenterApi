//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Object returned in response to getting or updating the state of a bugtracker */
public class BugTrackerStateResult: APIModel {

    /** bugtracker state */
    public enum State: String, Codable {
        case enabled = "enabled"
        case disabled = "disabled"
        case unauthorized = "unauthorized"

        public static let cases: [State] = [
          .enabled,
          .disabled,
          .unauthorized,
        ]
    }

    /** bugtracker state */
    public var state: State?

    public init(state: State? = nil) {
        self.state = state
    }

    private enum CodingKeys: String, CodingKey {
        case state
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        state = try container.decodeIfPresent(.state)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(state, forKey: .state)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? BugTrackerStateResult else { return false }
      guard self.state == object.state else { return false }
      return true
    }

    public static func == (lhs: BugTrackerStateResult, rhs: BugTrackerStateResult) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
