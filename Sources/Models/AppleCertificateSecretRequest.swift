//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Apple certificate secrets */
public class AppleCertificateSecretRequest: APIModel {

    /** apple secret details */
    public var data: DataType

    /** Apple certificate secrets */
    public class DataType: APIModel {

        /** The certificate contents in base 64 encoded string */
        public var base64Certificate: String

        /** The password for the certificate */
        public var password: String

        public init(base64Certificate: String, password: String) {
            self.base64Certificate = base64Certificate
            self.password = password
        }

        private enum CodingKeys: String, CodingKey {
            case base64Certificate
            case password
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)

            base64Certificate = try container.decode(.base64Certificate)
            password = try container.decode(.password)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)

            try container.encode(base64Certificate, forKey: .base64Certificate)
            try container.encode(password, forKey: .password)
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? DataType else { return false }
          guard self.base64Certificate == object.base64Certificate else { return false }
          guard self.password == object.password else { return false }
          return true
        }

        public static func == (lhs: DataType, rhs: DataType) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(data: DataType) {
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case data
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        data = try container.decode(.data)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(data, forKey: .data)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? AppleCertificateSecretRequest else { return false }
      guard self.data == object.data else { return false }
      return true
    }

    public static func == (lhs: AppleCertificateSecretRequest, rhs: AppleCertificateSecretRequest) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
