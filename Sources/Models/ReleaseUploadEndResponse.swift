//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** A response containing information about the uploaded release. */
public class ReleaseUploadEndResponse: APIModel {

    /** The ID of the release. */
    public var releaseId: Double?

    /** A URL to the new release. If upload was aborted will be null. */
    public var releaseURL: String?

    public init(releaseId: Double? = nil, releaseURL: String? = nil) {
        self.releaseId = releaseId
        self.releaseURL = releaseURL
    }

    private enum CodingKeys: String, CodingKey {
        case releaseId = "release_id"
        case releaseURL = "release_url"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        releaseId = try container.decodeIfPresent(.releaseId)
        releaseURL = try container.decodeIfPresent(.releaseURL)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(releaseId, forKey: .releaseId)
        try container.encodeIfPresent(releaseURL, forKey: .releaseURL)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? ReleaseUploadEndResponse else { return false }
      guard self.releaseId == object.releaseId else { return false }
      guard self.releaseURL == object.releaseURL else { return false }
      return true
    }

    public static func == (lhs: ReleaseUploadEndResponse, rhs: ReleaseUploadEndResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
