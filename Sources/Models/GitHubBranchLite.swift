//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** The lite version of GitHub branch */
public class GitHubBranchLite: APIModel {

    /** The repository name */
    public var ref: String?

    /** The lite version of GitHub repository */
    public var repo: Repo?

    /** The discription of repository */
    public var sha: String?

    /** The lite version of GitHub branch */
    public class Repo: APIModel {

        /** The repository id */
        public var id: Double?

        public init(id: Double? = nil) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)

            id = try container.decodeIfPresent(.id)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)

            try container.encodeIfPresent(id, forKey: .id)
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? Repo else { return false }
          guard self.id == object.id else { return false }
          return true
        }

        public static func == (lhs: Repo, rhs: Repo) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(ref: String? = nil, repo: Repo? = nil, sha: String? = nil) {
        self.ref = ref
        self.repo = repo
        self.sha = sha
    }

    private enum CodingKeys: String, CodingKey {
        case ref
        case repo
        case sha
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        ref = try container.decodeIfPresent(.ref)
        repo = try container.decodeIfPresent(.repo)
        sha = try container.decodeIfPresent(.sha)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(ref, forKey: .ref)
        try container.encodeIfPresent(repo, forKey: .repo)
        try container.encodeIfPresent(sha, forKey: .sha)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? GitHubBranchLite else { return false }
      guard self.ref == object.ref else { return false }
      guard self.repo == object.repo else { return false }
      guard self.sha == object.sha else { return false }
      return true
    }

    public static func == (lhs: GitHubBranchLite, rhs: GitHubBranchLite) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
