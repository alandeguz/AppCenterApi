//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class UploadedSymbolInfo: APIModel {

    /** The symbol id of the symbol binary */
    public var symbolId: String

    /** The platform the symbol is associated with */
    public var platform: String

    public init(symbolId: String, platform: String) {
        self.symbolId = symbolId
        self.platform = platform
    }

    private enum CodingKeys: String, CodingKey {
        case symbolId = "symbol_id"
        case platform
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        symbolId = try container.decode(.symbolId)
        platform = try container.decode(.platform)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(symbolId, forKey: .symbolId)
        try container.encode(platform, forKey: .platform)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? UploadedSymbolInfo else { return false }
      guard self.symbolId == object.symbolId else { return false }
      guard self.platform == object.platform else { return false }
      return true
    }

    public static func == (lhs: UploadedSymbolInfo, rhs: UploadedSymbolInfo) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
