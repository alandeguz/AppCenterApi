//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class DestinationError: APIModel {

    /** Error Codes:<br>
<b>invalid_store_secrets</b>: While distributing to store, secrets provided for store are not valid.<br>
<b>store_release_bad_request</b>: Proper package release details for the store is not provided.<br>
<b>store_release_unauthorized</b>: User is not authorized to publish to store due to invalid developer credentials.<br>
<b>store_release_forbidden</b>: Publish to store is forbidden due to conflicts/errors in the release version and already existing version in the store.<br>
<b>store_release_promotion</b>: Release already distributed, promoting a release is not supported.<br>
<b>store_track_deactivated</b>: One or more tracks would be deactivated with this release. This is not supported yet.<br>
<b>store_release_not_found</b>: App with the given package name is not found in the store.<br>
<b>store_release_not_available</b>: The release is not available.<br>
<b>internal_server_error</b>: Failed to distribute to a destination due to an internal server error.
 */
    public var code: String?

    public var id: String?

    public var message: String?

    public var name: String?

    public init(code: String? = nil, id: String? = nil, message: String? = nil, name: String? = nil) {
        self.code = code
        self.id = id
        self.message = message
        self.name = name
    }

    private enum CodingKeys: String, CodingKey {
        case code
        case id
        case message
        case name
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        code = try container.decodeIfPresent(.code)
        id = try container.decodeIfPresent(.id)
        message = try container.decodeIfPresent(.message)
        name = try container.decodeIfPresent(.name)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(code, forKey: .code)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(message, forKey: .message)
        try container.encodeIfPresent(name, forKey: .name)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? DestinationError else { return false }
      guard self.code == object.code else { return false }
      guard self.id == object.id else { return false }
      guard self.message == object.message else { return false }
      guard self.name == object.name else { return false }
      return true
    }

    public static func == (lhs: DestinationError, rhs: DestinationError) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
