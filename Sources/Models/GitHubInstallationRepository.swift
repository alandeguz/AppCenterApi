//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** The repository which is accessiable by GitHub App Installation */
public class GitHubInstallationRepository: APIModel {

    /** URL used to clone the repository */
    public var cloneURL: String?

    /** The default branch for the repo */
    public var defaultBranch: String?

    /** The discription of repository */
    public var description: String?

    /** Whether the repository is a fork */
    public var fork: Bool?

    /** The language in the repository */
    public var language: String?

    /** The repository name */
    public var name: String?

    /** The repository updated time */
    public var updatedAt: String?

    public init(cloneURL: String? = nil, defaultBranch: String? = nil, description: String? = nil, fork: Bool? = nil, language: String? = nil, name: String? = nil, updatedAt: String? = nil) {
        self.cloneURL = cloneURL
        self.defaultBranch = defaultBranch
        self.description = description
        self.fork = fork
        self.language = language
        self.name = name
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case cloneURL = "clone_url"
        case defaultBranch = "default_branch"
        case description
        case fork
        case language
        case name
        case updatedAt = "updated_at"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        cloneURL = try container.decodeIfPresent(.cloneURL)
        defaultBranch = try container.decodeIfPresent(.defaultBranch)
        description = try container.decodeIfPresent(.description)
        fork = try container.decodeIfPresent(.fork)
        language = try container.decodeIfPresent(.language)
        name = try container.decodeIfPresent(.name)
        updatedAt = try container.decodeIfPresent(.updatedAt)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(cloneURL, forKey: .cloneURL)
        try container.encodeIfPresent(defaultBranch, forKey: .defaultBranch)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(fork, forKey: .fork)
        try container.encodeIfPresent(language, forKey: .language)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? GitHubInstallationRepository else { return false }
      guard self.cloneURL == object.cloneURL else { return false }
      guard self.defaultBranch == object.defaultBranch else { return false }
      guard self.description == object.description else { return false }
      guard self.fork == object.fork else { return false }
      guard self.language == object.language else { return false }
      guard self.name == object.name else { return false }
      guard self.updatedAt == object.updatedAt else { return false }
      return true
    }

    public static func == (lhs: GitHubInstallationRepository, rhs: GitHubInstallationRepository) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
