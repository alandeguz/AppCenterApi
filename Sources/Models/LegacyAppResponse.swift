//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class LegacyAppResponse: APIModel {

    public var app: App?

    public class App: APIModel {

        public var collaborators: [String: Collaborators]?

        public var deployments: [String]?

        /** The app name. */
        public var name: String?

        public init(collaborators: [String: Collaborators]? = nil, deployments: [String]? = nil, name: String? = nil) {
            self.collaborators = collaborators
            self.deployments = deployments
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case collaborators
            case deployments
            case name
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)

            collaborators = try container.decodeIfPresent(.collaborators)
            deployments = try container.decodeArrayIfPresent(.deployments)
            name = try container.decodeIfPresent(.name)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)

            try container.encodeIfPresent(collaborators, forKey: .collaborators)
            try container.encodeIfPresent(deployments, forKey: .deployments)
            try container.encodeIfPresent(name, forKey: .name)
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? App else { return false }
          guard self.collaborators == object.collaborators else { return false }
          guard self.deployments == object.deployments else { return false }
          guard self.name == object.name else { return false }
          return true
        }

        public static func == (lhs: App, rhs: App) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(app: App? = nil) {
        self.app = app
    }

    private enum CodingKeys: String, CodingKey {
        case app
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        app = try container.decodeIfPresent(.app)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(app, forKey: .app)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? LegacyAppResponse else { return false }
      guard self.app == object.app else { return false }
      return true
    }

    public static func == (lhs: LegacyAppResponse, rhs: LegacyAppResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
