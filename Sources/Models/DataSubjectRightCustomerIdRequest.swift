//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class DataSubjectRightCustomerIdRequest: APIModel {

    /** type of the customer dataSubjectIdentifier */
    public enum `Type`: String, Codable {
        case customerAccountId = "CustomerAccountId"
        case customerUserId = "CustomerUserId"

        public static let cases: [`Type`] = [
          .customerAccountId,
          .customerUserId,
        ]
    }

    /** customer account id (b2c identifier) / customer user id (free form text) depending on the value of the fied `type` */
    public var dataSubjectIdentifier: String?

    /** type of the customer dataSubjectIdentifier */
    public var type: `Type`?

    public init(dataSubjectIdentifier: String? = nil, type: `Type`? = nil) {
        self.dataSubjectIdentifier = dataSubjectIdentifier
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case dataSubjectIdentifier
        case type
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        dataSubjectIdentifier = try container.decodeIfPresent(.dataSubjectIdentifier)
        type = try container.decodeIfPresent(.type)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(dataSubjectIdentifier, forKey: .dataSubjectIdentifier)
        try container.encodeIfPresent(type, forKey: .type)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? DataSubjectRightCustomerIdRequest else { return false }
      guard self.dataSubjectIdentifier == object.dataSubjectIdentifier else { return false }
      guard self.type == object.type else { return false }
      return true
    }

    public static func == (lhs: DataSubjectRightCustomerIdRequest, rhs: DataSubjectRightCustomerIdRequest) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
