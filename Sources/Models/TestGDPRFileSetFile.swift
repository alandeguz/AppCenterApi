//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class TestGDPRFileSetFile: APIModel {

    public var appUploadId: ID?

    public var hashFileId: ID?

    public var hashFileURL: String?

    public var path: String?

    public init(appUploadId: ID? = nil, hashFileId: ID? = nil, hashFileURL: String? = nil, path: String? = nil) {
        self.appUploadId = appUploadId
        self.hashFileId = hashFileId
        self.hashFileURL = hashFileURL
        self.path = path
    }

    private enum CodingKeys: String, CodingKey {
        case appUploadId = "app_upload_id"
        case hashFileId = "hash_file_id"
        case hashFileURL = "hash_file_url"
        case path
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        appUploadId = try container.decodeIfPresent(.appUploadId)
        hashFileId = try container.decodeIfPresent(.hashFileId)
        hashFileURL = try container.decodeIfPresent(.hashFileURL)
        path = try container.decodeIfPresent(.path)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(appUploadId, forKey: .appUploadId)
        try container.encodeIfPresent(hashFileId, forKey: .hashFileId)
        try container.encodeIfPresent(hashFileURL, forKey: .hashFileURL)
        try container.encodeIfPresent(path, forKey: .path)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? TestGDPRFileSetFile else { return false }
      guard self.appUploadId == object.appUploadId else { return false }
      guard self.hashFileId == object.hashFileId else { return false }
      guard self.hashFileURL == object.hashFileURL else { return false }
      guard self.path == object.path else { return false }
      return true
    }

    public static func == (lhs: TestGDPRFileSetFile, rhs: TestGDPRFileSetFile) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
