//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Notification failure outcome count */
public class NotificationFailureOutcomeCount: APIModel {

    /** count of this type of failure */
    public var count: Int?

    /** The reason of the notification failure */
    public var failureReason: String?

    public init(count: Int? = nil, failureReason: String? = nil) {
        self.count = count
        self.failureReason = failureReason
    }

    private enum CodingKeys: String, CodingKey {
        case count
        case failureReason = "failure_reason"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        count = try container.decodeIfPresent(.count)
        failureReason = try container.decodeIfPresent(.failureReason)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(count, forKey: .count)
        try container.encodeIfPresent(failureReason, forKey: .failureReason)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? NotificationFailureOutcomeCount else { return false }
      guard self.count == object.count else { return false }
      guard self.failureReason == object.failureReason else { return false }
      return true
    }

    public static func == (lhs: NotificationFailureOutcomeCount, rhs: NotificationFailureOutcomeCount) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
