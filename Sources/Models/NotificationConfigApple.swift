//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Apple notification certificate configuration. */
public class NotificationConfigApple: APIModel {

    /** Type of endpoint the certificate or token are associated with */
    public enum EndpointType: String, Codable {
        case production = "production"
        case sandbox = "sandbox"

        public static let cases: [EndpointType] = [
          .production,
          .sandbox,
        ]
    }

    /** Type of endpoint the certificate or token are associated with */
    public var endpointType: EndpointType

    /** Base64 encoded certificate string. */
    public var certEncoded: String

    /** Certificate file name */
    public var certFilename: String

    /** Certificate password */
    public var certKey: String

    public init(endpointType: EndpointType, certEncoded: String, certFilename: String, certKey: String) {
        self.endpointType = endpointType
        self.certEncoded = certEncoded
        self.certFilename = certFilename
        self.certKey = certKey
    }

    private enum CodingKeys: String, CodingKey {
        case endpointType = "endpoint_type"
        case certEncoded = "cert_encoded"
        case certFilename = "cert_filename"
        case certKey = "cert_key"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        endpointType = try container.decode(.endpointType)
        certEncoded = try container.decode(.certEncoded)
        certFilename = try container.decode(.certFilename)
        certKey = try container.decode(.certKey)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(endpointType, forKey: .endpointType)
        try container.encode(certEncoded, forKey: .certEncoded)
        try container.encode(certFilename, forKey: .certFilename)
        try container.encode(certKey, forKey: .certKey)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? NotificationConfigApple else { return false }
      guard self.endpointType == object.endpointType else { return false }
      guard self.certEncoded == object.certEncoded else { return false }
      guard self.certFilename == object.certFilename else { return false }
      guard self.certKey == object.certKey else { return false }
      return true
    }

    public static func == (lhs: NotificationConfigApple, rhs: NotificationConfigApple) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
