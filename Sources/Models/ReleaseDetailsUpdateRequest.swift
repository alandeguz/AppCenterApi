//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** A request containing information for updating details of a release */
public class ReleaseDetailsUpdateRequest: APIModel {

    /** Contains metadata about the build that produced the release being uploaded */
    public var build: Build?

    /** Toggle this release to be enable distribute/download or not. */
    public var enabled: Bool?

    /** Release notes for this release. */
    public var releaseNotes: String?

    /** A request containing information for updating details of a release */
    public class Build: APIModel {

        /** The branch name of the build producing the release */
        public var branchName: String?

        /** The commit hash of the build producing the release */
        public var commitHash: String?

        /** The commit message of the build producing the release */
        public var commitMessage: String?

        public init(branchName: String? = nil, commitHash: String? = nil, commitMessage: String? = nil) {
            self.branchName = branchName
            self.commitHash = commitHash
            self.commitMessage = commitMessage
        }

        private enum CodingKeys: String, CodingKey {
            case branchName = "branch_name"
            case commitHash = "commit_hash"
            case commitMessage = "commit_message"
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)

            branchName = try container.decodeIfPresent(.branchName)
            commitHash = try container.decodeIfPresent(.commitHash)
            commitMessage = try container.decodeIfPresent(.commitMessage)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)

            try container.encodeIfPresent(branchName, forKey: .branchName)
            try container.encodeIfPresent(commitHash, forKey: .commitHash)
            try container.encodeIfPresent(commitMessage, forKey: .commitMessage)
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? Build else { return false }
          guard self.branchName == object.branchName else { return false }
          guard self.commitHash == object.commitHash else { return false }
          guard self.commitMessage == object.commitMessage else { return false }
          return true
        }

        public static func == (lhs: Build, rhs: Build) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(build: Build? = nil, enabled: Bool? = nil, releaseNotes: String? = nil) {
        self.build = build
        self.enabled = enabled
        self.releaseNotes = releaseNotes
    }

    private enum CodingKeys: String, CodingKey {
        case build
        case enabled
        case releaseNotes = "release_notes"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        build = try container.decodeIfPresent(.build)
        enabled = try container.decodeIfPresent(.enabled)
        releaseNotes = try container.decodeIfPresent(.releaseNotes)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(build, forKey: .build)
        try container.encodeIfPresent(enabled, forKey: .enabled)
        try container.encodeIfPresent(releaseNotes, forKey: .releaseNotes)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? ReleaseDetailsUpdateRequest else { return false }
      guard self.build == object.build else { return false }
      guard self.enabled == object.enabled else { return false }
      guard self.releaseNotes == object.releaseNotes else { return false }
      return true
    }

    public static func == (lhs: ReleaseDetailsUpdateRequest, rhs: ReleaseDetailsUpdateRequest) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
