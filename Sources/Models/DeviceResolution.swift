//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Device screen resolution */
public class DeviceResolution: APIModel {

    public var height: String?

    public var ppi: String?

    public var width: String?

    public init(height: String? = nil, ppi: String? = nil, width: String? = nil) {
        self.height = height
        self.ppi = ppi
        self.width = width
    }

    private enum CodingKeys: String, CodingKey {
        case height
        case ppi
        case width
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        height = try container.decodeIfPresent(.height)
        ppi = try container.decodeIfPresent(.ppi)
        width = try container.decodeIfPresent(.width)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(height, forKey: .height)
        try container.encodeIfPresent(ppi, forKey: .ppi)
        try container.encodeIfPresent(width, forKey: .width)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? DeviceResolution else { return false }
      guard self.height == object.height else { return false }
      guard self.ppi == object.ppi else { return false }
      guard self.width == object.width else { return false }
      return true
    }

    public static func == (lhs: DeviceResolution, rhs: DeviceResolution) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
