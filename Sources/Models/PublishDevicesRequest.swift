//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** The publising information. */
public class PublishDevicesRequest: APIModel {

    /** The service_connection_id of the stored Apple credentials instead of username, password. */
    public var accountServiceConnectionId: String?

    /** Array of device UDID's to be published to the Apple Developer account. */
    public var devices: [String]?

    /** The password for the Apple Developer account to publish the devices to. */
    public var password: String?

    /** When set to true, all unprovisioned devices will be published to the Apple Developer account.  When false, only the provided devices will be published to the Apple Developer account. */
    public var publishAllDevices: Bool?

    /** The username for the Apple Developer account to publish the devices to. */
    public var username: String?

    public init(accountServiceConnectionId: String? = nil, devices: [String]? = nil, password: String? = nil, publishAllDevices: Bool? = nil, username: String? = nil) {
        self.accountServiceConnectionId = accountServiceConnectionId
        self.devices = devices
        self.password = password
        self.publishAllDevices = publishAllDevices
        self.username = username
    }

    private enum CodingKeys: String, CodingKey {
        case accountServiceConnectionId = "account_service_connection_id"
        case devices
        case password
        case publishAllDevices = "publish_all_devices"
        case username
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        accountServiceConnectionId = try container.decodeIfPresent(.accountServiceConnectionId)
        devices = try container.decodeArrayIfPresent(.devices)
        password = try container.decodeIfPresent(.password)
        publishAllDevices = try container.decodeIfPresent(.publishAllDevices)
        username = try container.decodeIfPresent(.username)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(accountServiceConnectionId, forKey: .accountServiceConnectionId)
        try container.encodeIfPresent(devices, forKey: .devices)
        try container.encodeIfPresent(password, forKey: .password)
        try container.encodeIfPresent(publishAllDevices, forKey: .publishAllDevices)
        try container.encodeIfPresent(username, forKey: .username)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? PublishDevicesRequest else { return false }
      guard self.accountServiceConnectionId == object.accountServiceConnectionId else { return false }
      guard self.devices == object.devices else { return false }
      guard self.password == object.password else { return false }
      guard self.publishAllDevices == object.publishAllDevices else { return false }
      guard self.username == object.username else { return false }
      return true
    }

    public static func == (lhs: PublishDevicesRequest, rhs: PublishDevicesRequest) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
