//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class JavaScriptToolset: APIModel {

    /** Paths for detected package.json files */
    public var packageJsonPaths: [String]

    /** The React Native solutions detected */
    public var javascriptSolutions: [JavascriptSolutions]?

    public init(packageJsonPaths: [String], javascriptSolutions: [JavascriptSolutions]? = nil) {
        self.packageJsonPaths = packageJsonPaths
        self.javascriptSolutions = javascriptSolutions
    }

    private enum CodingKeys: String, CodingKey {
        case packageJsonPaths
        case javascriptSolutions
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        packageJsonPaths = try container.decodeArray(.packageJsonPaths)
        javascriptSolutions = try container.decodeArrayIfPresent(.javascriptSolutions)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(packageJsonPaths, forKey: .packageJsonPaths)
        try container.encodeIfPresent(javascriptSolutions, forKey: .javascriptSolutions)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? JavaScriptToolset else { return false }
      guard self.packageJsonPaths == object.packageJsonPaths else { return false }
      guard self.javascriptSolutions == object.javascriptSolutions else { return false }
      return true
    }

    public static func == (lhs: JavaScriptToolset, rhs: JavaScriptToolset) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
