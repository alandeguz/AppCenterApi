//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class HandledErrorDetails: APIModel {

    /** Timestamp when the app was launched, example: '2017-03-13T18:05:42Z'.
 */
    public var appLaunchTimestamp: DateTime?

    /** Carrier name (for mobile devices).
 */
    public var carrierName: String?

    /** Flag indicating if device is jailbroken
 */
    public var jailbreak: Bool?

    public var name: String?

    public var properties: [String: String]?

    public var reasonFrames: [ReasonFrames]?

    public init(appLaunchTimestamp: DateTime? = nil, carrierName: String? = nil, jailbreak: Bool? = nil, name: String? = nil, properties: [String: String]? = nil, reasonFrames: [ReasonFrames]? = nil) {
        self.appLaunchTimestamp = appLaunchTimestamp
        self.carrierName = carrierName
        self.jailbreak = jailbreak
        self.name = name
        self.properties = properties
        self.reasonFrames = reasonFrames
    }

    private enum CodingKeys: String, CodingKey {
        case appLaunchTimestamp
        case carrierName
        case jailbreak
        case name
        case properties
        case reasonFrames
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        appLaunchTimestamp = try container.decodeIfPresent(.appLaunchTimestamp)
        carrierName = try container.decodeIfPresent(.carrierName)
        jailbreak = try container.decodeIfPresent(.jailbreak)
        name = try container.decodeIfPresent(.name)
        properties = try container.decodeIfPresent(.properties)
        reasonFrames = try container.decodeArrayIfPresent(.reasonFrames)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(appLaunchTimestamp, forKey: .appLaunchTimestamp)
        try container.encodeIfPresent(carrierName, forKey: .carrierName)
        try container.encodeIfPresent(jailbreak, forKey: .jailbreak)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(properties, forKey: .properties)
        try container.encodeIfPresent(reasonFrames, forKey: .reasonFrames)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? HandledErrorDetails else { return false }
      guard self.appLaunchTimestamp == object.appLaunchTimestamp else { return false }
      guard self.carrierName == object.carrierName else { return false }
      guard self.jailbreak == object.jailbreak else { return false }
      guard self.name == object.name else { return false }
      guard self.properties == object.properties else { return false }
      guard self.reasonFrames == object.reasonFrames else { return false }
      return true
    }

    public static func == (lhs: HandledErrorDetails, rhs: HandledErrorDetails) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
