//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Details of an uploaded release */
public class ManagementReleaseDetailsResponse: APIModel {

    /** The release's origin */
    public enum Origin: String, Codable {
        case hockeyapp = "hockeyapp"
        case appcenter = "appcenter"

        public static let cases: [Origin] = [
          .hockeyapp,
          .appcenter,
        ]
    }

    /** The release's buildVersion.<br>
For iOS: CFBundleVersion from info.plist.<br>
For Android: android:versionCode from AppManifest.xml.
 */
    public var buildVersion: String?

    /** UTC time the release was created in ISO 8601 format. */
    public var createdAt: String?

    /** UTC time the release was created in ISO 8601 format. */
    public var deletedAt: String?

    /** ID identifying this unique release. */
    public var distinctId: Int?

    /** This value determines the whether a release currently is enabled or disabled. */
    public var enabled: Bool?

    /** The release's origin */
    public var origin: Origin?

    /** The release's sortVersion. */
    public var sortVersion: String?

    /** The release's short version.<br>
For iOS: CFBundleShortVersionString from info.plist.<br>
For Android: android:versionName from AppManifest.xml.
 */
    public var version: String?

    public init(buildVersion: String? = nil, createdAt: String? = nil, deletedAt: String? = nil, distinctId: Int? = nil, enabled: Bool? = nil, origin: Origin? = nil, sortVersion: String? = nil, version: String? = nil) {
        self.buildVersion = buildVersion
        self.createdAt = createdAt
        self.deletedAt = deletedAt
        self.distinctId = distinctId
        self.enabled = enabled
        self.origin = origin
        self.sortVersion = sortVersion
        self.version = version
    }

    private enum CodingKeys: String, CodingKey {
        case buildVersion
        case createdAt
        case deletedAt
        case distinctId
        case enabled
        case origin
        case sortVersion
        case version
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        buildVersion = try container.decodeIfPresent(.buildVersion)
        createdAt = try container.decodeIfPresent(.createdAt)
        deletedAt = try container.decodeIfPresent(.deletedAt)
        distinctId = try container.decodeIfPresent(.distinctId)
        enabled = try container.decodeIfPresent(.enabled)
        origin = try container.decodeIfPresent(.origin)
        sortVersion = try container.decodeIfPresent(.sortVersion)
        version = try container.decodeIfPresent(.version)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(buildVersion, forKey: .buildVersion)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(deletedAt, forKey: .deletedAt)
        try container.encodeIfPresent(distinctId, forKey: .distinctId)
        try container.encodeIfPresent(enabled, forKey: .enabled)
        try container.encodeIfPresent(origin, forKey: .origin)
        try container.encodeIfPresent(sortVersion, forKey: .sortVersion)
        try container.encodeIfPresent(version, forKey: .version)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? ManagementReleaseDetailsResponse else { return false }
      guard self.buildVersion == object.buildVersion else { return false }
      guard self.createdAt == object.createdAt else { return false }
      guard self.deletedAt == object.deletedAt else { return false }
      guard self.distinctId == object.distinctId else { return false }
      guard self.enabled == object.enabled else { return false }
      guard self.origin == object.origin else { return false }
      guard self.sortVersion == object.sortVersion else { return false }
      guard self.version == object.version else { return false }
      return true
    }

    public static func == (lhs: ManagementReleaseDetailsResponse, rhs: ManagementReleaseDetailsResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
