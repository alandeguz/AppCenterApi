//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EventDeviceCount: APIModel {

    public var devicesCount: [DevicesCount]?

    public var previousTotalDevicesWithEvent: Int?

    public var totalDevices: Int?

    public var totalDevicesWithEvent: Int?

    public init(devicesCount: [DevicesCount]? = nil, previousTotalDevicesWithEvent: Int? = nil, totalDevices: Int? = nil, totalDevicesWithEvent: Int? = nil) {
        self.devicesCount = devicesCount
        self.previousTotalDevicesWithEvent = previousTotalDevicesWithEvent
        self.totalDevices = totalDevices
        self.totalDevicesWithEvent = totalDevicesWithEvent
    }

    private enum CodingKeys: String, CodingKey {
        case devicesCount = "devices_count"
        case previousTotalDevicesWithEvent = "previous_total_devices_with_event"
        case totalDevices = "total_devices"
        case totalDevicesWithEvent = "total_devices_with_event"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        devicesCount = try container.decodeArrayIfPresent(.devicesCount)
        previousTotalDevicesWithEvent = try container.decodeIfPresent(.previousTotalDevicesWithEvent)
        totalDevices = try container.decodeIfPresent(.totalDevices)
        totalDevicesWithEvent = try container.decodeIfPresent(.totalDevicesWithEvent)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(devicesCount, forKey: .devicesCount)
        try container.encodeIfPresent(previousTotalDevicesWithEvent, forKey: .previousTotalDevicesWithEvent)
        try container.encodeIfPresent(totalDevices, forKey: .totalDevices)
        try container.encodeIfPresent(totalDevicesWithEvent, forKey: .totalDevicesWithEvent)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EventDeviceCount else { return false }
      guard self.devicesCount == object.devicesCount else { return false }
      guard self.previousTotalDevicesWithEvent == object.previousTotalDevicesWithEvent else { return false }
      guard self.totalDevices == object.totalDevices else { return false }
      guard self.totalDevicesWithEvent == object.totalDevicesWithEvent else { return false }
      return true
    }

    public static func == (lhs: EventDeviceCount, rhs: EventDeviceCount) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
