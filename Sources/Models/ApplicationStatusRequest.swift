//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** The information needed to fetch the status of an application */
public class ApplicationStatusRequest: APIModel {

    /** The username for the Apple Developer account. */
    public var username: String

    /** The password for the Apple Developer account. */
    public var password: String

    /** Bundle Identifier of application in Apple Itunes portal. */
    public var bundleIdentifier: String

    /** Track Identifier for which the status is to be fetched. */
    public var trackIdentifier: String

    /** The version of build for which real time status is to be fetched. */
    public var buildVersion: String?

    /** Identifier of the team to use when logged in. */
    public var teamIdentifier: String?

    /** The Train version for which the status is to be fetched. */
    public var trainVersion: String?

    public init(username: String, password: String, bundleIdentifier: String, trackIdentifier: String, buildVersion: String? = nil, teamIdentifier: String? = nil, trainVersion: String? = nil) {
        self.username = username
        self.password = password
        self.bundleIdentifier = bundleIdentifier
        self.trackIdentifier = trackIdentifier
        self.buildVersion = buildVersion
        self.teamIdentifier = teamIdentifier
        self.trainVersion = trainVersion
    }

    private enum CodingKeys: String, CodingKey {
        case username
        case password
        case bundleIdentifier = "bundle_identifier"
        case trackIdentifier = "track_identifier"
        case buildVersion = "build_version"
        case teamIdentifier = "team_identifier"
        case trainVersion = "train_version"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        username = try container.decode(.username)
        password = try container.decode(.password)
        bundleIdentifier = try container.decode(.bundleIdentifier)
        trackIdentifier = try container.decode(.trackIdentifier)
        buildVersion = try container.decodeIfPresent(.buildVersion)
        teamIdentifier = try container.decodeIfPresent(.teamIdentifier)
        trainVersion = try container.decodeIfPresent(.trainVersion)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(username, forKey: .username)
        try container.encode(password, forKey: .password)
        try container.encode(bundleIdentifier, forKey: .bundleIdentifier)
        try container.encode(trackIdentifier, forKey: .trackIdentifier)
        try container.encodeIfPresent(buildVersion, forKey: .buildVersion)
        try container.encodeIfPresent(teamIdentifier, forKey: .teamIdentifier)
        try container.encodeIfPresent(trainVersion, forKey: .trainVersion)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? ApplicationStatusRequest else { return false }
      guard self.username == object.username else { return false }
      guard self.password == object.password else { return false }
      guard self.bundleIdentifier == object.bundleIdentifier else { return false }
      guard self.trackIdentifier == object.trackIdentifier else { return false }
      guard self.buildVersion == object.buildVersion else { return false }
      guard self.teamIdentifier == object.teamIdentifier else { return false }
      guard self.trainVersion == object.trainVersion else { return false }
      return true
    }

    public static func == (lhs: ApplicationStatusRequest, rhs: ApplicationStatusRequest) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
