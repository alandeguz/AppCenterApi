//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** The Xamarin SDK bundle */
public class XamarinSDKBundle: APIModel {

    /** If the SDK is latest stable */
    public var current: Bool?

    /** The Mono version */
    public var monoVersion: String?

    /** The Xamarin SDK version */
    public var sdkBundle: String?

    /** If the SDK is stable */
    public var stable: Bool?

    /** Specific for iOS SDK. A list of Xcode versions supported by current SDK version */
    public var xcodeVersions: [String]?

    public init(current: Bool? = nil, monoVersion: String? = nil, sdkBundle: String? = nil, stable: Bool? = nil, xcodeVersions: [String]? = nil) {
        self.current = current
        self.monoVersion = monoVersion
        self.sdkBundle = sdkBundle
        self.stable = stable
        self.xcodeVersions = xcodeVersions
    }

    private enum CodingKeys: String, CodingKey {
        case current
        case monoVersion
        case sdkBundle
        case stable
        case xcodeVersions
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        current = try container.decodeIfPresent(.current)
        monoVersion = try container.decodeIfPresent(.monoVersion)
        sdkBundle = try container.decodeIfPresent(.sdkBundle)
        stable = try container.decodeIfPresent(.stable)
        xcodeVersions = try container.decodeArrayIfPresent(.xcodeVersions)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(current, forKey: .current)
        try container.encodeIfPresent(monoVersion, forKey: .monoVersion)
        try container.encodeIfPresent(sdkBundle, forKey: .sdkBundle)
        try container.encodeIfPresent(stable, forKey: .stable)
        try container.encodeIfPresent(xcodeVersions, forKey: .xcodeVersions)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? XamarinSDKBundle else { return false }
      guard self.current == object.current else { return false }
      guard self.monoVersion == object.monoVersion else { return false }
      guard self.sdkBundle == object.sdkBundle else { return false }
      guard self.stable == object.stable else { return false }
      guard self.xcodeVersions == object.xcodeVersions else { return false }
      return true
    }

    public static func == (lhs: XamarinSDKBundle, rhs: XamarinSDKBundle) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
