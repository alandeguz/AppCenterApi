//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** ExternalStoreResponse */
public class ExternalStoreResponse: APIModel {

    /** Store track */
    public enum Track: String, Codable {
        case production = "production"
        case alpha = "alpha"
        case beta = "beta"
        case testflightInternal = "testflight-internal"
        case testflightExternal = "testflight-external"

        public static let cases: [Track] = [
          .production,
          .alpha,
          .beta,
          .testflightInternal,
          .testflightExternal,
        ]
    }

    /** The ID of the principal that created the store. */
    public var createdBy: String?

    /** The type of the principal that created the store. */
    public var createdByPrincipalType: String?

    /** Store id */
    public var id: String?

    /** Store details for intune */
    public var intuneDetails: IntuneDetails?

    /** Store Name */
    public var name: String?

    /** Id for the shared service connection. In case of Apple / GooglePlay stores, this connection will be used to connect to the Apple / Google stores in App Center. */
    public var serviceConnectionId: String?

    /** Store track */
    public var track: Track?

    /** Store Type */
    public var type: String?

    /** ExternalStoreResponse */
    public class IntuneDetails: APIModel {

        public var appCategory: AppCategory?

        public var targetAudience: TargetAudience?

        /** ExternalStoreResponse */
        public class AppCategory: APIModel {

            /** ID for the category. */
            public var id: String?

            /** display name for the app category */
            public var name: String?

            public init(id: String? = nil, name: String? = nil) {
                self.id = id
                self.name = name
            }

            private enum CodingKeys: String, CodingKey {
                case id
                case name
            }

            public required init(from decoder: Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)

                id = try container.decodeIfPresent(.id)
                name = try container.decodeIfPresent(.name)
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.container(keyedBy: CodingKeys.self)

                try container.encodeIfPresent(id, forKey: .id)
                try container.encodeIfPresent(name, forKey: .name)
            }

            public func isEqual(to object: Any?) -> Bool {
              guard let object = object as? AppCategory else { return false }
              guard self.id == object.id else { return false }
              guard self.name == object.name else { return false }
              return true
            }

            public static func == (lhs: AppCategory, rhs: AppCategory) -> Bool {
                return lhs.isEqual(to: rhs)
            }
        }

        /** ExternalStoreResponse */
        public class TargetAudience: APIModel {

            /** ID for the target audience/group. */
            public var id: String?

            /** display name for the target audience/group */
            public var name: String?

            public init(id: String? = nil, name: String? = nil) {
                self.id = id
                self.name = name
            }

            private enum CodingKeys: String, CodingKey {
                case id
                case name
            }

            public required init(from decoder: Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)

                id = try container.decodeIfPresent(.id)
                name = try container.decodeIfPresent(.name)
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.container(keyedBy: CodingKeys.self)

                try container.encodeIfPresent(id, forKey: .id)
                try container.encodeIfPresent(name, forKey: .name)
            }

            public func isEqual(to object: Any?) -> Bool {
              guard let object = object as? TargetAudience else { return false }
              guard self.id == object.id else { return false }
              guard self.name == object.name else { return false }
              return true
            }

            public static func == (lhs: TargetAudience, rhs: TargetAudience) -> Bool {
                return lhs.isEqual(to: rhs)
            }
        }

        public init(appCategory: AppCategory? = nil, targetAudience: TargetAudience? = nil) {
            self.appCategory = appCategory
            self.targetAudience = targetAudience
        }

        private enum CodingKeys: String, CodingKey {
            case appCategory = "app_category"
            case targetAudience = "target_audience"
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)

            appCategory = try container.decodeIfPresent(.appCategory)
            targetAudience = try container.decodeIfPresent(.targetAudience)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)

            try container.encodeIfPresent(appCategory, forKey: .appCategory)
            try container.encodeIfPresent(targetAudience, forKey: .targetAudience)
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? IntuneDetails else { return false }
          guard self.appCategory == object.appCategory else { return false }
          guard self.targetAudience == object.targetAudience else { return false }
          return true
        }

        public static func == (lhs: IntuneDetails, rhs: IntuneDetails) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(createdBy: String? = nil, createdByPrincipalType: String? = nil, id: String? = nil, intuneDetails: IntuneDetails? = nil, name: String? = nil, serviceConnectionId: String? = nil, track: Track? = nil, type: String? = nil) {
        self.createdBy = createdBy
        self.createdByPrincipalType = createdByPrincipalType
        self.id = id
        self.intuneDetails = intuneDetails
        self.name = name
        self.serviceConnectionId = serviceConnectionId
        self.track = track
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case createdBy = "created_by"
        case createdByPrincipalType = "created_by_principal_type"
        case id
        case intuneDetails = "intune_details"
        case name
        case serviceConnectionId = "service_connection_id"
        case track
        case type
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        createdBy = try container.decodeIfPresent(.createdBy)
        createdByPrincipalType = try container.decodeIfPresent(.createdByPrincipalType)
        id = try container.decodeIfPresent(.id)
        intuneDetails = try container.decodeIfPresent(.intuneDetails)
        name = try container.decodeIfPresent(.name)
        serviceConnectionId = try container.decodeIfPresent(.serviceConnectionId)
        track = try container.decodeIfPresent(.track)
        type = try container.decodeIfPresent(.type)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(createdBy, forKey: .createdBy)
        try container.encodeIfPresent(createdByPrincipalType, forKey: .createdByPrincipalType)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(intuneDetails, forKey: .intuneDetails)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(serviceConnectionId, forKey: .serviceConnectionId)
        try container.encodeIfPresent(track, forKey: .track)
        try container.encodeIfPresent(type, forKey: .type)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? ExternalStoreResponse else { return false }
      guard self.createdBy == object.createdBy else { return false }
      guard self.createdByPrincipalType == object.createdByPrincipalType else { return false }
      guard self.id == object.id else { return false }
      guard self.intuneDetails == object.intuneDetails else { return false }
      guard self.name == object.name else { return false }
      guard self.serviceConnectionId == object.serviceConnectionId else { return false }
      guard self.track == object.track else { return false }
      guard self.type == object.type else { return false }
      return true
    }

    public static func == (lhs: ExternalStoreResponse, rhs: ExternalStoreResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
