//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** a exception */
public class Exception: APIModel {

    /** SDK/Platform this thread is beeing generated from */
    public enum Platform: String, Codable {
        case ios = "ios"
        case android = "android"
        case xamarin = "xamarin"
        case reactNative = "react-native"
        case ndk = "ndk"
        case unity = "unity"
        case other = "other"

        public static let cases: [Platform] = [
          .ios,
          .android,
          .xamarin,
          .reactNative,
          .ndk,
          .unity,
          .other,
        ]
    }

    /** frames of the excetpion */
    public var frames: [Frames]

    public var innerExceptions: [Exception]?

    /** SDK/Platform this thread is beeing generated from */
    public var platform: Platform?

    /** Reason of the exception */
    public var reason: String?

    /** relevant exception (crashed) */
    public var relevant: Bool?

    /** Type of the exception (NSSomethingException, NullPointerException) */
    public var type: String?

    public init(frames: [Frames], innerExceptions: [Exception]? = nil, platform: Platform? = nil, reason: String? = nil, relevant: Bool? = nil, type: String? = nil) {
        self.frames = frames
        self.innerExceptions = innerExceptions
        self.platform = platform
        self.reason = reason
        self.relevant = relevant
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case frames
        case innerExceptions = "inner_exceptions"
        case platform
        case reason
        case relevant
        case type
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        frames = try container.decodeArray(.frames)
        innerExceptions = try container.decodeArrayIfPresent(.innerExceptions)
        platform = try container.decodeIfPresent(.platform)
        reason = try container.decodeIfPresent(.reason)
        relevant = try container.decodeIfPresent(.relevant)
        type = try container.decodeIfPresent(.type)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(frames, forKey: .frames)
        try container.encodeIfPresent(innerExceptions, forKey: .innerExceptions)
        try container.encodeIfPresent(platform, forKey: .platform)
        try container.encodeIfPresent(reason, forKey: .reason)
        try container.encodeIfPresent(relevant, forKey: .relevant)
        try container.encodeIfPresent(type, forKey: .type)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? Exception else { return false }
      guard self.frames == object.frames else { return false }
      guard self.innerExceptions == object.innerExceptions else { return false }
      guard self.platform == object.platform else { return false }
      guard self.reason == object.reason else { return false }
      guard self.relevant == object.relevant else { return false }
      guard self.type == object.type else { return false }
      return true
    }

    public static func == (lhs: Exception, rhs: Exception) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
