//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** The GitHub Installation */
public class GitHubInstallationLite: APIModel {

    /** The GitHub Installation */
    public var account: Account?

    /** GitHub Installation App Id */
    public var appId: Double?

    /** GitHub Installation Id */
    public var id: Double?

    /** The GitHub Installation */
    public class Account: APIModel {

        /** GitHub Account Id */
        public var id: String?

        /** GitHub Account Login Name */
        public var login: String?

        /** GitHub Account Type */
        public var type: String?

        /** GitHub Account Url */
        public var url: String?

        public init(id: String? = nil, login: String? = nil, type: String? = nil, url: String? = nil) {
            self.id = id
            self.login = login
            self.type = type
            self.url = url
        }

        private enum CodingKeys: String, CodingKey {
            case id
            case login
            case type
            case url
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)

            id = try container.decodeIfPresent(.id)
            login = try container.decodeIfPresent(.login)
            type = try container.decodeIfPresent(.type)
            url = try container.decodeIfPresent(.url)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)

            try container.encodeIfPresent(id, forKey: .id)
            try container.encodeIfPresent(login, forKey: .login)
            try container.encodeIfPresent(type, forKey: .type)
            try container.encodeIfPresent(url, forKey: .url)
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? Account else { return false }
          guard self.id == object.id else { return false }
          guard self.login == object.login else { return false }
          guard self.type == object.type else { return false }
          guard self.url == object.url else { return false }
          return true
        }

        public static func == (lhs: Account, rhs: Account) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(account: Account? = nil, appId: Double? = nil, id: Double? = nil) {
        self.account = account
        self.appId = appId
        self.id = id
    }

    private enum CodingKeys: String, CodingKey {
        case account
        case appId = "app_id"
        case id
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        account = try container.decodeIfPresent(.account)
        appId = try container.decodeIfPresent(.appId)
        id = try container.decodeIfPresent(.id)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(account, forKey: .account)
        try container.encodeIfPresent(appId, forKey: .appId)
        try container.encodeIfPresent(id, forKey: .id)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? GitHubInstallationLite else { return false }
      guard self.account == object.account else { return false }
      guard self.appId == object.appId else { return false }
      guard self.id == object.id else { return false }
      return true
    }

    public static func == (lhs: GitHubInstallationLite, rhs: GitHubInstallationLite) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
