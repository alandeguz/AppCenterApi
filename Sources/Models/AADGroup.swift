//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class AADGroup: APIModel {

    /** The id of the aad group */
    public var aadGroupId: ID

    /** The id of the aad tenant */
    public var tenantId: ID

    /** The display name of the aad group */
    public var displayName: String

    public init(aadGroupId: ID, tenantId: ID, displayName: String) {
        self.aadGroupId = aadGroupId
        self.tenantId = tenantId
        self.displayName = displayName
    }

    private enum CodingKeys: String, CodingKey {
        case aadGroupId = "aad_group_id"
        case tenantId = "tenant_id"
        case displayName = "display_name"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        aadGroupId = try container.decode(.aadGroupId)
        tenantId = try container.decode(.tenantId)
        displayName = try container.decode(.displayName)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(aadGroupId, forKey: .aadGroupId)
        try container.encode(tenantId, forKey: .tenantId)
        try container.encode(displayName, forKey: .displayName)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? AADGroup else { return false }
      guard self.aadGroupId == object.aadGroupId else { return false }
      guard self.tenantId == object.tenantId else { return false }
      guard self.displayName == object.displayName else { return false }
      return true
    }

    public static func == (lhs: AADGroup, rhs: AADGroup) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
