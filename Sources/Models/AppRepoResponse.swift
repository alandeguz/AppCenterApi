//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class AppRepoResponse: APIModel {

    /** The provider of the repository */
    public enum RepoProvider: String, Codable {
        case github = "github"
        case bitbucket = "bitbucket"
        case vsts = "vsts"
        case gitlab = "gitlab"

        public static let cases: [RepoProvider] = [
          .github,
          .bitbucket,
          .vsts,
          .gitlab,
        ]
    }

    /** The unique id (UUID) of the repository integration */
    public var id: ID

    /** The unique id (UUID) of the app that this repository integration belongs to */
    public var appId: ID

    /** The unique id (UUID) of the user who configured the repository */
    public var userId: ID

    /** The absolute URL of the repository */
    public var repoURL: String

    /** User id from the provider */
    public var externalUserId: String?

    /** Installation id from the provider */
    public var installationId: String?

    /** Repository id from the provider */
    public var repoId: String?

    /** The provider of the repository */
    public var repoProvider: RepoProvider?

    /** The id of the service connection stored in customer credential store */
    public var serviceConnectionId: ID?

    public init(id: ID, appId: ID, userId: ID, repoURL: String, externalUserId: String? = nil, installationId: String? = nil, repoId: String? = nil, repoProvider: RepoProvider? = nil, serviceConnectionId: ID? = nil) {
        self.id = id
        self.appId = appId
        self.userId = userId
        self.repoURL = repoURL
        self.externalUserId = externalUserId
        self.installationId = installationId
        self.repoId = repoId
        self.repoProvider = repoProvider
        self.serviceConnectionId = serviceConnectionId
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case appId = "app_id"
        case userId = "user_id"
        case repoURL = "repo_url"
        case externalUserId = "external_user_id"
        case installationId = "installation_id"
        case repoId = "repo_id"
        case repoProvider = "repo_provider"
        case serviceConnectionId = "service_connection_id"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        id = try container.decode(.id)
        appId = try container.decode(.appId)
        userId = try container.decode(.userId)
        repoURL = try container.decode(.repoURL)
        externalUserId = try container.decodeIfPresent(.externalUserId)
        installationId = try container.decodeIfPresent(.installationId)
        repoId = try container.decodeIfPresent(.repoId)
        repoProvider = try container.decodeIfPresent(.repoProvider)
        serviceConnectionId = try container.decodeIfPresent(.serviceConnectionId)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(id, forKey: .id)
        try container.encode(appId, forKey: .appId)
        try container.encode(userId, forKey: .userId)
        try container.encode(repoURL, forKey: .repoURL)
        try container.encodeIfPresent(externalUserId, forKey: .externalUserId)
        try container.encodeIfPresent(installationId, forKey: .installationId)
        try container.encodeIfPresent(repoId, forKey: .repoId)
        try container.encodeIfPresent(repoProvider, forKey: .repoProvider)
        try container.encodeIfPresent(serviceConnectionId, forKey: .serviceConnectionId)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? AppRepoResponse else { return false }
      guard self.id == object.id else { return false }
      guard self.appId == object.appId else { return false }
      guard self.userId == object.userId else { return false }
      guard self.repoURL == object.repoURL else { return false }
      guard self.externalUserId == object.externalUserId else { return false }
      guard self.installationId == object.installationId else { return false }
      guard self.repoId == object.repoId else { return false }
      guard self.repoProvider == object.repoProvider else { return false }
      guard self.serviceConnectionId == object.serviceConnectionId else { return false }
      return true
    }

    public static func == (lhs: AppRepoResponse, rhs: AppRepoResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
