//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EventCount: APIModel {

    public var count: [Count]?

    public var previousTotalCount: Int?

    public var totalCount: Int?

    public init(count: [Count]? = nil, previousTotalCount: Int? = nil, totalCount: Int? = nil) {
        self.count = count
        self.previousTotalCount = previousTotalCount
        self.totalCount = totalCount
    }

    private enum CodingKeys: String, CodingKey {
        case count
        case previousTotalCount = "previous_total_count"
        case totalCount = "total_count"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        count = try container.decodeArrayIfPresent(.count)
        previousTotalCount = try container.decodeIfPresent(.previousTotalCount)
        totalCount = try container.decodeIfPresent(.totalCount)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(count, forKey: .count)
        try container.encodeIfPresent(previousTotalCount, forKey: .previousTotalCount)
        try container.encodeIfPresent(totalCount, forKey: .totalCount)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EventCount else { return false }
      guard self.count == object.count else { return false }
      guard self.previousTotalCount == object.previousTotalCount else { return false }
      guard self.totalCount == object.totalCount else { return false }
      return true
    }

    public static func == (lhs: EventCount, rhs: EventCount) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
