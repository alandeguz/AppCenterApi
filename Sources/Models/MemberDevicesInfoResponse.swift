//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** The information for a single distribution group member and their ios device */
public class MemberDevicesInfoResponse: APIModel {

    /** The unique id (UUID) of the user */
    public var id: ID

    /** The email address of the user */
    public var email: String

    /** The Unique Device IDentifier of the device */
    public var udid: String

    /** The model identifier of the device, in the format iDeviceM,N */
    public var model: String

    /** The device description, in the format "iPhone 7 Plus (A1784)" */
    public var deviceName: String

    /** The last known OS version running on the device */
    public var osBuild: String

    /** The last known OS version running on the device */
    public var osVersion: String

    /** The provisioning status of the device. */
    public var status: String

    /** The avatar URL of the user */
    public var avatarURL: String?

    /** User is required to send an old password in order to change the password. */
    public var canChangePassword: Bool?

    /** The full name of the user. Might for example be first and last name */
    public var displayName: String?

    /** A combination of the device model name and the owner name. */
    public var fullDeviceName: String?

    /** The device's International Mobile Equipment Identity number. Always empty or undefined at present. */
    public var imei: String?

    /** Whether the has accepted the invite. Available when an invite is pending, and the value will be "true". */
    public var invitePending: Bool?

    /** The unique name that is used to identify the user. */
    public var name: String?

    /** The user ID of the device owner. */
    public var ownerId: String?

    /** Timestamp of when the device was registered in ISO format. */
    public var registeredAt: String?

    /** The device's serial number. Always empty or undefined at present. */
    public var serial: String?

    public init(id: ID, email: String, udid: String, model: String, deviceName: String, osBuild: String, osVersion: String, status: String, avatarURL: String? = nil, canChangePassword: Bool? = nil, displayName: String? = nil, fullDeviceName: String? = nil, imei: String? = nil, invitePending: Bool? = nil, name: String? = nil, ownerId: String? = nil, registeredAt: String? = nil, serial: String? = nil) {
        self.id = id
        self.email = email
        self.udid = udid
        self.model = model
        self.deviceName = deviceName
        self.osBuild = osBuild
        self.osVersion = osVersion
        self.status = status
        self.avatarURL = avatarURL
        self.canChangePassword = canChangePassword
        self.displayName = displayName
        self.fullDeviceName = fullDeviceName
        self.imei = imei
        self.invitePending = invitePending
        self.name = name
        self.ownerId = ownerId
        self.registeredAt = registeredAt
        self.serial = serial
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case email
        case udid
        case model
        case deviceName = "device_name"
        case osBuild = "os_build"
        case osVersion = "os_version"
        case status
        case avatarURL = "avatar_url"
        case canChangePassword = "can_change_password"
        case displayName = "display_name"
        case fullDeviceName = "full_device_name"
        case imei
        case invitePending = "invite_pending"
        case name
        case ownerId = "owner_id"
        case registeredAt = "registered_at"
        case serial
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        id = try container.decode(.id)
        email = try container.decode(.email)
        udid = try container.decode(.udid)
        model = try container.decode(.model)
        deviceName = try container.decode(.deviceName)
        osBuild = try container.decode(.osBuild)
        osVersion = try container.decode(.osVersion)
        status = try container.decode(.status)
        avatarURL = try container.decodeIfPresent(.avatarURL)
        canChangePassword = try container.decodeIfPresent(.canChangePassword)
        displayName = try container.decodeIfPresent(.displayName)
        fullDeviceName = try container.decodeIfPresent(.fullDeviceName)
        imei = try container.decodeIfPresent(.imei)
        invitePending = try container.decodeIfPresent(.invitePending)
        name = try container.decodeIfPresent(.name)
        ownerId = try container.decodeIfPresent(.ownerId)
        registeredAt = try container.decodeIfPresent(.registeredAt)
        serial = try container.decodeIfPresent(.serial)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(id, forKey: .id)
        try container.encode(email, forKey: .email)
        try container.encode(udid, forKey: .udid)
        try container.encode(model, forKey: .model)
        try container.encode(deviceName, forKey: .deviceName)
        try container.encode(osBuild, forKey: .osBuild)
        try container.encode(osVersion, forKey: .osVersion)
        try container.encode(status, forKey: .status)
        try container.encodeIfPresent(avatarURL, forKey: .avatarURL)
        try container.encodeIfPresent(canChangePassword, forKey: .canChangePassword)
        try container.encodeIfPresent(displayName, forKey: .displayName)
        try container.encodeIfPresent(fullDeviceName, forKey: .fullDeviceName)
        try container.encodeIfPresent(imei, forKey: .imei)
        try container.encodeIfPresent(invitePending, forKey: .invitePending)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(ownerId, forKey: .ownerId)
        try container.encodeIfPresent(registeredAt, forKey: .registeredAt)
        try container.encodeIfPresent(serial, forKey: .serial)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? MemberDevicesInfoResponse else { return false }
      guard self.id == object.id else { return false }
      guard self.email == object.email else { return false }
      guard self.udid == object.udid else { return false }
      guard self.model == object.model else { return false }
      guard self.deviceName == object.deviceName else { return false }
      guard self.osBuild == object.osBuild else { return false }
      guard self.osVersion == object.osVersion else { return false }
      guard self.status == object.status else { return false }
      guard self.avatarURL == object.avatarURL else { return false }
      guard self.canChangePassword == object.canChangePassword else { return false }
      guard self.displayName == object.displayName else { return false }
      guard self.fullDeviceName == object.fullDeviceName else { return false }
      guard self.imei == object.imei else { return false }
      guard self.invitePending == object.invitePending else { return false }
      guard self.name == object.name else { return false }
      guard self.ownerId == object.ownerId else { return false }
      guard self.registeredAt == object.registeredAt else { return false }
      guard self.serial == object.serial else { return false }
      return true
    }

    public static func == (lhs: MemberDevicesInfoResponse, rhs: MemberDevicesInfoResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
