//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class Events: APIModel {

    public var events: [Events]?

    /** The total count of events. */
    public var total: Int?

    /** The active device over this period. */
    public var totalDevices: Int?

    public init(events: [Events]? = nil, total: Int? = nil, totalDevices: Int? = nil) {
        self.events = events
        self.total = total
        self.totalDevices = totalDevices
    }

    private enum CodingKeys: String, CodingKey {
        case events
        case total
        case totalDevices = "total_devices"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        events = try container.decodeArrayIfPresent(.events)
        total = try container.decodeIfPresent(.total)
        totalDevices = try container.decodeIfPresent(.totalDevices)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(events, forKey: .events)
        try container.encodeIfPresent(total, forKey: .total)
        try container.encodeIfPresent(totalDevices, forKey: .totalDevices)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? Events else { return false }
      guard self.events == object.events else { return false }
      guard self.total == object.total else { return false }
      guard self.totalDevices == object.totalDevices else { return false }
      return true
    }

    public static func == (lhs: Events, rhs: Events) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
