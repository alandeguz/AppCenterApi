//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class OverviewResponse: APIModel {

    public enum DatabaseLocation: String, Codable {
        case eastAsia = "East Asia"
        case southeastAsia = "Southeast Asia"
        case australiaCentral = "Australia Central"
        case australiaCentral2 = "Australia Central 2"
        case australiaEast = "Australia East"
        case australiaSoutheast = "Australia Southeast"
        case brazilSouth = "Brazil South"
        case canadaCentral = "Canada Central"
        case canadaEast = "Canada East"
        case centralIndia = "Central India"
        case southIndia = "South India"
        case westIndia = "West India"
        case northEurope = "North Europe"
        case westEurope = "West Europe"
        case franceCentral = "France Central"
        case franceSouth = "France South"
        case germanyCentral = "Germany Central"
        case germanyNortheast = "Germany Northeast"
        case japanEast = "Japan East"
        case japanWest = "Japan West"
        case koreaCentral = "Korea Central"
        case koreaSouth = "Korea South"
        case southAfricaNorth = "South Africa North"
        case southAfricaWest = "South Africa West"
        case uKSouth = "UK South"
        case uKWest = "UK West"
        case centralUS = "Central US"
        case eastUS = "East US"
        case eastUS2 = "East US 2"
        case uSGovArizona = "US Gov Arizona"
        case uSGovTexas = "US Gov Texas"
        case northCentralUS = "North Central US"
        case southCentralUS = "South Central US"
        case westUS = "West US"
        case westUS2 = "West US 2"
        case westCentralUS = "West Central US"

        public static let cases: [DatabaseLocation] = [
          .eastAsia,
          .southeastAsia,
          .australiaCentral,
          .australiaCentral2,
          .australiaEast,
          .australiaSoutheast,
          .brazilSouth,
          .canadaCentral,
          .canadaEast,
          .centralIndia,
          .southIndia,
          .westIndia,
          .northEurope,
          .westEurope,
          .franceCentral,
          .franceSouth,
          .germanyCentral,
          .germanyNortheast,
          .japanEast,
          .japanWest,
          .koreaCentral,
          .koreaSouth,
          .southAfricaNorth,
          .southAfricaWest,
          .uKSouth,
          .uKWest,
          .centralUS,
          .eastUS,
          .eastUS2,
          .uSGovArizona,
          .uSGovTexas,
          .northCentralUS,
          .southCentralUS,
          .westUS,
          .westUS2,
          .westCentralUS,
        ]
    }

    public var accountName: String?

    public var databaseId: String?

    public var databaseLocation: DatabaseLocation?

    public var throughput: Int?

    public init(accountName: String? = nil, databaseId: String? = nil, databaseLocation: DatabaseLocation? = nil, throughput: Int? = nil) {
        self.accountName = accountName
        self.databaseId = databaseId
        self.databaseLocation = databaseLocation
        self.throughput = throughput
    }

    private enum CodingKeys: String, CodingKey {
        case accountName
        case databaseId
        case databaseLocation
        case throughput
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        accountName = try container.decodeIfPresent(.accountName)
        databaseId = try container.decodeIfPresent(.databaseId)
        databaseLocation = try container.decodeIfPresent(.databaseLocation)
        throughput = try container.decodeIfPresent(.throughput)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(accountName, forKey: .accountName)
        try container.encodeIfPresent(databaseId, forKey: .databaseId)
        try container.encodeIfPresent(databaseLocation, forKey: .databaseLocation)
        try container.encodeIfPresent(throughput, forKey: .throughput)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? OverviewResponse else { return false }
      guard self.accountName == object.accountName else { return false }
      guard self.databaseId == object.databaseId else { return false }
      guard self.databaseLocation == object.databaseLocation else { return false }
      guard self.throughput == object.throughput else { return false }
      return true
    }

    public static func == (lhs: OverviewResponse, rhs: OverviewResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
