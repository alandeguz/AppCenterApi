//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Audience test result. */
public class AudienceTestResult: APIModel {

    /** Custom properties used in the definition. */
    public enum CustomProperties: String, Codable {
        case string = "string"
        case number = "number"
        case boolean = "boolean"
        case dateTime = "date_time"

        public static let cases: [CustomProperties] = [
          .string,
          .number,
          .boolean,
          .dateTime,
        ]
    }

    /** Custom properties used in the definition. */
    public var customProperties: [String: CustomProperties]?

    /** Audience definition in OData format. */
    public var definition: String?

    /** Estimated audience size. */
    public var estimatedCount: Int?

    /** Estimated total audience size. */
    public var estimatedTotalCount: Int?

    public init(customProperties: [String: CustomProperties]? = nil, definition: String? = nil, estimatedCount: Int? = nil, estimatedTotalCount: Int? = nil) {
        self.customProperties = customProperties
        self.definition = definition
        self.estimatedCount = estimatedCount
        self.estimatedTotalCount = estimatedTotalCount
    }

    private enum CodingKeys: String, CodingKey {
        case customProperties = "custom_properties"
        case definition
        case estimatedCount = "estimated_count"
        case estimatedTotalCount = "estimated_total_count"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        customProperties = try container.decodeIfPresent(.customProperties)
        definition = try container.decodeIfPresent(.definition)
        estimatedCount = try container.decodeIfPresent(.estimatedCount)
        estimatedTotalCount = try container.decodeIfPresent(.estimatedTotalCount)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(customProperties, forKey: .customProperties)
        try container.encodeIfPresent(definition, forKey: .definition)
        try container.encodeIfPresent(estimatedCount, forKey: .estimatedCount)
        try container.encodeIfPresent(estimatedTotalCount, forKey: .estimatedTotalCount)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? AudienceTestResult else { return false }
      guard self.customProperties == object.customProperties else { return false }
      guard self.definition == object.definition else { return false }
      guard self.estimatedCount == object.estimatedCount else { return false }
      guard self.estimatedTotalCount == object.estimatedTotalCount else { return false }
      return true
    }

    public static func == (lhs: AudienceTestResult, rhs: AudienceTestResult) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
