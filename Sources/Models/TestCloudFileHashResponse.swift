//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Response message for single uploaded file hash */
public class TestCloudFileHashResponse: APIModel {

    /** Type of the file */
    public enum FileType: String, Codable {
        case dsymFile = "dsym-file"
        case appFile = "app-file"
        case testFile = "test-file"

        public static let cases: [FileType] = [
          .dsymFile,
          .appFile,
          .testFile,
        ]
    }

    /** Type of the file */
    public var fileType: FileType

    /** SHA256 hash of the file */
    public var checksum: String

    /** Status of the upload */
    public var uploadStatus: UploadStatus

    /** Relative path of the file */
    public var relativePath: String?

    /** Response message for single uploaded file hash */
    public class UploadStatus: APIModel {

        /** HTTP status code that represent result of upload */
        public var statusCode: Double

        /** URI that should be used to make POST request if file with given hash doesn't exist. This is set when status_code is equal to 412 */
        public var location: String?

        public init(statusCode: Double, location: String? = nil) {
            self.statusCode = statusCode
            self.location = location
        }

        private enum CodingKeys: String, CodingKey {
            case statusCode
            case location
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)

            statusCode = try container.decode(.statusCode)
            location = try container.decodeIfPresent(.location)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)

            try container.encode(statusCode, forKey: .statusCode)
            try container.encodeIfPresent(location, forKey: .location)
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? UploadStatus else { return false }
          guard self.statusCode == object.statusCode else { return false }
          guard self.location == object.location else { return false }
          return true
        }

        public static func == (lhs: UploadStatus, rhs: UploadStatus) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(fileType: FileType, checksum: String, uploadStatus: UploadStatus, relativePath: String? = nil) {
        self.fileType = fileType
        self.checksum = checksum
        self.uploadStatus = uploadStatus
        self.relativePath = relativePath
    }

    private enum CodingKeys: String, CodingKey {
        case fileType
        case checksum
        case uploadStatus
        case relativePath
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        fileType = try container.decode(.fileType)
        checksum = try container.decode(.checksum)
        uploadStatus = try container.decode(.uploadStatus)
        relativePath = try container.decodeIfPresent(.relativePath)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(fileType, forKey: .fileType)
        try container.encode(checksum, forKey: .checksum)
        try container.encode(uploadStatus, forKey: .uploadStatus)
        try container.encodeIfPresent(relativePath, forKey: .relativePath)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? TestCloudFileHashResponse else { return false }
      guard self.fileType == object.fileType else { return false }
      guard self.checksum == object.checksum else { return false }
      guard self.uploadStatus == object.uploadStatus else { return false }
      guard self.relativePath == object.relativePath else { return false }
      return true
    }

    public static func == (lhs: TestCloudFileHashResponse, rhs: TestCloudFileHashResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
