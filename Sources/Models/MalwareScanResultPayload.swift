//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Malware scan result from Malware Scan service */
public class MalwareScanResultPayload: APIModel {

    /** Scan result */
    public enum Result: String, Codable {
        case clean = "clean"
        case infected = "infected"
        case error = "error"

        public static let cases: [Result] = [
          .clean,
          .infected,
          .error,
        ]
    }

    /** Scan request identifier */
    public var requestId: ID

    /** Scan result */
    public var result: Result

    public init(requestId: ID, result: Result) {
        self.requestId = requestId
        self.result = result
    }

    private enum CodingKeys: String, CodingKey {
        case requestId
        case result
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        requestId = try container.decode(.requestId)
        result = try container.decode(.result)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(requestId, forKey: .requestId)
        try container.encode(result, forKey: .result)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? MalwareScanResultPayload else { return false }
      guard self.requestId == object.requestId else { return false }
      guard self.result == object.result else { return false }
      return true
    }

    public static func == (lhs: MalwareScanResultPayload, rhs: MalwareScanResultPayload) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
