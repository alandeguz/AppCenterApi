//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** VSTS bugtracker specific settings */
public class AlertingVstsBugtrackerSettings: APIModel {

    public var vstsProjectId: String

    public var vstsProjectUri: String

    public var vstsAccountName: String?

    public var vstsAreaPath: String?

    public var vstsDefaultPayload: [String: Any]?

    public var vstsProjectName: String?

    public init(vstsProjectId: String, vstsProjectUri: String, vstsAccountName: String? = nil, vstsAreaPath: String? = nil, vstsDefaultPayload: [String: Any]? = nil, vstsProjectName: String? = nil) {
        self.vstsProjectId = vstsProjectId
        self.vstsProjectUri = vstsProjectUri
        self.vstsAccountName = vstsAccountName
        self.vstsAreaPath = vstsAreaPath
        self.vstsDefaultPayload = vstsDefaultPayload
        self.vstsProjectName = vstsProjectName
    }

    private enum CodingKeys: String, CodingKey {
        case vstsProjectId = "vsts_project_id"
        case vstsProjectUri = "vsts_project_uri"
        case vstsAccountName = "vsts_account_name"
        case vstsAreaPath = "vsts_area_path"
        case vstsDefaultPayload = "vsts_default_payload"
        case vstsProjectName = "vsts_project_name"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        vstsProjectId = try container.decode(.vstsProjectId)
        vstsProjectUri = try container.decode(.vstsProjectUri)
        vstsAccountName = try container.decodeIfPresent(.vstsAccountName)
        vstsAreaPath = try container.decodeIfPresent(.vstsAreaPath)
        vstsDefaultPayload = try container.decodeAnyIfPresent(.vstsDefaultPayload)
        vstsProjectName = try container.decodeIfPresent(.vstsProjectName)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(vstsProjectId, forKey: .vstsProjectId)
        try container.encode(vstsProjectUri, forKey: .vstsProjectUri)
        try container.encodeIfPresent(vstsAccountName, forKey: .vstsAccountName)
        try container.encodeIfPresent(vstsAreaPath, forKey: .vstsAreaPath)
        try container.encodeAnyIfPresent(vstsDefaultPayload, forKey: .vstsDefaultPayload)
        try container.encodeIfPresent(vstsProjectName, forKey: .vstsProjectName)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? AlertingVstsBugtrackerSettings else { return false }
      guard self.vstsProjectId == object.vstsProjectId else { return false }
      guard self.vstsProjectUri == object.vstsProjectUri else { return false }
      guard self.vstsAccountName == object.vstsAccountName else { return false }
      guard self.vstsAreaPath == object.vstsAreaPath else { return false }
      guard NSDictionary(dictionary: self.vstsDefaultPayload ?? [:]).isEqual(to: object.vstsDefaultPayload ?? [:]) else { return false }
      guard self.vstsProjectName == object.vstsProjectName else { return false }
      return true
    }

    public static func == (lhs: AlertingVstsBugtrackerSettings, rhs: AlertingVstsBugtrackerSettings) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
