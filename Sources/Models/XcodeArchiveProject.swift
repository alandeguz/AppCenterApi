//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class XcodeArchiveProject: APIModel {

    /** The Id of the target to archive */
    public var archiveTargetId: String

    /** The project to archive container name */
    public var projectName: String

    /** Full path of the target project */
    public var projectPath: String?

    public init(archiveTargetId: String, projectName: String, projectPath: String? = nil) {
        self.archiveTargetId = archiveTargetId
        self.projectName = projectName
        self.projectPath = projectPath
    }

    private enum CodingKeys: String, CodingKey {
        case archiveTargetId
        case projectName
        case projectPath
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        archiveTargetId = try container.decode(.archiveTargetId)
        projectName = try container.decode(.projectName)
        projectPath = try container.decodeIfPresent(.projectPath)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(archiveTargetId, forKey: .archiveTargetId)
        try container.encode(projectName, forKey: .projectName)
        try container.encodeIfPresent(projectPath, forKey: .projectPath)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? XcodeArchiveProject else { return false }
      guard self.archiveTargetId == object.archiveTargetId else { return false }
      guard self.projectName == object.projectName else { return false }
      guard self.projectPath == object.projectPath else { return false }
      return true
    }

    public static func == (lhs: XcodeArchiveProject, rhs: XcodeArchiveProject) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
