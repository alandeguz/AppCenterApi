//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class OrgUserPermissionResponse: APIModel {

    /** The user role for the org */
    public enum UserRole: String, Codable {
        case admin = "admin"
        case collaborator = "collaborator"

        public static let cases: [UserRole] = [
          .admin,
          .collaborator,
        ]
    }

    /** The unique id (UUID) of the org */
    public var orgId: ID

    /** The user role for the org */
    public var userRole: UserRole

    public init(orgId: ID, userRole: UserRole) {
        self.orgId = orgId
        self.userRole = userRole
    }

    private enum CodingKeys: String, CodingKey {
        case orgId
        case userRole
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        orgId = try container.decode(.orgId)
        userRole = try container.decode(.userRole)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(orgId, forKey: .orgId)
        try container.encode(userRole, forKey: .userRole)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? OrgUserPermissionResponse else { return false }
      guard self.orgId == object.orgId else { return false }
      guard self.userRole == object.userRole else { return false }
      return true
    }

    public static func == (lhs: OrgUserPermissionResponse, rhs: OrgUserPermissionResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
