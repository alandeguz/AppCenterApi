//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Build configuration when React Native, or other JavaScript tech, is part of the build steps */
public class JavaScriptBranchConfigurationProperties: APIModel {

    /** Path to package.json file for the main project, e.g. "package.json" or "myapp/package.json" */
    public var packageJsonPath: String?

    /** Version of React Native from package.json files */
    public var reactNativeVersion: String?

    /** Whether to run Jest unit tests, via npm test, during the build */
    public var runTests: Bool?

    public init(packageJsonPath: String? = nil, reactNativeVersion: String? = nil, runTests: Bool? = nil) {
        self.packageJsonPath = packageJsonPath
        self.reactNativeVersion = reactNativeVersion
        self.runTests = runTests
    }

    private enum CodingKeys: String, CodingKey {
        case packageJsonPath
        case reactNativeVersion
        case runTests
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        packageJsonPath = try container.decodeIfPresent(.packageJsonPath)
        reactNativeVersion = try container.decodeIfPresent(.reactNativeVersion)
        runTests = try container.decodeIfPresent(.runTests)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(packageJsonPath, forKey: .packageJsonPath)
        try container.encodeIfPresent(reactNativeVersion, forKey: .reactNativeVersion)
        try container.encodeIfPresent(runTests, forKey: .runTests)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? JavaScriptBranchConfigurationProperties else { return false }
      guard self.packageJsonPath == object.packageJsonPath else { return false }
      guard self.reactNativeVersion == object.reactNativeVersion else { return false }
      guard self.runTests == object.runTests else { return false }
      return true
    }

    public static func == (lhs: JavaScriptBranchConfigurationProperties, rhs: JavaScriptBranchConfigurationProperties) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
