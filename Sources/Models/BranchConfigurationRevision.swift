//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** branch configuration revision */
public class BranchConfigurationRevision: APIModel {

    public var changeType: String?

    /** user who made a change in branch configuration */
    public var changedBy: ChangedBy?

    public var changedDate: String?

    public var definitionUrl: String?

    public var id: String?

    public var name: String?

    public var revision: Double?

    /** branch configuration revision */
    public class ChangedBy: APIModel {

        public var displayName: String?

        public var url: String?

        public init(displayName: String? = nil, url: String? = nil) {
            self.displayName = displayName
            self.url = url
        }

        private enum CodingKeys: String, CodingKey {
            case displayName
            case url
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)

            displayName = try container.decodeIfPresent(.displayName)
            url = try container.decodeIfPresent(.url)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)

            try container.encodeIfPresent(displayName, forKey: .displayName)
            try container.encodeIfPresent(url, forKey: .url)
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? ChangedBy else { return false }
          guard self.displayName == object.displayName else { return false }
          guard self.url == object.url else { return false }
          return true
        }

        public static func == (lhs: ChangedBy, rhs: ChangedBy) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(changeType: String? = nil, changedBy: ChangedBy? = nil, changedDate: String? = nil, definitionUrl: String? = nil, id: String? = nil, name: String? = nil, revision: Double? = nil) {
        self.changeType = changeType
        self.changedBy = changedBy
        self.changedDate = changedDate
        self.definitionUrl = definitionUrl
        self.id = id
        self.name = name
        self.revision = revision
    }

    private enum CodingKeys: String, CodingKey {
        case changeType
        case changedBy
        case changedDate
        case definitionUrl
        case id
        case name
        case revision
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        changeType = try container.decodeIfPresent(.changeType)
        changedBy = try container.decodeIfPresent(.changedBy)
        changedDate = try container.decodeIfPresent(.changedDate)
        definitionUrl = try container.decodeIfPresent(.definitionUrl)
        id = try container.decodeIfPresent(.id)
        name = try container.decodeIfPresent(.name)
        revision = try container.decodeIfPresent(.revision)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(changeType, forKey: .changeType)
        try container.encodeIfPresent(changedBy, forKey: .changedBy)
        try container.encodeIfPresent(changedDate, forKey: .changedDate)
        try container.encodeIfPresent(definitionUrl, forKey: .definitionUrl)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(revision, forKey: .revision)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? BranchConfigurationRevision else { return false }
      guard self.changeType == object.changeType else { return false }
      guard self.changedBy == object.changedBy else { return false }
      guard self.changedDate == object.changedDate else { return false }
      guard self.definitionUrl == object.definitionUrl else { return false }
      guard self.id == object.id else { return false }
      guard self.name == object.name else { return false }
      guard self.revision == object.revision else { return false }
      return true
    }

    public static func == (lhs: BranchConfigurationRevision, rhs: BranchConfigurationRevision) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
