//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class DeviceSetConfiguration: APIModel {

    /** The unique id of the device configuration */
    public var id: ID?

    public var image: Image?

    public var model: Model?

    public var os: String?

    public var osName: String?

    public class Image: APIModel {

        public var thumb: String?

        public init(thumb: String? = nil) {
            self.thumb = thumb
        }

        private enum CodingKeys: String, CodingKey {
            case thumb
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)

            thumb = try container.decodeIfPresent(.thumb)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)

            try container.encodeIfPresent(thumb, forKey: .thumb)
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? Image else { return false }
          guard self.thumb == object.thumb else { return false }
          return true
        }

        public static func == (lhs: Image, rhs: Image) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public class Model: APIModel {

        public var formFactor: String?

        public var manufacturer: String?

        public var name: String?

        public var releaseDate: String?

        public init(formFactor: String? = nil, manufacturer: String? = nil, name: String? = nil, releaseDate: String? = nil) {
            self.formFactor = formFactor
            self.manufacturer = manufacturer
            self.name = name
            self.releaseDate = releaseDate
        }

        private enum CodingKeys: String, CodingKey {
            case formFactor
            case manufacturer
            case name
            case releaseDate
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)

            formFactor = try container.decodeIfPresent(.formFactor)
            manufacturer = try container.decodeIfPresent(.manufacturer)
            name = try container.decodeIfPresent(.name)
            releaseDate = try container.decodeIfPresent(.releaseDate)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)

            try container.encodeIfPresent(formFactor, forKey: .formFactor)
            try container.encodeIfPresent(manufacturer, forKey: .manufacturer)
            try container.encodeIfPresent(name, forKey: .name)
            try container.encodeIfPresent(releaseDate, forKey: .releaseDate)
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? Model else { return false }
          guard self.formFactor == object.formFactor else { return false }
          guard self.manufacturer == object.manufacturer else { return false }
          guard self.name == object.name else { return false }
          guard self.releaseDate == object.releaseDate else { return false }
          return true
        }

        public static func == (lhs: Model, rhs: Model) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(id: ID? = nil, image: Image? = nil, model: Model? = nil, os: String? = nil, osName: String? = nil) {
        self.id = id
        self.image = image
        self.model = model
        self.os = os
        self.osName = osName
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case image
        case model
        case os
        case osName
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        id = try container.decodeIfPresent(.id)
        image = try container.decodeIfPresent(.image)
        model = try container.decodeIfPresent(.model)
        os = try container.decodeIfPresent(.os)
        osName = try container.decodeIfPresent(.osName)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(image, forKey: .image)
        try container.encodeIfPresent(model, forKey: .model)
        try container.encodeIfPresent(os, forKey: .os)
        try container.encodeIfPresent(osName, forKey: .osName)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? DeviceSetConfiguration else { return false }
      guard self.id == object.id else { return false }
      guard self.image == object.image else { return false }
      guard self.model == object.model else { return false }
      guard self.os == object.os else { return false }
      guard self.osName == object.osName else { return false }
      return true
    }

    public static func == (lhs: DeviceSetConfiguration, rhs: DeviceSetConfiguration) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
