//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class AppInvitationDetailResponse: APIModel {

    /** The invitation type */
    public enum InviteType: String, Codable {
        case developer = "developer"
        case tester = "tester"

        public static let cases: [InviteType] = [
          .developer,
          .tester,
        ]
    }

    /** The permissions the user has for the app */
    public enum Permissions: String, Codable {
        case manager = "manager"
        case developer = "developer"
        case viewer = "viewer"
        case tester = "tester"

        public static let cases: [Permissions] = [
          .manager,
          .developer,
          .viewer,
          .tester,
        ]
    }

    /** The unique ID (UUID) of the invitation */
    public var id: ID

    /** The email address of the invited user */
    public var email: String

    /** Indicates whether the invited user already exists */
    public var isExistingUser: Bool

    public var invitedBy: InvitedBy

    /** The invitation type */
    public var inviteType: InviteType

    public var app: UNKNOWN_ALL_OFF

    /** The number of apps in the group */
    public var appCount: Double?

    /** The organization that owns the distribution group, if it exists */
    public var distributionGroup: DistributionGroup?

    /** The permissions the user has for the app */
    public var permissions: [Permissions]?

    public class InvitedBy: APIModel {

        /** The creation origin of this user */
        public enum Origin: String, Codable {
            case appcenter = "appcenter"
            case hockeyapp = "hockeyapp"
            case codepush = "codepush"

            public static let cases: [Origin] = [
              .appcenter,
              .hockeyapp,
              .codepush,
            ]
        }

        /** The permissions the user has for the app */
        public enum Permissions: String, Codable {
            case manager = "manager"
            case developer = "developer"
            case viewer = "viewer"
            case tester = "tester"

            public static let cases: [Permissions] = [
              .manager,
              .developer,
              .viewer,
              .tester,
            ]
        }

        /** The unique id (UUID) of the user */
        public var id: ID

        /** The full name of the user. Might for example be first and last name */
        public var displayName: String

        /** The email address of the user */
        public var email: String

        /** The unique name that is used to identify the user. */
        public var name: String

        /** The creation origin of this user */
        public var origin: Origin

        /** The avatar URL of the user */
        public var avatarURL: String?

        /** User is required to send an old password in order to change the password. */
        public var canChangePassword: Bool?

        /** The permissions the user has for the app */
        public var permissions: [Permissions]?

        public init(id: ID, displayName: String, email: String, name: String, origin: Origin, avatarURL: String? = nil, canChangePassword: Bool? = nil, permissions: [Permissions]? = nil) {
            self.id = id
            self.displayName = displayName
            self.email = email
            self.name = name
            self.origin = origin
            self.avatarURL = avatarURL
            self.canChangePassword = canChangePassword
            self.permissions = permissions
        }

        private enum CodingKeys: String, CodingKey {
            case id
            case displayName = "display_name"
            case email
            case name
            case origin
            case avatarURL = "avatar_url"
            case canChangePassword = "can_change_password"
            case permissions
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)

            id = try container.decode(.id)
            displayName = try container.decode(.displayName)
            email = try container.decode(.email)
            name = try container.decode(.name)
            origin = try container.decode(.origin)
            avatarURL = try container.decodeIfPresent(.avatarURL)
            canChangePassword = try container.decodeIfPresent(.canChangePassword)
            permissions = try container.decodeArrayIfPresent(.permissions)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)

            try container.encode(id, forKey: .id)
            try container.encode(displayName, forKey: .displayName)
            try container.encode(email, forKey: .email)
            try container.encode(name, forKey: .name)
            try container.encode(origin, forKey: .origin)
            try container.encodeIfPresent(avatarURL, forKey: .avatarURL)
            try container.encodeIfPresent(canChangePassword, forKey: .canChangePassword)
            try container.encodeIfPresent(permissions, forKey: .permissions)
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? InvitedBy else { return false }
          guard self.id == object.id else { return false }
          guard self.displayName == object.displayName else { return false }
          guard self.email == object.email else { return false }
          guard self.name == object.name else { return false }
          guard self.origin == object.origin else { return false }
          guard self.avatarURL == object.avatarURL else { return false }
          guard self.canChangePassword == object.canChangePassword else { return false }
          guard self.permissions == object.permissions else { return false }
          return true
        }

        public static func == (lhs: InvitedBy, rhs: InvitedBy) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public class DistributionGroup: APIModel {

        /** The information about the app's owner */
        public var owner: Owner?

        public class Owner: APIModel {

            /** The owner type. Can either be 'org' or 'user' */
            public enum `Type`: String, Codable {
                case org = "org"
                case user = "user"

                public static let cases: [`Type`] = [
                  .org,
                  .user,
                ]
            }

            /** The unique id (UUID) of the owner */
            public var id: ID

            /** The owner's display name */
            public var displayName: String

            /** The unique name that used to identify the owner */
            public var name: String

            /** The owner type. Can either be 'org' or 'user' */
            public var type: `Type`

            /** The avatar URL of the owner */
            public var avatarURL: String?

            /** The owner's email address */
            public var email: String?

            public init(id: ID, displayName: String, name: String, type: `Type`, avatarURL: String? = nil, email: String? = nil) {
                self.id = id
                self.displayName = displayName
                self.name = name
                self.type = type
                self.avatarURL = avatarURL
                self.email = email
            }

            private enum CodingKeys: String, CodingKey {
                case id
                case displayName = "display_name"
                case name
                case type
                case avatarURL = "avatar_url"
                case email
            }

            public required init(from decoder: Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)

                id = try container.decode(.id)
                displayName = try container.decode(.displayName)
                name = try container.decode(.name)
                type = try container.decode(.type)
                avatarURL = try container.decodeIfPresent(.avatarURL)
                email = try container.decodeIfPresent(.email)
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.container(keyedBy: CodingKeys.self)

                try container.encode(id, forKey: .id)
                try container.encode(displayName, forKey: .displayName)
                try container.encode(name, forKey: .name)
                try container.encode(type, forKey: .type)
                try container.encodeIfPresent(avatarURL, forKey: .avatarURL)
                try container.encodeIfPresent(email, forKey: .email)
            }

            public func isEqual(to object: Any?) -> Bool {
              guard let object = object as? Owner else { return false }
              guard self.id == object.id else { return false }
              guard self.displayName == object.displayName else { return false }
              guard self.name == object.name else { return false }
              guard self.type == object.type else { return false }
              guard self.avatarURL == object.avatarURL else { return false }
              guard self.email == object.email else { return false }
              return true
            }

            public static func == (lhs: Owner, rhs: Owner) -> Bool {
                return lhs.isEqual(to: rhs)
            }
        }

        public init(owner: Owner? = nil) {
            self.owner = owner
        }

        private enum CodingKeys: String, CodingKey {
            case owner
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)

            owner = try container.decodeIfPresent(.owner)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)

            try container.encodeIfPresent(owner, forKey: .owner)
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? DistributionGroup else { return false }
          guard self.owner == object.owner else { return false }
          return true
        }

        public static func == (lhs: DistributionGroup, rhs: DistributionGroup) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(id: ID, email: String, isExistingUser: Bool, invitedBy: InvitedBy, inviteType: InviteType, app: UNKNOWN_ALL_OFF, appCount: Double? = nil, distributionGroup: DistributionGroup? = nil, permissions: [Permissions]? = nil) {
        self.id = id
        self.email = email
        self.isExistingUser = isExistingUser
        self.invitedBy = invitedBy
        self.inviteType = inviteType
        self.app = app
        self.appCount = appCount
        self.distributionGroup = distributionGroup
        self.permissions = permissions
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case email
        case isExistingUser = "is_existing_user"
        case invitedBy = "invited_by"
        case inviteType = "invite_type"
        case app
        case appCount = "app_count"
        case distributionGroup = "distribution_group"
        case permissions
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        id = try container.decode(.id)
        email = try container.decode(.email)
        isExistingUser = try container.decode(.isExistingUser)
        invitedBy = try container.decode(.invitedBy)
        inviteType = try container.decode(.inviteType)
        app = try container.decode(.app)
        appCount = try container.decodeIfPresent(.appCount)
        distributionGroup = try container.decodeIfPresent(.distributionGroup)
        permissions = try container.decodeArrayIfPresent(.permissions)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(id, forKey: .id)
        try container.encode(email, forKey: .email)
        try container.encode(isExistingUser, forKey: .isExistingUser)
        try container.encode(invitedBy, forKey: .invitedBy)
        try container.encode(inviteType, forKey: .inviteType)
        try container.encode(app, forKey: .app)
        try container.encodeIfPresent(appCount, forKey: .appCount)
        try container.encodeIfPresent(distributionGroup, forKey: .distributionGroup)
        try container.encodeIfPresent(permissions, forKey: .permissions)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? AppInvitationDetailResponse else { return false }
      guard self.id == object.id else { return false }
      guard self.email == object.email else { return false }
      guard self.isExistingUser == object.isExistingUser else { return false }
      guard self.invitedBy == object.invitedBy else { return false }
      guard self.inviteType == object.inviteType else { return false }
      guard self.app == object.app else { return false }
      guard self.appCount == object.appCount else { return false }
      guard self.distributionGroup == object.distributionGroup else { return false }
      guard self.permissions == object.permissions else { return false }
      return true
    }

    public static func == (lhs: AppInvitationDetailResponse, rhs: AppInvitationDetailResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
