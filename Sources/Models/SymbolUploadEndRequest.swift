//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** A request containing information pertaining to completing a symbol upload process */
public class SymbolUploadEndRequest: APIModel {

    /** The desired operation for the symbol upload */
    public enum Status: String, Codable {
        case committed = "committed"
        case aborted = "aborted"

        public static let cases: [Status] = [
          .committed,
          .aborted,
        ]
    }

    /** The desired operation for the symbol upload */
    public var status: Status

    public init(status: Status) {
        self.status = status
    }

    private enum CodingKeys: String, CodingKey {
        case status
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        status = try container.decode(.status)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(status, forKey: .status)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? SymbolUploadEndRequest else { return false }
      guard self.status == object.status else { return false }
      return true
    }

    public static func == (lhs: SymbolUploadEndRequest, rhs: SymbolUploadEndRequest) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
