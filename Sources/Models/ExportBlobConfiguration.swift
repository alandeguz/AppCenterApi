//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Configuration for export to Blob Storage with blob format */
public class ExportBlobConfiguration: APIModel {

    /** The path to the blob when enum set to 'WithoutAppId' is 'year/month/day/hour/minute' and when set to 'WithAppId' is 'appId/year/month/day/hour/minute' */
    public enum BlobPathFormatKind: String, Codable {
        case withoutAppId = "WithoutAppId"
        case withAppId = "WithAppId"

        public static let cases: [BlobPathFormatKind] = [
          .withoutAppId,
          .withAppId,
        ]
    }

    /** The path to the blob when enum set to 'WithoutAppId' is 'year/month/day/hour/minute' and when set to 'WithAppId' is 'appId/year/month/day/hour/minute' */
    public var blobPathFormatKind: BlobPathFormatKind?

    public init(blobPathFormatKind: BlobPathFormatKind? = nil) {
        self.blobPathFormatKind = blobPathFormatKind
    }

    private enum CodingKeys: String, CodingKey {
        case blobPathFormatKind = "blob_path_format_kind"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        blobPathFormatKind = try container.decodeIfPresent(.blobPathFormatKind)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(blobPathFormatKind, forKey: .blobPathFormatKind)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? ExportBlobConfiguration else { return false }
      guard self.blobPathFormatKind == object.blobPathFormatKind else { return false }
      return true
    }

    public static func == (lhs: ExportBlobConfiguration, rhs: ExportBlobConfiguration) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
