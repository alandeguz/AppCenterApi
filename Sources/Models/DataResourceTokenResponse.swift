//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class DataResourceTokenResponse: APIModel {

    public var accountName: String?

    public var collectionName: String?

    public var databaseId: String?

    public var databaseName: String?

    public var expiresOn: DateTime?

    public var isReadOnlyToken: Bool?

    public var token: String?

    public init(accountName: String? = nil, collectionName: String? = nil, databaseId: String? = nil, databaseName: String? = nil, expiresOn: DateTime? = nil, isReadOnlyToken: Bool? = nil, token: String? = nil) {
        self.accountName = accountName
        self.collectionName = collectionName
        self.databaseId = databaseId
        self.databaseName = databaseName
        self.expiresOn = expiresOn
        self.isReadOnlyToken = isReadOnlyToken
        self.token = token
    }

    private enum CodingKeys: String, CodingKey {
        case accountName
        case collectionName
        case databaseId
        case databaseName
        case expiresOn
        case isReadOnlyToken
        case token
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        accountName = try container.decodeIfPresent(.accountName)
        collectionName = try container.decodeIfPresent(.collectionName)
        databaseId = try container.decodeIfPresent(.databaseId)
        databaseName = try container.decodeIfPresent(.databaseName)
        expiresOn = try container.decodeIfPresent(.expiresOn)
        isReadOnlyToken = try container.decodeIfPresent(.isReadOnlyToken)
        token = try container.decodeIfPresent(.token)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(accountName, forKey: .accountName)
        try container.encodeIfPresent(collectionName, forKey: .collectionName)
        try container.encodeIfPresent(databaseId, forKey: .databaseId)
        try container.encodeIfPresent(databaseName, forKey: .databaseName)
        try container.encodeIfPresent(expiresOn, forKey: .expiresOn)
        try container.encodeIfPresent(isReadOnlyToken, forKey: .isReadOnlyToken)
        try container.encodeIfPresent(token, forKey: .token)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? DataResourceTokenResponse else { return false }
      guard self.accountName == object.accountName else { return false }
      guard self.collectionName == object.collectionName else { return false }
      guard self.databaseId == object.databaseId else { return false }
      guard self.databaseName == object.databaseName else { return false }
      guard self.expiresOn == object.expiresOn else { return false }
      guard self.isReadOnlyToken == object.isReadOnlyToken else { return false }
      guard self.token == object.token else { return false }
      return true
    }

    public static func == (lhs: DataResourceTokenResponse, rhs: DataResourceTokenResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
