//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class CrashAttachment: APIModel {

    public var appId: String

    public var attachmentId: String

    public var crashId: String

    public var blobLocation: String

    public var contentType: String

    public var fileName: String

    public var createdTime: DateTime

    public var size: Double

    public init(appId: String, attachmentId: String, crashId: String, blobLocation: String, contentType: String, fileName: String, createdTime: DateTime, size: Double) {
        self.appId = appId
        self.attachmentId = attachmentId
        self.crashId = crashId
        self.blobLocation = blobLocation
        self.contentType = contentType
        self.fileName = fileName
        self.createdTime = createdTime
        self.size = size
    }

    private enum CodingKeys: String, CodingKey {
        case appId = "app_id"
        case attachmentId = "attachment_id"
        case crashId = "crash_id"
        case blobLocation = "blob_location"
        case contentType = "content_type"
        case fileName = "file_name"
        case createdTime = "created_time"
        case size
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        appId = try container.decode(.appId)
        attachmentId = try container.decode(.attachmentId)
        crashId = try container.decode(.crashId)
        blobLocation = try container.decode(.blobLocation)
        contentType = try container.decode(.contentType)
        fileName = try container.decode(.fileName)
        createdTime = try container.decode(.createdTime)
        size = try container.decode(.size)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(appId, forKey: .appId)
        try container.encode(attachmentId, forKey: .attachmentId)
        try container.encode(crashId, forKey: .crashId)
        try container.encode(blobLocation, forKey: .blobLocation)
        try container.encode(contentType, forKey: .contentType)
        try container.encode(fileName, forKey: .fileName)
        try container.encode(createdTime, forKey: .createdTime)
        try container.encode(size, forKey: .size)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? CrashAttachment else { return false }
      guard self.appId == object.appId else { return false }
      guard self.attachmentId == object.attachmentId else { return false }
      guard self.crashId == object.crashId else { return false }
      guard self.blobLocation == object.blobLocation else { return false }
      guard self.contentType == object.contentType else { return false }
      guard self.fileName == object.fileName else { return false }
      guard self.createdTime == object.createdTime else { return false }
      guard self.size == object.size else { return false }
      return true
    }

    public static func == (lhs: CrashAttachment, rhs: CrashAttachment) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
