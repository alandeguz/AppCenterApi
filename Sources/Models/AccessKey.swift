//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class AccessKey: APIModel {

    /** Account name of creator. */
    public var createdBy: String?

    /** Created time of access key */
    public var createdTime: Double?

    /** Description of access key */
    public var description: String?

    /** Time of expiry of access key */
    public var expires: Double?

    /** Friendly name of access key */
    public var friendlyName: String?

    /** Id of accessKey */
    public var id: String?

    /** Legacy property which indicate if accessKey was created from session */
    public var isSession: Bool?

    /** Key of access key */
    public var name: String?

    public init(createdBy: String? = nil, createdTime: Double? = nil, description: String? = nil, expires: Double? = nil, friendlyName: String? = nil, id: String? = nil, isSession: Bool? = nil, name: String? = nil) {
        self.createdBy = createdBy
        self.createdTime = createdTime
        self.description = description
        self.expires = expires
        self.friendlyName = friendlyName
        self.id = id
        self.isSession = isSession
        self.name = name
    }

    private enum CodingKeys: String, CodingKey {
        case createdBy
        case createdTime
        case description
        case expires
        case friendlyName
        case id
        case isSession
        case name
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        createdBy = try container.decodeIfPresent(.createdBy)
        createdTime = try container.decodeIfPresent(.createdTime)
        description = try container.decodeIfPresent(.description)
        expires = try container.decodeIfPresent(.expires)
        friendlyName = try container.decodeIfPresent(.friendlyName)
        id = try container.decodeIfPresent(.id)
        isSession = try container.decodeIfPresent(.isSession)
        name = try container.decodeIfPresent(.name)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(createdBy, forKey: .createdBy)
        try container.encodeIfPresent(createdTime, forKey: .createdTime)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(expires, forKey: .expires)
        try container.encodeIfPresent(friendlyName, forKey: .friendlyName)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(isSession, forKey: .isSession)
        try container.encodeIfPresent(name, forKey: .name)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? AccessKey else { return false }
      guard self.createdBy == object.createdBy else { return false }
      guard self.createdTime == object.createdTime else { return false }
      guard self.description == object.description else { return false }
      guard self.expires == object.expires else { return false }
      guard self.friendlyName == object.friendlyName else { return false }
      guard self.id == object.id else { return false }
      guard self.isSession == object.isSession else { return false }
      guard self.name == object.name else { return false }
      return true
    }

    public static func == (lhs: AccessKey, rhs: AccessKey) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
