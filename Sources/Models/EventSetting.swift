//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Event Setting */
public class EventSetting: APIModel {

    /** Event Name */
    public enum EventType: String, Codable {
        case crashNewCrashGroupCreated = "crash_newCrashGroupCreated"

        public static let cases: [EventType] = [
          .crashNewCrashGroupCreated,
        ]
    }

    /** Frequency of event */
    public enum Value: String, Codable {
        case disabled = "Disabled"
        case individual = "Individual"
        case daily = "Daily"
        case dailyAndIndividual = "DailyAndIndividual"
        case `default` = "Default"

        public static let cases: [Value] = [
          .disabled,
          .individual,
          .daily,
          .dailyAndIndividual,
          .`default`,
        ]
    }

    /** Default frequency of event */
    public enum DefaultValue: String, Codable {
        case disabled = "Disabled"
        case individual = "Individual"
        case daily = "Daily"
        case dailyAndIndividual = "DailyAndIndividual"

        public static let cases: [DefaultValue] = [
          .disabled,
          .individual,
          .daily,
          .dailyAndIndividual,
        ]
    }

    /** Event Name */
    public var eventType: EventType

    /** Frequency of event */
    public var value: Value

    /** Default frequency of event */
    public var defaultValue: DefaultValue?

    public init(eventType: EventType, value: Value, defaultValue: DefaultValue? = nil) {
        self.eventType = eventType
        self.value = value
        self.defaultValue = defaultValue
    }

    private enum CodingKeys: String, CodingKey {
        case eventType = "event_type"
        case value
        case defaultValue = "default_value"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        eventType = try container.decode(.eventType)
        value = try container.decode(.value)
        defaultValue = try container.decodeIfPresent(.defaultValue)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(eventType, forKey: .eventType)
        try container.encode(value, forKey: .value)
        try container.encodeIfPresent(defaultValue, forKey: .defaultValue)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EventSetting else { return false }
      guard self.eventType == object.eventType else { return false }
      guard self.value == object.value else { return false }
      guard self.defaultValue == object.defaultValue else { return false }
      return true
    }

    public static func == (lhs: EventSetting, rhs: EventSetting) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
