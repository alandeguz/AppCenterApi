//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class DistributionGroupUserGetResponse: APIModel {

    /** The email address of the user */
    public var email: String

    /** The avatar URL of the user */
    public var avatarURL: String?

    /** User is required to send an old password in order to change the password. */
    public var canChangePassword: Bool?

    /** The full name of the user. Might for example be first and last name */
    public var displayName: String?

    /** The unique id (UUID) of the user */
    public var id: ID?

    /** Whether the has accepted the invite. Available when an invite is pending, and the value will be "true". */
    public var invitePending: Bool?

    /** The unique name that is used to identify the user. */
    public var name: String?

    public init(email: String, avatarURL: String? = nil, canChangePassword: Bool? = nil, displayName: String? = nil, id: ID? = nil, invitePending: Bool? = nil, name: String? = nil) {
        self.email = email
        self.avatarURL = avatarURL
        self.canChangePassword = canChangePassword
        self.displayName = displayName
        self.id = id
        self.invitePending = invitePending
        self.name = name
    }

    private enum CodingKeys: String, CodingKey {
        case email
        case avatarURL = "avatar_url"
        case canChangePassword = "can_change_password"
        case displayName = "display_name"
        case id
        case invitePending = "invite_pending"
        case name
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        email = try container.decode(.email)
        avatarURL = try container.decodeIfPresent(.avatarURL)
        canChangePassword = try container.decodeIfPresent(.canChangePassword)
        displayName = try container.decodeIfPresent(.displayName)
        id = try container.decodeIfPresent(.id)
        invitePending = try container.decodeIfPresent(.invitePending)
        name = try container.decodeIfPresent(.name)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(email, forKey: .email)
        try container.encodeIfPresent(avatarURL, forKey: .avatarURL)
        try container.encodeIfPresent(canChangePassword, forKey: .canChangePassword)
        try container.encodeIfPresent(displayName, forKey: .displayName)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(invitePending, forKey: .invitePending)
        try container.encodeIfPresent(name, forKey: .name)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? DistributionGroupUserGetResponse else { return false }
      guard self.email == object.email else { return false }
      guard self.avatarURL == object.avatarURL else { return false }
      guard self.canChangePassword == object.canChangePassword else { return false }
      guard self.displayName == object.displayName else { return false }
      guard self.id == object.id else { return false }
      guard self.invitePending == object.invitePending else { return false }
      guard self.name == object.name else { return false }
      return true
    }

    public static func == (lhs: DistributionGroupUserGetResponse, rhs: DistributionGroupUserGetResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
