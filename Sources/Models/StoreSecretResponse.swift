//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** StoreSecretResponse */
public class StoreSecretResponse: APIModel {

    /** Store id */
    public var id: String?

    /** Store Name */
    public var name: String?

    /** Secret Json */
    public var secret: String?

    /** Tenant Id for Intune */
    public var tenantId: String?

    /** Store Type */
    public var type: String?

    public init(id: String? = nil, name: String? = nil, secret: String? = nil, tenantId: String? = nil, type: String? = nil) {
        self.id = id
        self.name = name
        self.secret = secret
        self.tenantId = tenantId
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case name
        case secret
        case tenantId = "tenant_id"
        case type
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        id = try container.decodeIfPresent(.id)
        name = try container.decodeIfPresent(.name)
        secret = try container.decodeIfPresent(.secret)
        tenantId = try container.decodeIfPresent(.tenantId)
        type = try container.decodeIfPresent(.type)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(secret, forKey: .secret)
        try container.encodeIfPresent(tenantId, forKey: .tenantId)
        try container.encodeIfPresent(type, forKey: .type)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? StoreSecretResponse else { return false }
      guard self.id == object.id else { return false }
      guard self.name == object.name else { return false }
      guard self.secret == object.secret else { return false }
      guard self.tenantId == object.tenantId else { return false }
      guard self.type == object.type else { return false }
      return true
    }

    public static func == (lhs: StoreSecretResponse, rhs: StoreSecretResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
