//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** The lite version of GitHub pull request */
public class GitHubPullRequestLite: APIModel {

    /** The lite version of GitHub branch */
    public var base: Base?

    /** The lite version of GitHub branch */
    public var head: Head?

    /** The lite version of GitHub pull request */
    public class Base: APIModel {

        /** The repository name */
        public var ref: String?

        /** The lite version of GitHub repository */
        public var repo: Repo?

        /** The discription of repository */
        public var sha: String?

        /** The lite version of GitHub pull request */
        public class Repo: APIModel {

            /** The repository id */
            public var id: Double?

            public init(id: Double? = nil) {
                self.id = id
            }

            private enum CodingKeys: String, CodingKey {
                case id
            }

            public required init(from decoder: Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)

                id = try container.decodeIfPresent(.id)
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.container(keyedBy: CodingKeys.self)

                try container.encodeIfPresent(id, forKey: .id)
            }

            public func isEqual(to object: Any?) -> Bool {
              guard let object = object as? Repo else { return false }
              guard self.id == object.id else { return false }
              return true
            }

            public static func == (lhs: Repo, rhs: Repo) -> Bool {
                return lhs.isEqual(to: rhs)
            }
        }

        public init(ref: String? = nil, repo: Repo? = nil, sha: String? = nil) {
            self.ref = ref
            self.repo = repo
            self.sha = sha
        }

        private enum CodingKeys: String, CodingKey {
            case ref
            case repo
            case sha
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)

            ref = try container.decodeIfPresent(.ref)
            repo = try container.decodeIfPresent(.repo)
            sha = try container.decodeIfPresent(.sha)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)

            try container.encodeIfPresent(ref, forKey: .ref)
            try container.encodeIfPresent(repo, forKey: .repo)
            try container.encodeIfPresent(sha, forKey: .sha)
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? Base else { return false }
          guard self.ref == object.ref else { return false }
          guard self.repo == object.repo else { return false }
          guard self.sha == object.sha else { return false }
          return true
        }

        public static func == (lhs: Base, rhs: Base) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    /** The lite version of GitHub pull request */
    public class Head: APIModel {

        /** The repository name */
        public var ref: String?

        /** The lite version of GitHub repository */
        public var repo: Repo?

        /** The discription of repository */
        public var sha: String?

        /** The lite version of GitHub pull request */
        public class Repo: APIModel {

            /** The repository id */
            public var id: Double?

            public init(id: Double? = nil) {
                self.id = id
            }

            private enum CodingKeys: String, CodingKey {
                case id
            }

            public required init(from decoder: Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)

                id = try container.decodeIfPresent(.id)
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.container(keyedBy: CodingKeys.self)

                try container.encodeIfPresent(id, forKey: .id)
            }

            public func isEqual(to object: Any?) -> Bool {
              guard let object = object as? Repo else { return false }
              guard self.id == object.id else { return false }
              return true
            }

            public static func == (lhs: Repo, rhs: Repo) -> Bool {
                return lhs.isEqual(to: rhs)
            }
        }

        public init(ref: String? = nil, repo: Repo? = nil, sha: String? = nil) {
            self.ref = ref
            self.repo = repo
            self.sha = sha
        }

        private enum CodingKeys: String, CodingKey {
            case ref
            case repo
            case sha
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)

            ref = try container.decodeIfPresent(.ref)
            repo = try container.decodeIfPresent(.repo)
            sha = try container.decodeIfPresent(.sha)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)

            try container.encodeIfPresent(ref, forKey: .ref)
            try container.encodeIfPresent(repo, forKey: .repo)
            try container.encodeIfPresent(sha, forKey: .sha)
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? Head else { return false }
          guard self.ref == object.ref else { return false }
          guard self.repo == object.repo else { return false }
          guard self.sha == object.sha else { return false }
          return true
        }

        public static func == (lhs: Head, rhs: Head) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(base: Base? = nil, head: Head? = nil) {
        self.base = base
        self.head = head
    }

    private enum CodingKeys: String, CodingKey {
        case base
        case head
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        base = try container.decodeIfPresent(.base)
        head = try container.decodeIfPresent(.head)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(base, forKey: .base)
        try container.encodeIfPresent(head, forKey: .head)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? GitHubPullRequestLite else { return false }
      guard self.base == object.base else { return false }
      guard self.head == object.head else { return false }
      return true
    }

    public static func == (lhs: GitHubPullRequestLite, rhs: GitHubPullRequestLite) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
