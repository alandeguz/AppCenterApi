//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class ReleaseDailySessions: APIModel {

    public var avgSessionsPerDay: Double?

    /** Sessions per day. */
    public var sessions: [Sessions]?

    public var totalSessionCounts: Int?

    public init(avgSessionsPerDay: Double? = nil, sessions: [Sessions]? = nil, totalSessionCounts: Int? = nil) {
        self.avgSessionsPerDay = avgSessionsPerDay
        self.sessions = sessions
        self.totalSessionCounts = totalSessionCounts
    }

    private enum CodingKeys: String, CodingKey {
        case avgSessionsPerDay
        case sessions
        case totalSessionCounts
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        avgSessionsPerDay = try container.decodeIfPresent(.avgSessionsPerDay)
        sessions = try container.decodeArrayIfPresent(.sessions)
        totalSessionCounts = try container.decodeIfPresent(.totalSessionCounts)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(avgSessionsPerDay, forKey: .avgSessionsPerDay)
        try container.encodeIfPresent(sessions, forKey: .sessions)
        try container.encodeIfPresent(totalSessionCounts, forKey: .totalSessionCounts)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? ReleaseDailySessions else { return false }
      guard self.avgSessionsPerDay == object.avgSessionsPerDay else { return false }
      guard self.sessions == object.sessions else { return false }
      guard self.totalSessionCounts == object.totalSessionCounts else { return false }
      return true
    }

    public static func == (lhs: ReleaseDailySessions, rhs: ReleaseDailySessions) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
