//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** grouped by missing symbols crashes response object */
public class V2MissingSymbolCrashGroupsResponse: APIModel {

    /** total number of crashes for all the groups */
    public var totalCrashCount: Int

    /** list of crash groups formed by missing symbols combination */
    public var groups: [Groups]

    public init(totalCrashCount: Int, groups: [Groups]) {
        self.totalCrashCount = totalCrashCount
        self.groups = groups
    }

    private enum CodingKeys: String, CodingKey {
        case totalCrashCount = "total_crash_count"
        case groups
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        totalCrashCount = try container.decode(.totalCrashCount)
        groups = try container.decodeArray(.groups)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(totalCrashCount, forKey: .totalCrashCount)
        try container.encode(groups, forKey: .groups)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? V2MissingSymbolCrashGroupsResponse else { return false }
      guard self.totalCrashCount == object.totalCrashCount else { return false }
      guard self.groups == object.groups else { return false }
      return true
    }

    public static func == (lhs: V2MissingSymbolCrashGroupsResponse, rhs: V2MissingSymbolCrashGroupsResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
