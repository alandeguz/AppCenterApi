//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** This response contains an estimated price-per-RU denominated in a given currency. */
public class EstimatedPricingResponse: APIModel {

    /** This response contains an estimated price-per-RU denominated in a given currency. */
    public enum Currency: String, Codable {
        case usd = "USD"
        case eur = "EUR"
        case gbp = "GBP"
        case aud = "AUD"
        case inr = "INR"
        case cad = "CAD"
        case ars = "ARS"
        case brl = "BRL"
        case dkk = "DKK"
        case hkd = "HKD"
        case idr = "IDR"
        case jpy = "JPY"
        case krw = "KRW"
        case myr = "MYR"
        case mxn = "MXN"
        case nzd = "NZD"
        case nok = "NOK"
        case rub = "RUB"
        case sar = "SAR"
        case zar = "ZAR"
        case sek = "SEK"
        case chf = "CHF"
        case twd = "TWD"
        case try = "TRY"

        public static let cases: [Currency] = [
          .usd,
          .eur,
          .gbp,
          .aud,
          .inr,
          .cad,
          .ars,
          .brl,
          .dkk,
          .hkd,
          .idr,
          .jpy,
          .krw,
          .myr,
          .mxn,
          .nzd,
          .nok,
          .rub,
          .sar,
          .zar,
          .sek,
          .chf,
          .twd,
          .try,
        ]
    }

    public var currency: Currency?

    public var pricePerHour: Double?

    public init(currency: Currency? = nil, pricePerHour: Double? = nil) {
        self.currency = currency
        self.pricePerHour = pricePerHour
    }

    private enum CodingKeys: String, CodingKey {
        case currency
        case pricePerHour
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        currency = try container.decodeIfPresent(.currency)
        pricePerHour = try container.decodeIfPresent(.pricePerHour)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(currency, forKey: .currency)
        try container.encodeIfPresent(pricePerHour, forKey: .pricePerHour)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EstimatedPricingResponse else { return false }
      guard self.currency == object.currency else { return false }
      guard self.pricePerHour == object.pricePerHour else { return false }
      return true
    }

    public static func == (lhs: EstimatedPricingResponse, rhs: EstimatedPricingResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
