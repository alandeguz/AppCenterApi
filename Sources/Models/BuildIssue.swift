//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class BuildIssue: APIModel {

    public var category: String?

    public var message: String?

    public var type: String?

    public init(category: String? = nil, message: String? = nil, type: String? = nil) {
        self.category = category
        self.message = message
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case category
        case message
        case type
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        category = try container.decodeIfPresent(.category)
        message = try container.decodeIfPresent(.message)
        type = try container.decodeIfPresent(.type)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(category, forKey: .category)
        try container.encodeIfPresent(message, forKey: .message)
        try container.encodeIfPresent(type, forKey: .type)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? BuildIssue else { return false }
      guard self.category == object.category else { return false }
      guard self.message == object.message else { return false }
      guard self.type == object.type else { return false }
      return true
    }

    public static func == (lhs: BuildIssue, rhs: BuildIssue) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
