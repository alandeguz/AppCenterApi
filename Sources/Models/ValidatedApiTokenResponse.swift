//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class ValidatedApiTokenResponse: APIModel {

    /** The token's scope. A list of allowed roles. */
    public enum TokenScope: String, Codable {
        case all = "all"
        case inAppUpdate = "in_app_update"
        case viewer = "viewer"

        public static let cases: [TokenScope] = [
          .all,
          .inAppUpdate,
          .viewer,
        ]
    }

    /** Indicates the type of the principal (app or user) */
    public enum PrincipalType: String, Codable {
        case app = "app"
        case user = "user"

        public static let cases: [PrincipalType] = [
          .app,
          .user,
        ]
    }

    /** The token's unique id (UUID) */
    public var tokenId: ID

    /** The token's scope. A list of allowed roles. */
    public var tokenScope: [TokenScope]

    /** The ID of the owner of the API Token (user_id or app_id) */
    public var principalId: ID

    /** Indicates the type of the principal (app or user) */
    public var principalType: PrincipalType

    /** Collection of attributes that describe the principal of the specified API Token */
    public var claims: [Claims]

    public init(tokenId: ID, tokenScope: [TokenScope], principalId: ID, principalType: PrincipalType, claims: [Claims]) {
        self.tokenId = tokenId
        self.tokenScope = tokenScope
        self.principalId = principalId
        self.principalType = principalType
        self.claims = claims
    }

    private enum CodingKeys: String, CodingKey {
        case tokenId = "token_id"
        case tokenScope = "token_scope"
        case principalId = "principal_id"
        case principalType = "principal_type"
        case claims
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        tokenId = try container.decode(.tokenId)
        tokenScope = try container.decodeArray(.tokenScope)
        principalId = try container.decode(.principalId)
        principalType = try container.decode(.principalType)
        claims = try container.decodeArray(.claims)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(tokenId, forKey: .tokenId)
        try container.encode(tokenScope, forKey: .tokenScope)
        try container.encode(principalId, forKey: .principalId)
        try container.encode(principalType, forKey: .principalType)
        try container.encode(claims, forKey: .claims)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? ValidatedApiTokenResponse else { return false }
      guard self.tokenId == object.tokenId else { return false }
      guard self.tokenScope == object.tokenScope else { return false }
      guard self.principalId == object.principalId else { return false }
      guard self.principalType == object.principalType else { return false }
      guard self.claims == object.claims else { return false }
      return true
    }

    public static func == (lhs: ValidatedApiTokenResponse, rhs: ValidatedApiTokenResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
