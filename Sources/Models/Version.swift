//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class Version: APIModel {

    /** Version count. */
    public var count: Int?

    /** The count of previous time range of the version. */
    public var previousCount: Int?

    /** Version. */
    public var version: String?

    public init(count: Int? = nil, previousCount: Int? = nil, version: String? = nil) {
        self.count = count
        self.previousCount = previousCount
        self.version = version
    }

    private enum CodingKeys: String, CodingKey {
        case count
        case previousCount = "previous_count"
        case version
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        count = try container.decodeIfPresent(.count)
        previousCount = try container.decodeIfPresent(.previousCount)
        version = try container.decodeIfPresent(.version)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(count, forKey: .count)
        try container.encodeIfPresent(previousCount, forKey: .previousCount)
        try container.encodeIfPresent(version, forKey: .version)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? Version else { return false }
      guard self.count == object.count else { return false }
      guard self.previousCount == object.previousCount else { return false }
      guard self.version == object.version else { return false }
      return true
    }

    public static func == (lhs: Version, rhs: Version) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
