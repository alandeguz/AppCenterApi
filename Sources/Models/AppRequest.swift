//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class AppRequest: APIModel {

    /** The OS the app will be running on */
    public enum Os: String, Codable {
        case android = "Android"
        case iOS = "iOS"
        case macOS = "macOS"
        case tizen = "Tizen"
        case tvOS = "tvOS"
        case windows = "Windows"
        case linux = "Linux"
        case custom = "Custom"

        public static let cases: [Os] = [
          .android,
          .iOS,
          .macOS,
          .tizen,
          .tvOS,
          .windows,
          .linux,
          .custom,
        ]
    }

    /** The platform of the app */
    public enum Platform: String, Codable {
        case java = "Java"
        case objectiveCSwift = "Objective-C-Swift"
        case uwp = "UWP"
        case cordova = "Cordova"
        case reactNative = "React-Native"
        case xamarin = "Xamarin"
        case unity = "Unity"
        case electron = "Electron"
        case wpf = "WPF"
        case winForms = "WinForms"
        case custom = "Custom"

        public static let cases: [Platform] = [
          .java,
          .objectiveCSwift,
          .uwp,
          .cordova,
          .reactNative,
          .xamarin,
          .unity,
          .electron,
          .wpf,
          .winForms,
          .custom,
        ]
    }

    /** The descriptive name of the app. This can contain any characters */
    public var displayName: String

    /** The OS the app will be running on */
    public var os: Os

    /** The platform of the app */
    public var platform: Platform

    /** A short text describing the app */
    public var description: String?

    /** The name of the app used in URLs */
    public var name: String?

    /** A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase */
    public var releaseType: String?

    public init(displayName: String, os: Os, platform: Platform, description: String? = nil, name: String? = nil, releaseType: String? = nil) {
        self.displayName = displayName
        self.os = os
        self.platform = platform
        self.description = description
        self.name = name
        self.releaseType = releaseType
    }

    private enum CodingKeys: String, CodingKey {
        case displayName = "display_name"
        case os
        case platform
        case description
        case name
        case releaseType = "release_type"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        displayName = try container.decode(.displayName)
        os = try container.decode(.os)
        platform = try container.decode(.platform)
        description = try container.decodeIfPresent(.description)
        name = try container.decodeIfPresent(.name)
        releaseType = try container.decodeIfPresent(.releaseType)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(displayName, forKey: .displayName)
        try container.encode(os, forKey: .os)
        try container.encode(platform, forKey: .platform)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(releaseType, forKey: .releaseType)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? AppRequest else { return false }
      guard self.displayName == object.displayName else { return false }
      guard self.os == object.os else { return false }
      guard self.platform == object.platform else { return false }
      guard self.description == object.description else { return false }
      guard self.name == object.name else { return false }
      guard self.releaseType == object.releaseType else { return false }
      return true
    }

    public static func == (lhs: AppRequest, rhs: AppRequest) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
