//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class ApiTokenGetUserResponse: APIModel {

    /** The token's scope. A list of allowed roles. */
    public enum TokenScope: String, Codable {
        case all = "all"
        case inAppUpdate = "in_app_update"
        case viewer = "viewer"

        public static let cases: [TokenScope] = [
          .all,
          .inAppUpdate,
          .viewer,
        ]
    }

    /** The creation origin of the user who created this api token */
    public enum UserOrigin: String, Codable {
        case appcenter = "appcenter"
        case hockeyapp = "hockeyapp"
        case codepush = "codepush"

        public static let cases: [UserOrigin] = [
          .appcenter,
          .hockeyapp,
          .codepush,
        ]
    }

    /** The token's unique id (UUID) */
    public var tokenId: ID

    /** The token's scope. A list of allowed roles. */
    public var tokenScope: [TokenScope]

    /** The unique id (UUID) of the user */
    public var userId: ID

    /** The user email */
    public var userEmail: String

    /** The creation origin of the user who created this api token */
    public var userOrigin: UserOrigin

    public init(tokenId: ID, tokenScope: [TokenScope], userId: ID, userEmail: String, userOrigin: UserOrigin) {
        self.tokenId = tokenId
        self.tokenScope = tokenScope
        self.userId = userId
        self.userEmail = userEmail
        self.userOrigin = userOrigin
    }

    private enum CodingKeys: String, CodingKey {
        case tokenId = "token_id"
        case tokenScope = "token_scope"
        case userId = "user_id"
        case userEmail = "user_email"
        case userOrigin = "user_origin"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        tokenId = try container.decode(.tokenId)
        tokenScope = try container.decodeArray(.tokenScope)
        userId = try container.decode(.userId)
        userEmail = try container.decode(.userEmail)
        userOrigin = try container.decode(.userOrigin)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(tokenId, forKey: .tokenId)
        try container.encode(tokenScope, forKey: .tokenScope)
        try container.encode(userId, forKey: .userId)
        try container.encode(userEmail, forKey: .userEmail)
        try container.encode(userOrigin, forKey: .userOrigin)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? ApiTokenGetUserResponse else { return false }
      guard self.tokenId == object.tokenId else { return false }
      guard self.tokenScope == object.tokenScope else { return false }
      guard self.userId == object.userId else { return false }
      guard self.userEmail == object.userEmail else { return false }
      guard self.userOrigin == object.userOrigin else { return false }
      return true
    }

    public static func == (lhs: ApiTokenGetUserResponse, rhs: ApiTokenGetUserResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
