//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class BuildServiceStatus: APIModel {

    public var message: String?

    public var os: String?

    public var service: String?

    public var status: String?

    public var url: String?

    public var validUntil: Int?

    public init(message: String? = nil, os: String? = nil, service: String? = nil, status: String? = nil, url: String? = nil, validUntil: Int? = nil) {
        self.message = message
        self.os = os
        self.service = service
        self.status = status
        self.url = url
        self.validUntil = validUntil
    }

    private enum CodingKeys: String, CodingKey {
        case message
        case os
        case service
        case status
        case url
        case validUntil = "valid_until"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        message = try container.decodeIfPresent(.message)
        os = try container.decodeIfPresent(.os)
        service = try container.decodeIfPresent(.service)
        status = try container.decodeIfPresent(.status)
        url = try container.decodeIfPresent(.url)
        validUntil = try container.decodeIfPresent(.validUntil)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(message, forKey: .message)
        try container.encodeIfPresent(os, forKey: .os)
        try container.encodeIfPresent(service, forKey: .service)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(url, forKey: .url)
        try container.encodeIfPresent(validUntil, forKey: .validUntil)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? BuildServiceStatus else { return false }
      guard self.message == object.message else { return false }
      guard self.os == object.os else { return false }
      guard self.service == object.service else { return false }
      guard self.status == object.status else { return false }
      guard self.url == object.url else { return false }
      guard self.validUntil == object.validUntil else { return false }
      return true
    }

    public static func == (lhs: BuildServiceStatus, rhs: BuildServiceStatus) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
