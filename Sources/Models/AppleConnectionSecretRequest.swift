//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Apple connection secrets */
public class AppleConnectionSecretRequest: APIModel {

    /** service type of shared connection can be apple|gitlab|googleplay|jira|applecertificate */
    public enum ServiceType: String, Codable {
        case apple = "apple"
        case jira = "jira"
        case googleplay = "googleplay"
        case gitlab = "gitlab"

        public static let cases: [ServiceType] = [
          .apple,
          .jira,
          .googleplay,
          .gitlab,
        ]
    }

    /** credential type of the shared connection. Values can be credentials|certificate */
    public enum CredentialType: String, Codable {
        case credentials = "credentials"
        case certificate = "certificate"

        public static let cases: [CredentialType] = [
          .credentials,
          .certificate,
        ]
    }

    /** service type of shared connection can be apple|gitlab|googleplay|jira|applecertificate */
    public var serviceType: ServiceType

    /** credential type of the shared connection. Values can be credentials|certificate */
    public var credentialType: CredentialType?

    /** display name of shared connection */
    public var displayName: String?

    public init(serviceType: ServiceType, credentialType: CredentialType? = nil, displayName: String? = nil) {
        self.serviceType = serviceType
        self.credentialType = credentialType
        self.displayName = displayName
    }

    private enum CodingKeys: String, CodingKey {
        case serviceType
        case credentialType
        case displayName
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        serviceType = try container.decode(.serviceType)
        credentialType = try container.decodeIfPresent(.credentialType)
        displayName = try container.decodeIfPresent(.displayName)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(serviceType, forKey: .serviceType)
        try container.encodeIfPresent(credentialType, forKey: .credentialType)
        try container.encodeIfPresent(displayName, forKey: .displayName)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? AppleConnectionSecretRequest else { return false }
      guard self.serviceType == object.serviceType else { return false }
      guard self.credentialType == object.credentialType else { return false }
      guard self.displayName == object.displayName else { return false }
      return true
    }

    public static func == (lhs: AppleConnectionSecretRequest, rhs: AppleConnectionSecretRequest) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
