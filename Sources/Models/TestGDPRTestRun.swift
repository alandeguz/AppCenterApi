//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class TestGDPRTestRun: APIModel {

    public var appHashFileId: ID?

    public var appHashFileURL: String?

    public var appIconURL: String?

    public var dsymHashFileId: ID?

    public var dsymHashFileURL: String?

    public var id: ID?

    public var locale: String?

    public init(appHashFileId: ID? = nil, appHashFileURL: String? = nil, appIconURL: String? = nil, dsymHashFileId: ID? = nil, dsymHashFileURL: String? = nil, id: ID? = nil, locale: String? = nil) {
        self.appHashFileId = appHashFileId
        self.appHashFileURL = appHashFileURL
        self.appIconURL = appIconURL
        self.dsymHashFileId = dsymHashFileId
        self.dsymHashFileURL = dsymHashFileURL
        self.id = id
        self.locale = locale
    }

    private enum CodingKeys: String, CodingKey {
        case appHashFileId = "app_hash_file_id"
        case appHashFileURL = "app_hash_file_url"
        case appIconURL = "app_icon_url"
        case dsymHashFileId = "dsym_hash_file_id"
        case dsymHashFileURL = "dsym_hash_file_url"
        case id
        case locale
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        appHashFileId = try container.decodeIfPresent(.appHashFileId)
        appHashFileURL = try container.decodeIfPresent(.appHashFileURL)
        appIconURL = try container.decodeIfPresent(.appIconURL)
        dsymHashFileId = try container.decodeIfPresent(.dsymHashFileId)
        dsymHashFileURL = try container.decodeIfPresent(.dsymHashFileURL)
        id = try container.decodeIfPresent(.id)
        locale = try container.decodeIfPresent(.locale)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(appHashFileId, forKey: .appHashFileId)
        try container.encodeIfPresent(appHashFileURL, forKey: .appHashFileURL)
        try container.encodeIfPresent(appIconURL, forKey: .appIconURL)
        try container.encodeIfPresent(dsymHashFileId, forKey: .dsymHashFileId)
        try container.encodeIfPresent(dsymHashFileURL, forKey: .dsymHashFileURL)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(locale, forKey: .locale)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? TestGDPRTestRun else { return false }
      guard self.appHashFileId == object.appHashFileId else { return false }
      guard self.appHashFileURL == object.appHashFileURL else { return false }
      guard self.appIconURL == object.appIconURL else { return false }
      guard self.dsymHashFileId == object.dsymHashFileId else { return false }
      guard self.dsymHashFileURL == object.dsymHashFileURL else { return false }
      guard self.id == object.id else { return false }
      guard self.locale == object.locale else { return false }
      return true
    }

    public static func == (lhs: TestGDPRTestRun, rhs: TestGDPRTestRun) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
