//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Envelope for messages sent to actors */
public class MessageEnvelope: APIModel {

    /** Body of the message */
    public var message: [String: Any]?

    /** Unique id of the message */
    public var messageId: String?

    /** Type of the message */
    public var messageType: String?

    public init(message: [String: Any]? = nil, messageId: String? = nil, messageType: String? = nil) {
        self.message = message
        self.messageId = messageId
        self.messageType = messageType
    }

    private enum CodingKeys: String, CodingKey {
        case message
        case messageId
        case messageType
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        message = try container.decodeAnyIfPresent(.message)
        messageId = try container.decodeIfPresent(.messageId)
        messageType = try container.decodeIfPresent(.messageType)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeAnyIfPresent(message, forKey: .message)
        try container.encodeIfPresent(messageId, forKey: .messageId)
        try container.encodeIfPresent(messageType, forKey: .messageType)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? MessageEnvelope else { return false }
      guard NSDictionary(dictionary: self.message ?? [:]).isEqual(to: object.message ?? [:]) else { return false }
      guard self.messageId == object.messageId else { return false }
      guard self.messageType == object.messageType else { return false }
      return true
    }

    public static func == (lhs: MessageEnvelope, rhs: MessageEnvelope) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
