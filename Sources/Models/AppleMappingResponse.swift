//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Apple Mapping Request Type */
public class AppleMappingResponse: APIModel {

    /** ID of the apple application in Mobile Center */
    public var appId: String?

    /** ID of the apple application in apple store */
    public var appleId: String?

    /** Id for the shared service connection. In case of Apple AppStore, this connection will be used to create and connect to the Apple AppStore in Mobile Center. */
    public var serviceConnectionId: String?

    /** ID of the Team associated with the app in apple store */
    public var teamIdentifier: String?

    public init(appId: String? = nil, appleId: String? = nil, serviceConnectionId: String? = nil, teamIdentifier: String? = nil) {
        self.appId = appId
        self.appleId = appleId
        self.serviceConnectionId = serviceConnectionId
        self.teamIdentifier = teamIdentifier
    }

    private enum CodingKeys: String, CodingKey {
        case appId = "app_id"
        case appleId = "apple_id"
        case serviceConnectionId = "service_connection_id"
        case teamIdentifier = "team_identifier"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        appId = try container.decodeIfPresent(.appId)
        appleId = try container.decodeIfPresent(.appleId)
        serviceConnectionId = try container.decodeIfPresent(.serviceConnectionId)
        teamIdentifier = try container.decodeIfPresent(.teamIdentifier)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(appId, forKey: .appId)
        try container.encodeIfPresent(appleId, forKey: .appleId)
        try container.encodeIfPresent(serviceConnectionId, forKey: .serviceConnectionId)
        try container.encodeIfPresent(teamIdentifier, forKey: .teamIdentifier)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? AppleMappingResponse else { return false }
      guard self.appId == object.appId else { return false }
      guard self.appleId == object.appleId else { return false }
      guard self.serviceConnectionId == object.serviceConnectionId else { return false }
      guard self.teamIdentifier == object.teamIdentifier else { return false }
      return true
    }

    public static func == (lhs: AppleMappingResponse, rhs: AppleMappingResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
