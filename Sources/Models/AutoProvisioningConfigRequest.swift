//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** A request containing information for creating a Auto Provisioning Config. */
public class AutoProvisioningConfigRequest: APIModel {

    /** When *true* enables auto provisioning */
    public var allowAutoProvisioning: Bool?

    /** A key to a secret in customer-credential-store. apple_developer_account refers to the user's developer account that is used to log into https://developer.apple.com. Normally the user's email. */
    public var appleDeveloperAccountKey: String?

    /** A key to a secret in customer-credential-store. distribution_certificate refers to the customer's certificate (that holds the private key) that will be used to sign the app. */
    public var appleDistributionCertificateKey: String?

    public init(allowAutoProvisioning: Bool? = nil, appleDeveloperAccountKey: String? = nil, appleDistributionCertificateKey: String? = nil) {
        self.allowAutoProvisioning = allowAutoProvisioning
        self.appleDeveloperAccountKey = appleDeveloperAccountKey
        self.appleDistributionCertificateKey = appleDistributionCertificateKey
    }

    private enum CodingKeys: String, CodingKey {
        case allowAutoProvisioning = "allow_auto_provisioning"
        case appleDeveloperAccountKey = "apple_developer_account_key"
        case appleDistributionCertificateKey = "apple_distribution_certificate_key"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        allowAutoProvisioning = try container.decodeIfPresent(.allowAutoProvisioning)
        appleDeveloperAccountKey = try container.decodeIfPresent(.appleDeveloperAccountKey)
        appleDistributionCertificateKey = try container.decodeIfPresent(.appleDistributionCertificateKey)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(allowAutoProvisioning, forKey: .allowAutoProvisioning)
        try container.encodeIfPresent(appleDeveloperAccountKey, forKey: .appleDeveloperAccountKey)
        try container.encodeIfPresent(appleDistributionCertificateKey, forKey: .appleDistributionCertificateKey)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? AutoProvisioningConfigRequest else { return false }
      guard self.allowAutoProvisioning == object.allowAutoProvisioning else { return false }
      guard self.appleDeveloperAccountKey == object.appleDeveloperAccountKey else { return false }
      guard self.appleDistributionCertificateKey == object.appleDistributionCertificateKey else { return false }
      return true
    }

    public static func == (lhs: AutoProvisioningConfigRequest, rhs: AutoProvisioningConfigRequest) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
