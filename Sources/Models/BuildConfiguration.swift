//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class BuildConfiguration: APIModel {

    /** Name of build configuration (the same as a build type name) */
    public var name: String

    /** Android signing config. Null if not specified */
    public var signingConfig: SigningConfig?

    public class SigningConfig: APIModel {

        /** Indicates if storeFile is specified in the signing configuration */
        public var hasStoreFile: Bool?

        public init(hasStoreFile: Bool? = nil) {
            self.hasStoreFile = hasStoreFile
        }

        private enum CodingKeys: String, CodingKey {
            case hasStoreFile
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)

            hasStoreFile = try container.decodeIfPresent(.hasStoreFile)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)

            try container.encodeIfPresent(hasStoreFile, forKey: .hasStoreFile)
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? SigningConfig else { return false }
          guard self.hasStoreFile == object.hasStoreFile else { return false }
          return true
        }

        public static func == (lhs: SigningConfig, rhs: SigningConfig) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(name: String, signingConfig: SigningConfig? = nil) {
        self.name = name
        self.signingConfig = signingConfig
    }

    private enum CodingKeys: String, CodingKey {
        case name
        case signingConfig
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        name = try container.decode(.name)
        signingConfig = try container.decodeIfPresent(.signingConfig)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(signingConfig, forKey: .signingConfig)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? BuildConfiguration else { return false }
      guard self.name == object.name else { return false }
      guard self.signingConfig == object.signingConfig else { return false }
      return true
    }

    public static func == (lhs: BuildConfiguration, rhs: BuildConfiguration) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
