//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class AndroidProject: APIModel {

    /** Android Gradle modules */
    public var androidModules: [AndroidModules]

    /** The path of the Gradle wrapper */
    public var gradleWrapperPath: String?

    public init(androidModules: [AndroidModules], gradleWrapperPath: String? = nil) {
        self.androidModules = androidModules
        self.gradleWrapperPath = gradleWrapperPath
    }

    private enum CodingKeys: String, CodingKey {
        case androidModules
        case gradleWrapperPath
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        androidModules = try container.decodeArray(.androidModules)
        gradleWrapperPath = try container.decodeIfPresent(.gradleWrapperPath)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(androidModules, forKey: .androidModules)
        try container.encodeIfPresent(gradleWrapperPath, forKey: .gradleWrapperPath)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? AndroidProject else { return false }
      guard self.androidModules == object.androidModules else { return false }
      guard self.gradleWrapperPath == object.gradleWrapperPath else { return false }
      return true
    }

    public static func == (lhs: AndroidProject, rhs: AndroidProject) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
