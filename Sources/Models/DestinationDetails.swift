//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Destination details for distributing build releases */
public class DestinationDetails: APIModel {

    /** Destination details for distributing build releases */
    public enum `Type`: String, Codable {
        case store = "store"
        case group = "group"
        case tester = "tester"

        public static let cases: [`Type`] = [
          .store,
          .group,
          .tester,
        ]
    }

    public var id: String

    public var type: `Type`

    public init(id: String, type: `Type`) {
        self.id = id
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case type
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        id = try container.decode(.id)
        type = try container.decode(.type)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(id, forKey: .id)
        try container.encode(type, forKey: .type)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? DestinationDetails else { return false }
      guard self.id == object.id else { return false }
      guard self.type == object.type else { return false }
      return true
    }

    public static func == (lhs: DestinationDetails, rhs: DestinationDetails) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
