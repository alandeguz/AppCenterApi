//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** App Center account details from GitHub billing */
public class GitHubBillingAccount: APIModel {

    /** The owner type. Can either be 'org' or 'user' */
    public enum `Type`: String, Codable {
        case org = "org"
        case user = "user"

        public static let cases: [`Type`] = [
          .org,
          .user,
        ]
    }

    /** The unique id (UUID) of the account */
    public var id: String

    /** The account's display name */
    public var displayName: String

    /** The unique name that used to identify the owner */
    public var name: String

    /** The owner type. Can either be 'org' or 'user' */
    public var type: `Type`

    public init(id: String, displayName: String, name: String, type: `Type`) {
        self.id = id
        self.displayName = displayName
        self.name = name
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case displayName = "display_name"
        case name
        case type
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        id = try container.decode(.id)
        displayName = try container.decode(.displayName)
        name = try container.decode(.name)
        type = try container.decode(.type)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(id, forKey: .id)
        try container.encode(displayName, forKey: .displayName)
        try container.encode(name, forKey: .name)
        try container.encode(type, forKey: .type)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? GitHubBillingAccount else { return false }
      guard self.id == object.id else { return false }
      guard self.displayName == object.displayName else { return false }
      guard self.name == object.name else { return false }
      guard self.type == object.type else { return false }
      return true
    }

    public static func == (lhs: GitHubBillingAccount, rhs: GitHubBillingAccount) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
