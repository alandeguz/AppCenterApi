//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Repostiory object */
public class AlertBugTrackerRepo: APIModel {

    public var name: String

    public var url: String

    public var id: String

    public var description: String?

    /** Repository owner object */
    public var owner: Owner?

    public var `private`: Bool?

    /** Repostiory object */
    public class Owner: APIModel {

        public var id: String?

        public var login: String?

        public var name: String?

        public init(id: String? = nil, login: String? = nil, name: String? = nil) {
            self.id = id
            self.login = login
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case id
            case login
            case name
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)

            id = try container.decodeIfPresent(.id)
            login = try container.decodeIfPresent(.login)
            name = try container.decodeIfPresent(.name)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)

            try container.encodeIfPresent(id, forKey: .id)
            try container.encodeIfPresent(login, forKey: .login)
            try container.encodeIfPresent(name, forKey: .name)
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? Owner else { return false }
          guard self.id == object.id else { return false }
          guard self.login == object.login else { return false }
          guard self.name == object.name else { return false }
          return true
        }

        public static func == (lhs: Owner, rhs: Owner) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(name: String, url: String, id: String, description: String? = nil, owner: Owner? = nil, `private`: Bool? = nil) {
        self.name = name
        self.url = url
        self.id = id
        self.description = description
        self.owner = owner
        self.`private` = `private`
    }

    private enum CodingKeys: String, CodingKey {
        case name
        case url
        case id
        case description
        case owner
        case `private` = "private"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        name = try container.decode(.name)
        url = try container.decode(.url)
        id = try container.decode(.id)
        description = try container.decodeIfPresent(.description)
        owner = try container.decodeIfPresent(.owner)
        `private` = try container.decodeIfPresent(.`private`)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(name, forKey: .name)
        try container.encode(url, forKey: .url)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(owner, forKey: .owner)
        try container.encodeIfPresent(`private`, forKey: .`private`)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? AlertBugTrackerRepo else { return false }
      guard self.name == object.name else { return false }
      guard self.url == object.url else { return false }
      guard self.id == object.id else { return false }
      guard self.description == object.description else { return false }
      guard self.owner == object.owner else { return false }
      guard self.`private` == object.`private` else { return false }
      return true
    }

    public static func == (lhs: AlertBugTrackerRepo, rhs: AlertBugTrackerRepo) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
