//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class Branch: APIModel {

    /** The branch name */
    public var name: String

    public var commit: Commit

    public class Commit: APIModel {

        /** The commit SHA */
        public var sha: String?

        /** The URL to the commit */
        public var url: String?

        public init(sha: String? = nil, url: String? = nil) {
            self.sha = sha
            self.url = url
        }

        private enum CodingKeys: String, CodingKey {
            case sha
            case url
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)

            sha = try container.decodeIfPresent(.sha)
            url = try container.decodeIfPresent(.url)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)

            try container.encodeIfPresent(sha, forKey: .sha)
            try container.encodeIfPresent(url, forKey: .url)
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? Commit else { return false }
          guard self.sha == object.sha else { return false }
          guard self.url == object.url else { return false }
          return true
        }

        public static func == (lhs: Commit, rhs: Commit) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(name: String, commit: Commit) {
        self.name = name
        self.commit = commit
    }

    private enum CodingKeys: String, CodingKey {
        case name
        case commit
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        name = try container.decode(.name)
        commit = try container.decode(.commit)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(name, forKey: .name)
        try container.encode(commit, forKey: .commit)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? Branch else { return false }
      guard self.name == object.name else { return false }
      guard self.commit == object.commit else { return false }
      return true
    }

    public static func == (lhs: Branch, rhs: Branch) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
