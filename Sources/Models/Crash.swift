//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class Crash: APIModel {

    public var newCrashGroupId: String

    public var crashId: String

    public var newCrashId: String

    public var timestamp: DateTime

    public var version: String

    public var build: String

    public var device: String

    public var osVersion: String

    public var userName: String

    public var details: Details?

    public var deviceName: String?

    public var displayId: String?

    public var osType: String?

    public var stacktrace: Stacktrace?

    public var userEmail: String?

    public class Details: APIModel {

        /** Language code (example: en_US).
     */
        public var locale: String

        /** Screen size of the device in pixels (example: 640x480).
     */
        public var screenSize: String

        /** Whether the device where the crash occurred is rooted or jailbroken
     */
        public var rooted: Bool

        /** Application launch timestamp (example: 1985-04-12T23:20:50.52Z).
     */
        public var appStartTimestamp: DateTime?

        /** Carrier country code (for mobile devices).
     */
        public var carrierCountry: String?

        /** Carrier name (for mobile devices).
     */
        public var carrierName: String?

        /** OS build code (example: LMY47X).
     */
        public var osBuild: String?

        public init(locale: String, screenSize: String, rooted: Bool, appStartTimestamp: DateTime? = nil, carrierCountry: String? = nil, carrierName: String? = nil, osBuild: String? = nil) {
            self.locale = locale
            self.screenSize = screenSize
            self.rooted = rooted
            self.appStartTimestamp = appStartTimestamp
            self.carrierCountry = carrierCountry
            self.carrierName = carrierName
            self.osBuild = osBuild
        }

        private enum CodingKeys: String, CodingKey {
            case locale
            case screenSize = "screen_size"
            case rooted
            case appStartTimestamp = "app_start_timestamp"
            case carrierCountry = "carrier_country"
            case carrierName = "carrier_name"
            case osBuild = "os_build"
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)

            locale = try container.decode(.locale)
            screenSize = try container.decode(.screenSize)
            rooted = try container.decode(.rooted)
            appStartTimestamp = try container.decodeIfPresent(.appStartTimestamp)
            carrierCountry = try container.decodeIfPresent(.carrierCountry)
            carrierName = try container.decodeIfPresent(.carrierName)
            osBuild = try container.decodeIfPresent(.osBuild)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)

            try container.encode(locale, forKey: .locale)
            try container.encode(screenSize, forKey: .screenSize)
            try container.encode(rooted, forKey: .rooted)
            try container.encodeIfPresent(appStartTimestamp, forKey: .appStartTimestamp)
            try container.encodeIfPresent(carrierCountry, forKey: .carrierCountry)
            try container.encodeIfPresent(carrierName, forKey: .carrierName)
            try container.encodeIfPresent(osBuild, forKey: .osBuild)
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? Details else { return false }
          guard self.locale == object.locale else { return false }
          guard self.screenSize == object.screenSize else { return false }
          guard self.rooted == object.rooted else { return false }
          guard self.appStartTimestamp == object.appStartTimestamp else { return false }
          guard self.carrierCountry == object.carrierCountry else { return false }
          guard self.carrierName == object.carrierName else { return false }
          guard self.osBuild == object.osBuild else { return false }
          return true
        }

        public static func == (lhs: Details, rhs: Details) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(newCrashGroupId: String, crashId: String, newCrashId: String, timestamp: DateTime, version: String, build: String, device: String, osVersion: String, userName: String, details: Details? = nil, deviceName: String? = nil, displayId: String? = nil, osType: String? = nil, stacktrace: Stacktrace? = nil, userEmail: String? = nil) {
        self.newCrashGroupId = newCrashGroupId
        self.crashId = crashId
        self.newCrashId = newCrashId
        self.timestamp = timestamp
        self.version = version
        self.build = build
        self.device = device
        self.osVersion = osVersion
        self.userName = userName
        self.details = details
        self.deviceName = deviceName
        self.displayId = displayId
        self.osType = osType
        self.stacktrace = stacktrace
        self.userEmail = userEmail
    }

    private enum CodingKeys: String, CodingKey {
        case newCrashGroupId = "new_crash_group_id"
        case crashId = "crash_id"
        case newCrashId = "new_crash_id"
        case timestamp
        case version
        case build
        case device
        case osVersion = "os_version"
        case userName = "user_name"
        case details
        case deviceName = "device_name"
        case displayId = "display_id"
        case osType = "os_type"
        case stacktrace
        case userEmail = "user_email"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        newCrashGroupId = try container.decode(.newCrashGroupId)
        crashId = try container.decode(.crashId)
        newCrashId = try container.decode(.newCrashId)
        timestamp = try container.decode(.timestamp)
        version = try container.decode(.version)
        build = try container.decode(.build)
        device = try container.decode(.device)
        osVersion = try container.decode(.osVersion)
        userName = try container.decode(.userName)
        details = try container.decodeIfPresent(.details)
        deviceName = try container.decodeIfPresent(.deviceName)
        displayId = try container.decodeIfPresent(.displayId)
        osType = try container.decodeIfPresent(.osType)
        stacktrace = try container.decodeIfPresent(.stacktrace)
        userEmail = try container.decodeIfPresent(.userEmail)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(newCrashGroupId, forKey: .newCrashGroupId)
        try container.encode(crashId, forKey: .crashId)
        try container.encode(newCrashId, forKey: .newCrashId)
        try container.encode(timestamp, forKey: .timestamp)
        try container.encode(version, forKey: .version)
        try container.encode(build, forKey: .build)
        try container.encode(device, forKey: .device)
        try container.encode(osVersion, forKey: .osVersion)
        try container.encode(userName, forKey: .userName)
        try container.encodeIfPresent(details, forKey: .details)
        try container.encodeIfPresent(deviceName, forKey: .deviceName)
        try container.encodeIfPresent(displayId, forKey: .displayId)
        try container.encodeIfPresent(osType, forKey: .osType)
        try container.encodeIfPresent(stacktrace, forKey: .stacktrace)
        try container.encodeIfPresent(userEmail, forKey: .userEmail)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? Crash else { return false }
      guard self.newCrashGroupId == object.newCrashGroupId else { return false }
      guard self.crashId == object.crashId else { return false }
      guard self.newCrashId == object.newCrashId else { return false }
      guard self.timestamp == object.timestamp else { return false }
      guard self.version == object.version else { return false }
      guard self.build == object.build else { return false }
      guard self.device == object.device else { return false }
      guard self.osVersion == object.osVersion else { return false }
      guard self.userName == object.userName else { return false }
      guard self.details == object.details else { return false }
      guard self.deviceName == object.deviceName else { return false }
      guard self.displayId == object.displayId else { return false }
      guard self.osType == object.osType else { return false }
      guard self.stacktrace == object.stacktrace else { return false }
      guard self.userEmail == object.userEmail else { return false }
      return true
    }

    public static func == (lhs: Crash, rhs: Crash) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
