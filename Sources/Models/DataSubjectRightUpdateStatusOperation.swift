//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class DataSubjectRightUpdateStatusOperation: APIModel {

    /** Operation status */
    public enum Status: String, Codable {
        case none = "None"
        case created = "Created"
        case queued = "Queued"
        case inProgress = "InProgress"
        case completed = "Completed"
        case failed = "Failed"

        public static let cases: [Status] = [
          .none,
          .created,
          .queued,
          .inProgress,
          .completed,
          .failed,
        ]
    }

    /** Request identifier of the operation */
    public var requestId: String

    /** Operation status */
    public var status: Status

    /** String field to be used by participant for any intermediate statuses or data they need to save */
    public var participantData: String?

    public init(requestId: String, status: Status, participantData: String? = nil) {
        self.requestId = requestId
        self.status = status
        self.participantData = participantData
    }

    private enum CodingKeys: String, CodingKey {
        case requestId
        case status
        case participantData
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        requestId = try container.decode(.requestId)
        status = try container.decode(.status)
        participantData = try container.decodeIfPresent(.participantData)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(requestId, forKey: .requestId)
        try container.encode(status, forKey: .status)
        try container.encodeIfPresent(participantData, forKey: .participantData)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? DataSubjectRightUpdateStatusOperation else { return false }
      guard self.requestId == object.requestId else { return false }
      guard self.status == object.status else { return false }
      guard self.participantData == object.participantData else { return false }
      return true
    }

    public static func == (lhs: DataSubjectRightUpdateStatusOperation, rhs: DataSubjectRightUpdateStatusOperation) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
