//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class SessionsPerDevice: APIModel {

    /** Average seesion per user. */
    public var averageSessionsPerUser: Double?

    /** Previous average session per user. */
    public var previousAverageSessionsPerUser: Double?

    /** Previous total count. */
    public var previousTotalCount: Int?

    /** The session count for each interval per device. */
    public var sessionsPerUser: [SessionsPerUser]?

    /** Total session per device count. */
    public var totalCount: Int?

    public init(averageSessionsPerUser: Double? = nil, previousAverageSessionsPerUser: Double? = nil, previousTotalCount: Int? = nil, sessionsPerUser: [SessionsPerUser]? = nil, totalCount: Int? = nil) {
        self.averageSessionsPerUser = averageSessionsPerUser
        self.previousAverageSessionsPerUser = previousAverageSessionsPerUser
        self.previousTotalCount = previousTotalCount
        self.sessionsPerUser = sessionsPerUser
        self.totalCount = totalCount
    }

    private enum CodingKeys: String, CodingKey {
        case averageSessionsPerUser = "average_sessions_per_user"
        case previousAverageSessionsPerUser = "previous_average_sessions_per_user"
        case previousTotalCount = "previous_total_count"
        case sessionsPerUser = "sessions_per_user"
        case totalCount = "total_count"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        averageSessionsPerUser = try container.decodeIfPresent(.averageSessionsPerUser)
        previousAverageSessionsPerUser = try container.decodeIfPresent(.previousAverageSessionsPerUser)
        previousTotalCount = try container.decodeIfPresent(.previousTotalCount)
        sessionsPerUser = try container.decodeArrayIfPresent(.sessionsPerUser)
        totalCount = try container.decodeIfPresent(.totalCount)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(averageSessionsPerUser, forKey: .averageSessionsPerUser)
        try container.encodeIfPresent(previousAverageSessionsPerUser, forKey: .previousAverageSessionsPerUser)
        try container.encodeIfPresent(previousTotalCount, forKey: .previousTotalCount)
        try container.encodeIfPresent(sessionsPerUser, forKey: .sessionsPerUser)
        try container.encodeIfPresent(totalCount, forKey: .totalCount)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? SessionsPerDevice else { return false }
      guard self.averageSessionsPerUser == object.averageSessionsPerUser else { return false }
      guard self.previousAverageSessionsPerUser == object.previousAverageSessionsPerUser else { return false }
      guard self.previousTotalCount == object.previousTotalCount else { return false }
      guard self.sessionsPerUser == object.sessionsPerUser else { return false }
      guard self.totalCount == object.totalCount else { return false }
      return true
    }

    public static func == (lhs: SessionsPerDevice, rhs: SessionsPerDevice) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
