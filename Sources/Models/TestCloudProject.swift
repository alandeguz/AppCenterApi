//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class TestCloudProject: APIModel {

    public enum FrameworkType: String, Codable {
        case appium = "Appium"
        case calabash = "Calabash"
        case espresso = "Espresso"
        case uITest = "UITest"
        case generated = "Generated"

        public static let cases: [FrameworkType] = [
          .appium,
          .calabash,
          .espresso,
          .uITest,
          .generated,
        ]
    }

    /** The path to the TestCloud project */
    public var path: String

    public var frameworkType: FrameworkType

    public var frameworkProperties: FrameworkProperties?

    public class FrameworkProperties: APIModel {

        public var configurations: [String]?

        public init(configurations: [String]? = nil) {
            self.configurations = configurations
        }

        private enum CodingKeys: String, CodingKey {
            case configurations
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)

            configurations = try container.decodeArrayIfPresent(.configurations)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)

            try container.encodeIfPresent(configurations, forKey: .configurations)
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? FrameworkProperties else { return false }
          guard self.configurations == object.configurations else { return false }
          return true
        }

        public static func == (lhs: FrameworkProperties, rhs: FrameworkProperties) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(path: String, frameworkType: FrameworkType, frameworkProperties: FrameworkProperties? = nil) {
        self.path = path
        self.frameworkType = frameworkType
        self.frameworkProperties = frameworkProperties
    }

    private enum CodingKeys: String, CodingKey {
        case path
        case frameworkType
        case frameworkProperties
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        path = try container.decode(.path)
        frameworkType = try container.decode(.frameworkType)
        frameworkProperties = try container.decodeIfPresent(.frameworkProperties)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(path, forKey: .path)
        try container.encode(frameworkType, forKey: .frameworkType)
        try container.encodeIfPresent(frameworkProperties, forKey: .frameworkProperties)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? TestCloudProject else { return false }
      guard self.path == object.path else { return false }
      guard self.frameworkType == object.frameworkType else { return false }
      guard self.frameworkProperties == object.frameworkProperties else { return false }
      return true
    }

    public static func == (lhs: TestCloudProject, rhs: TestCloudProject) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
