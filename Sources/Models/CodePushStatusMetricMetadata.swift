//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class CodePushStatusMetricMetadata: APIModel {

    public var deploymentKey: String

    public var appVersion: String?

    public var clientUniqueId: String?

    public var label: String?

    public var previousDeploymentKey: String?

    public var previousLabelOrAppVersion: String?

    public var status: String?

    public init(deploymentKey: String, appVersion: String? = nil, clientUniqueId: String? = nil, label: String? = nil, previousDeploymentKey: String? = nil, previousLabelOrAppVersion: String? = nil, status: String? = nil) {
        self.deploymentKey = deploymentKey
        self.appVersion = appVersion
        self.clientUniqueId = clientUniqueId
        self.label = label
        self.previousDeploymentKey = previousDeploymentKey
        self.previousLabelOrAppVersion = previousLabelOrAppVersion
        self.status = status
    }

    private enum CodingKeys: String, CodingKey {
        case deploymentKey = "deployment_key"
        case appVersion = "app_version"
        case clientUniqueId = "client_unique_id"
        case label
        case previousDeploymentKey = "previous_deployment_key"
        case previousLabelOrAppVersion = "previous_label_or_app_version"
        case status
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        deploymentKey = try container.decode(.deploymentKey)
        appVersion = try container.decodeIfPresent(.appVersion)
        clientUniqueId = try container.decodeIfPresent(.clientUniqueId)
        label = try container.decodeIfPresent(.label)
        previousDeploymentKey = try container.decodeIfPresent(.previousDeploymentKey)
        previousLabelOrAppVersion = try container.decodeIfPresent(.previousLabelOrAppVersion)
        status = try container.decodeIfPresent(.status)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(deploymentKey, forKey: .deploymentKey)
        try container.encodeIfPresent(appVersion, forKey: .appVersion)
        try container.encodeIfPresent(clientUniqueId, forKey: .clientUniqueId)
        try container.encodeIfPresent(label, forKey: .label)
        try container.encodeIfPresent(previousDeploymentKey, forKey: .previousDeploymentKey)
        try container.encodeIfPresent(previousLabelOrAppVersion, forKey: .previousLabelOrAppVersion)
        try container.encodeIfPresent(status, forKey: .status)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? CodePushStatusMetricMetadata else { return false }
      guard self.deploymentKey == object.deploymentKey else { return false }
      guard self.appVersion == object.appVersion else { return false }
      guard self.clientUniqueId == object.clientUniqueId else { return false }
      guard self.label == object.label else { return false }
      guard self.previousDeploymentKey == object.previousDeploymentKey else { return false }
      guard self.previousLabelOrAppVersion == object.previousLabelOrAppVersion else { return false }
      guard self.status == object.status else { return false }
      return true
    }

    public static func == (lhs: CodePushStatusMetricMetadata, rhs: CodePushStatusMetricMetadata) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
