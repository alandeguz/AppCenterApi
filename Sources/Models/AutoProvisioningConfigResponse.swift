//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** A response from API containing information for a Auto Provisioning Config. */
public class AutoProvisioningConfigResponse: APIModel {

    /** When *true* enables auto provisioning */
    public var allowAutoProvisioning: Bool?

    /** The identifier of the App. */
    public var appId: String?

    /** A key to a secret in customer-credential-store. apple_developer_account refers to the user's developer account that is used to log into https://developer.apple.com. Normally the user's email. */
    public var appleDeveloperAccountKey: String?

    /** A key to a secret in customer-credential-store. distribution_certificate refers to the cusomer's certificate (that holds the private key) that will be used to sign the app. */
    public var appleDistributionCertificateKey: String?

    /** The identifier of the destination. */
    public var destinationId: String?

    /** The identifier of the config. */
    public var id: Double?

    public init(allowAutoProvisioning: Bool? = nil, appId: String? = nil, appleDeveloperAccountKey: String? = nil, appleDistributionCertificateKey: String? = nil, destinationId: String? = nil, id: Double? = nil) {
        self.allowAutoProvisioning = allowAutoProvisioning
        self.appId = appId
        self.appleDeveloperAccountKey = appleDeveloperAccountKey
        self.appleDistributionCertificateKey = appleDistributionCertificateKey
        self.destinationId = destinationId
        self.id = id
    }

    private enum CodingKeys: String, CodingKey {
        case allowAutoProvisioning = "allow_auto_provisioning"
        case appId = "app_id"
        case appleDeveloperAccountKey = "apple_developer_account_key"
        case appleDistributionCertificateKey = "apple_distribution_certificate_key"
        case destinationId = "destination_id"
        case id
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        allowAutoProvisioning = try container.decodeIfPresent(.allowAutoProvisioning)
        appId = try container.decodeIfPresent(.appId)
        appleDeveloperAccountKey = try container.decodeIfPresent(.appleDeveloperAccountKey)
        appleDistributionCertificateKey = try container.decodeIfPresent(.appleDistributionCertificateKey)
        destinationId = try container.decodeIfPresent(.destinationId)
        id = try container.decodeIfPresent(.id)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(allowAutoProvisioning, forKey: .allowAutoProvisioning)
        try container.encodeIfPresent(appId, forKey: .appId)
        try container.encodeIfPresent(appleDeveloperAccountKey, forKey: .appleDeveloperAccountKey)
        try container.encodeIfPresent(appleDistributionCertificateKey, forKey: .appleDistributionCertificateKey)
        try container.encodeIfPresent(destinationId, forKey: .destinationId)
        try container.encodeIfPresent(id, forKey: .id)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? AutoProvisioningConfigResponse else { return false }
      guard self.allowAutoProvisioning == object.allowAutoProvisioning else { return false }
      guard self.appId == object.appId else { return false }
      guard self.appleDeveloperAccountKey == object.appleDeveloperAccountKey else { return false }
      guard self.appleDistributionCertificateKey == object.appleDistributionCertificateKey else { return false }
      guard self.destinationId == object.destinationId else { return false }
      guard self.id == object.id else { return false }
      return true
    }

    public static func == (lhs: AutoProvisioningConfigResponse, rhs: AutoProvisioningConfigResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
