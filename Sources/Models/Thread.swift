//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** a thread representation */
public class Thread: APIModel {

    /** SDK/Platform this thread is beeing generated from */
    public enum Platform: String, Codable {
        case ios = "ios"
        case android = "android"
        case xamarin = "xamarin"
        case reactNative = "react-native"
        case ndk = "ndk"
        case unity = "unity"
        case other = "other"

        public static let cases: [Platform] = [
          .ios,
          .android,
          .xamarin,
          .reactNative,
          .ndk,
          .unity,
          .other,
        ]
    }

    /** name of the thread */
    public var title: String

    /** frames of that thread */
    public var frames: [Frames]

    /** True if this thread crashed */
    public var crashed: Bool?

    /** potential additional exception happened in that thread (Last Exception Backtrace) */
    public var exception: Exception?

    /** SDK/Platform this thread is beeing generated from */
    public var platform: Platform?

    /** Shows if a thread is relevant or not. Is false if all frames are non relevant, otherwise true */
    public var relevant: Bool?

    public init(title: String, frames: [Frames], crashed: Bool? = nil, exception: Exception? = nil, platform: Platform? = nil, relevant: Bool? = nil) {
        self.title = title
        self.frames = frames
        self.crashed = crashed
        self.exception = exception
        self.platform = platform
        self.relevant = relevant
    }

    private enum CodingKeys: String, CodingKey {
        case title
        case frames
        case crashed
        case exception
        case platform
        case relevant
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        title = try container.decode(.title)
        frames = try container.decodeArray(.frames)
        crashed = try container.decodeIfPresent(.crashed)
        exception = try container.decodeIfPresent(.exception)
        platform = try container.decodeIfPresent(.platform)
        relevant = try container.decodeIfPresent(.relevant)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(title, forKey: .title)
        try container.encode(frames, forKey: .frames)
        try container.encodeIfPresent(crashed, forKey: .crashed)
        try container.encodeIfPresent(exception, forKey: .exception)
        try container.encodeIfPresent(platform, forKey: .platform)
        try container.encodeIfPresent(relevant, forKey: .relevant)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? Thread else { return false }
      guard self.title == object.title else { return false }
      guard self.frames == object.frames else { return false }
      guard self.crashed == object.crashed else { return false }
      guard self.exception == object.exception else { return false }
      guard self.platform == object.platform else { return false }
      guard self.relevant == object.relevant else { return false }
      return true
    }

    public static func == (lhs: Thread, rhs: Thread) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
