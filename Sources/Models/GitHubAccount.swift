//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** GitHub account information */
public class GitHubAccount: APIModel {

    /** Type of GitHub account */
    public enum AccountType: String, Codable {
        case user = "User"
        case organization = "Organization"

        public static let cases: [AccountType] = [
          .user,
          .organization,
        ]
    }

    /** Type of GitHub account */
    public var accountType: AccountType?

    /** Id of GitHub account */
    public var id: Int?

    public init(accountType: AccountType? = nil, id: Int? = nil) {
        self.accountType = accountType
        self.id = id
    }

    private enum CodingKeys: String, CodingKey {
        case accountType
        case id
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        accountType = try container.decodeIfPresent(.accountType)
        id = try container.decodeIfPresent(.id)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(accountType, forKey: .accountType)
        try container.encodeIfPresent(id, forKey: .id)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? GitHubAccount else { return false }
      guard self.accountType == object.accountType else { return false }
      guard self.id == object.id else { return false }
      return true
    }

    public static func == (lhs: GitHubAccount, rhs: GitHubAccount) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
