//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class TesterAppRelease: APIModel {

    /** The release's origin */
    public enum Origin: String, Codable {
        case hockeyapp = "hockeyapp"
        case appcenter = "appcenter"

        public static let cases: [Origin] = [
          .hockeyapp,
          .appcenter,
        ]
    }

    /** ID identifying this unique release. */
    public var id: Int

    /** The release's version.<br>
For iOS: CFBundleVersion from info.plist.<br>
For Android: android:versionCode from AppManifest.xml.
 */
    public var version: String

    /** This value determines the whether a release currently is enabled or disabled. */
    public var enabled: Bool

    /** UTC time in ISO 8601 format of the uploaded time. */
    public var uploadedAt: String

    /** The release's short version.<br>
For iOS: CFBundleShortVersionString from info.plist.<br>
For Android: android:versionName from AppManifest.xml.
 */
    public var shortVersion: String

    /** A boolean which determines whether the release is a mandatory update or not. */
    public var mandatoryUpdate: Bool

    /** This value determines if a release is external or not. */
    public var isExternalBuild: Bool?

    /** The release's origin */
    public var origin: Origin?

    public init(id: Int, version: String, enabled: Bool, uploadedAt: String, shortVersion: String, mandatoryUpdate: Bool, isExternalBuild: Bool? = nil, origin: Origin? = nil) {
        self.id = id
        self.version = version
        self.enabled = enabled
        self.uploadedAt = uploadedAt
        self.shortVersion = shortVersion
        self.mandatoryUpdate = mandatoryUpdate
        self.isExternalBuild = isExternalBuild
        self.origin = origin
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case version
        case enabled
        case uploadedAt = "uploaded_at"
        case shortVersion = "short_version"
        case mandatoryUpdate = "mandatory_update"
        case isExternalBuild = "is_external_build"
        case origin
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        id = try container.decode(.id)
        version = try container.decode(.version)
        enabled = try container.decode(.enabled)
        uploadedAt = try container.decode(.uploadedAt)
        shortVersion = try container.decode(.shortVersion)
        mandatoryUpdate = try container.decode(.mandatoryUpdate)
        isExternalBuild = try container.decodeIfPresent(.isExternalBuild)
        origin = try container.decodeIfPresent(.origin)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(id, forKey: .id)
        try container.encode(version, forKey: .version)
        try container.encode(enabled, forKey: .enabled)
        try container.encode(uploadedAt, forKey: .uploadedAt)
        try container.encode(shortVersion, forKey: .shortVersion)
        try container.encode(mandatoryUpdate, forKey: .mandatoryUpdate)
        try container.encodeIfPresent(isExternalBuild, forKey: .isExternalBuild)
        try container.encodeIfPresent(origin, forKey: .origin)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? TesterAppRelease else { return false }
      guard self.id == object.id else { return false }
      guard self.version == object.version else { return false }
      guard self.enabled == object.enabled else { return false }
      guard self.uploadedAt == object.uploadedAt else { return false }
      guard self.shortVersion == object.shortVersion else { return false }
      guard self.mandatoryUpdate == object.mandatoryUpdate else { return false }
      guard self.isExternalBuild == object.isExternalBuild else { return false }
      guard self.origin == object.origin else { return false }
      return true
    }

    public static func == (lhs: TesterAppRelease, rhs: TesterAppRelease) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
