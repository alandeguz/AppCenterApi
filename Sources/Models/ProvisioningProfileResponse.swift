//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** A response containing information about an iOS provisioning profile. */
public class ProvisioningProfileResponse: APIModel {

    /** A response containing information about an iOS provisioning profile. */
    public enum ProvisioningProfileType: String, Codable {
        case adhoc = "adhoc"
        case enterprise = "enterprise"
        case other = "other"

        public static let cases: [ProvisioningProfileType] = [
          .adhoc,
          .enterprise,
          .other,
        ]
    }

    public var provisioningProfileType: ProvisioningProfileType

    /** Array of provisioning profiles for any app extensions */
    public var appexProfiles: [ProvisioningProfileResponse]?

    /** The bundle identifier associated with the profile. */
    public var provisioningBundleId: String?

    /** The name of the provisioning profile. */
    public var provisioningProfileName: String?

    /** The team identifier. */
    public var teamIdentifier: String?

    public var udids: [String]?

    public init(provisioningProfileType: ProvisioningProfileType, appexProfiles: [ProvisioningProfileResponse]? = nil, provisioningBundleId: String? = nil, provisioningProfileName: String? = nil, teamIdentifier: String? = nil, udids: [String]? = nil) {
        self.provisioningProfileType = provisioningProfileType
        self.appexProfiles = appexProfiles
        self.provisioningBundleId = provisioningBundleId
        self.provisioningProfileName = provisioningProfileName
        self.teamIdentifier = teamIdentifier
        self.udids = udids
    }

    private enum CodingKeys: String, CodingKey {
        case provisioningProfileType = "provisioning_profile_type"
        case appexProfiles = "appex_profiles"
        case provisioningBundleId = "provisioning_bundle_id"
        case provisioningProfileName = "provisioning_profile_name"
        case teamIdentifier = "team_identifier"
        case udids
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        provisioningProfileType = try container.decode(.provisioningProfileType)
        appexProfiles = try container.decodeArrayIfPresent(.appexProfiles)
        provisioningBundleId = try container.decodeIfPresent(.provisioningBundleId)
        provisioningProfileName = try container.decodeIfPresent(.provisioningProfileName)
        teamIdentifier = try container.decodeIfPresent(.teamIdentifier)
        udids = try container.decodeArrayIfPresent(.udids)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(provisioningProfileType, forKey: .provisioningProfileType)
        try container.encodeIfPresent(appexProfiles, forKey: .appexProfiles)
        try container.encodeIfPresent(provisioningBundleId, forKey: .provisioningBundleId)
        try container.encodeIfPresent(provisioningProfileName, forKey: .provisioningProfileName)
        try container.encodeIfPresent(teamIdentifier, forKey: .teamIdentifier)
        try container.encodeIfPresent(udids, forKey: .udids)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? ProvisioningProfileResponse else { return false }
      guard self.provisioningProfileType == object.provisioningProfileType else { return false }
      guard self.appexProfiles == object.appexProfiles else { return false }
      guard self.provisioningBundleId == object.provisioningBundleId else { return false }
      guard self.provisioningProfileName == object.provisioningProfileName else { return false }
      guard self.teamIdentifier == object.teamIdentifier else { return false }
      guard self.udids == object.udids else { return false }
      return true
    }

    public static func == (lhs: ProvisioningProfileResponse, rhs: ProvisioningProfileResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
