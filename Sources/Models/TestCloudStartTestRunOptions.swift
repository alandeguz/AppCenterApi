//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Options required to start the test run */
public class TestCloudStartTestRunOptions: APIModel {

    /** Test framework used by tests. */
    public var testFramework: String

    /** Device selection string. */
    public var deviceSelection: String

    /** Language that should be used to run tests. */
    public var language: String?

    /** Locale that should be used to run tests. */
    public var locale: String?

    /** A JSON dictionary with additional test parameters */
    public var testParameters: [String: Any]?

    /** Name of the test series. */
    public var testSeries: String?

    public init(testFramework: String, deviceSelection: String, language: String? = nil, locale: String? = nil, testParameters: [String: Any]? = nil, testSeries: String? = nil) {
        self.testFramework = testFramework
        self.deviceSelection = deviceSelection
        self.language = language
        self.locale = locale
        self.testParameters = testParameters
        self.testSeries = testSeries
    }

    private enum CodingKeys: String, CodingKey {
        case testFramework = "test_framework"
        case deviceSelection = "device_selection"
        case language
        case locale
        case testParameters = "test_parameters"
        case testSeries = "test_series"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        testFramework = try container.decode(.testFramework)
        deviceSelection = try container.decode(.deviceSelection)
        language = try container.decodeIfPresent(.language)
        locale = try container.decodeIfPresent(.locale)
        testParameters = try container.decodeAnyIfPresent(.testParameters)
        testSeries = try container.decodeIfPresent(.testSeries)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(testFramework, forKey: .testFramework)
        try container.encode(deviceSelection, forKey: .deviceSelection)
        try container.encodeIfPresent(language, forKey: .language)
        try container.encodeIfPresent(locale, forKey: .locale)
        try container.encodeAnyIfPresent(testParameters, forKey: .testParameters)
        try container.encodeIfPresent(testSeries, forKey: .testSeries)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? TestCloudStartTestRunOptions else { return false }
      guard self.testFramework == object.testFramework else { return false }
      guard self.deviceSelection == object.deviceSelection else { return false }
      guard self.language == object.language else { return false }
      guard self.locale == object.locale else { return false }
      guard NSDictionary(dictionary: self.testParameters ?? [:]).isEqual(to: object.testParameters ?? [:]) else { return false }
      guard self.testSeries == object.testSeries else { return false }
      return true
    }

    public static func == (lhs: TestCloudStartTestRunOptions, rhs: TestCloudStartTestRunOptions) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
