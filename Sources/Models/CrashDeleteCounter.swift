//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class CrashDeleteCounter: APIModel {

    public var appId: String?

    public var attachmentsDeleted: Int?

    public var blobsFailed: Int?

    public var blobsSucceeded: Int?

    public var crashGroupId: String?

    public var crashId: String?

    public var crashesDeleted: Int?

    public init(appId: String? = nil, attachmentsDeleted: Int? = nil, blobsFailed: Int? = nil, blobsSucceeded: Int? = nil, crashGroupId: String? = nil, crashId: String? = nil, crashesDeleted: Int? = nil) {
        self.appId = appId
        self.attachmentsDeleted = attachmentsDeleted
        self.blobsFailed = blobsFailed
        self.blobsSucceeded = blobsSucceeded
        self.crashGroupId = crashGroupId
        self.crashId = crashId
        self.crashesDeleted = crashesDeleted
    }

    private enum CodingKeys: String, CodingKey {
        case appId = "app_id"
        case attachmentsDeleted = "attachments_deleted"
        case blobsFailed = "blobs_failed"
        case blobsSucceeded = "blobs_succeeded"
        case crashGroupId = "crash_group_id"
        case crashId = "crash_id"
        case crashesDeleted = "crashes_deleted"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        appId = try container.decodeIfPresent(.appId)
        attachmentsDeleted = try container.decodeIfPresent(.attachmentsDeleted)
        blobsFailed = try container.decodeIfPresent(.blobsFailed)
        blobsSucceeded = try container.decodeIfPresent(.blobsSucceeded)
        crashGroupId = try container.decodeIfPresent(.crashGroupId)
        crashId = try container.decodeIfPresent(.crashId)
        crashesDeleted = try container.decodeIfPresent(.crashesDeleted)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(appId, forKey: .appId)
        try container.encodeIfPresent(attachmentsDeleted, forKey: .attachmentsDeleted)
        try container.encodeIfPresent(blobsFailed, forKey: .blobsFailed)
        try container.encodeIfPresent(blobsSucceeded, forKey: .blobsSucceeded)
        try container.encodeIfPresent(crashGroupId, forKey: .crashGroupId)
        try container.encodeIfPresent(crashId, forKey: .crashId)
        try container.encodeIfPresent(crashesDeleted, forKey: .crashesDeleted)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? CrashDeleteCounter else { return false }
      guard self.appId == object.appId else { return false }
      guard self.attachmentsDeleted == object.attachmentsDeleted else { return false }
      guard self.blobsFailed == object.blobsFailed else { return false }
      guard self.blobsSucceeded == object.blobsSucceeded else { return false }
      guard self.crashGroupId == object.crashGroupId else { return false }
      guard self.crashId == object.crashId else { return false }
      guard self.crashesDeleted == object.crashesDeleted else { return false }
      return true
    }

    public static func == (lhs: CrashDeleteCounter, rhs: CrashDeleteCounter) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
