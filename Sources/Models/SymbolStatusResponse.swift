//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** A response containing information pertaining to a symbol status */
public class SymbolStatusResponse: APIModel {

    /** Whether the symbol is ignored. */
    public enum Status: String, Codable {
        case available = "available"
        case ignored = "ignored"
        case missing = "missing"

        public static let cases: [Status] = [
          .available,
          .ignored,
          .missing,
        ]
    }

    /** The unique id for this symbol (uuid) */
    public var symbolId: String

    /** The application that this symbol belongs to */
    public var appId: String

    /** Whether the symbol is ignored. */
    public var status: Status

    public init(symbolId: String, appId: String, status: Status) {
        self.symbolId = symbolId
        self.appId = appId
        self.status = status
    }

    private enum CodingKeys: String, CodingKey {
        case symbolId = "symbol_id"
        case appId = "app_id"
        case status
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        symbolId = try container.decode(.symbolId)
        appId = try container.decode(.appId)
        status = try container.decode(.status)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(symbolId, forKey: .symbolId)
        try container.encode(appId, forKey: .appId)
        try container.encode(status, forKey: .status)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? SymbolStatusResponse else { return false }
      guard self.symbolId == object.symbolId else { return false }
      guard self.appId == object.appId else { return false }
      guard self.status == object.status else { return false }
      return true
    }

    public static func == (lhs: SymbolStatusResponse, rhs: SymbolStatusResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
