//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Notification statistics */
public class NotificationOverviewResult: APIModel {

    /** State of the notification. */
    public enum State: String, Codable {
        case queued = "Queued"
        case sending = "Sending"
        case completed = "Completed"
        case failed = "Failed"
        case noTargetFound = "NoTargetFound"

        public static let cases: [State] = [
          .queued,
          .sending,
          .completed,
          .failed,
          .noTargetFound,
        ]
    }

    /** Notification id. */
    public var notificationId: String

    /** State of the notification. */
    public var state: State

    /** Notification name */
    public var name: String?

    /** Type of Notification target (audiences, devices, user ids, account ids or broadcast). The object must include the correct properties for the specified target type except for broadcast. */
    public var notificationTarget: NotificationTarget?

    /** Number of the notifications failed to send to the push provider. */
    public var pnsSendFailure: Int?

    /** Number of the notifications successfully sent to push the provider. */
    public var pnsSendSuccess: Int?

    /** Notification send time */
    public var sendTime: DateTime?

    /** Notification statistics */
    public class NotificationTarget: APIModel {

        /** Notification statistics */
        public enum `Type`: String, Codable {
            case audiencesTarget = "audiences_target"
            case devicesTarget = "devices_target"
            case userIdsTarget = "user_ids_target"
            case accountIdsTarget = "account_ids_target"
            case broadcastTarget = "broadcast_target"

            public static let cases: [`Type`] = [
              .audiencesTarget,
              .devicesTarget,
              .userIdsTarget,
              .accountIdsTarget,
              .broadcastTarget,
            ]
        }

        public var type: `Type`

        public init(type: `Type`) {
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case type
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)

            type = try container.decode(.type)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)

            try container.encode(type, forKey: .type)
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? NotificationTarget else { return false }
          guard self.type == object.type else { return false }
          return true
        }

        public static func == (lhs: NotificationTarget, rhs: NotificationTarget) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(notificationId: String, state: State, name: String? = nil, notificationTarget: NotificationTarget? = nil, pnsSendFailure: Int? = nil, pnsSendSuccess: Int? = nil, sendTime: DateTime? = nil) {
        self.notificationId = notificationId
        self.state = state
        self.name = name
        self.notificationTarget = notificationTarget
        self.pnsSendFailure = pnsSendFailure
        self.pnsSendSuccess = pnsSendSuccess
        self.sendTime = sendTime
    }

    private enum CodingKeys: String, CodingKey {
        case notificationId = "notification_id"
        case state
        case name
        case notificationTarget = "notification_target"
        case pnsSendFailure = "pns_send_failure"
        case pnsSendSuccess = "pns_send_success"
        case sendTime = "send_time"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        notificationId = try container.decode(.notificationId)
        state = try container.decode(.state)
        name = try container.decodeIfPresent(.name)
        notificationTarget = try container.decodeIfPresent(.notificationTarget)
        pnsSendFailure = try container.decodeIfPresent(.pnsSendFailure)
        pnsSendSuccess = try container.decodeIfPresent(.pnsSendSuccess)
        sendTime = try container.decodeIfPresent(.sendTime)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(notificationId, forKey: .notificationId)
        try container.encode(state, forKey: .state)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(notificationTarget, forKey: .notificationTarget)
        try container.encodeIfPresent(pnsSendFailure, forKey: .pnsSendFailure)
        try container.encodeIfPresent(pnsSendSuccess, forKey: .pnsSendSuccess)
        try container.encodeIfPresent(sendTime, forKey: .sendTime)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? NotificationOverviewResult else { return false }
      guard self.notificationId == object.notificationId else { return false }
      guard self.state == object.state else { return false }
      guard self.name == object.name else { return false }
      guard self.notificationTarget == object.notificationTarget else { return false }
      guard self.pnsSendFailure == object.pnsSendFailure else { return false }
      guard self.pnsSendSuccess == object.pnsSendSuccess else { return false }
      guard self.sendTime == object.sendTime else { return false }
      return true
    }

    public static func == (lhs: NotificationOverviewResult, rhs: NotificationOverviewResult) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
