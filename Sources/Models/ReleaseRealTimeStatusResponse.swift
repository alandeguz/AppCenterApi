//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** status of the app from store */
public class ReleaseRealTimeStatusResponse: APIModel {

    /** app id */
    public var appId: String?

    /** release id */
    public var releaseId: String?

    /** Status Data from store */
    public var status: Status?

    /** status of the app from store */
    public class Status: APIModel {

        /** status from store */
        public var status: String?

        /** store type */
        public var storetype: String?

        /** track information from store */
        public var track: String?

        /** version of the app from store */
        public var version: String?

        public init(status: String? = nil, storetype: String? = nil, track: String? = nil, version: String? = nil) {
            self.status = status
            self.storetype = storetype
            self.track = track
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case status
            case storetype
            case track
            case version
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)

            status = try container.decodeIfPresent(.status)
            storetype = try container.decodeIfPresent(.storetype)
            track = try container.decodeIfPresent(.track)
            version = try container.decodeIfPresent(.version)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)

            try container.encodeIfPresent(status, forKey: .status)
            try container.encodeIfPresent(storetype, forKey: .storetype)
            try container.encodeIfPresent(track, forKey: .track)
            try container.encodeIfPresent(version, forKey: .version)
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? Status else { return false }
          guard self.status == object.status else { return false }
          guard self.storetype == object.storetype else { return false }
          guard self.track == object.track else { return false }
          guard self.version == object.version else { return false }
          return true
        }

        public static func == (lhs: Status, rhs: Status) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(appId: String? = nil, releaseId: String? = nil, status: Status? = nil) {
        self.appId = appId
        self.releaseId = releaseId
        self.status = status
    }

    private enum CodingKeys: String, CodingKey {
        case appId = "app_id"
        case releaseId = "release_id"
        case status
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        appId = try container.decodeIfPresent(.appId)
        releaseId = try container.decodeIfPresent(.releaseId)
        status = try container.decodeIfPresent(.status)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(appId, forKey: .appId)
        try container.encodeIfPresent(releaseId, forKey: .releaseId)
        try container.encodeIfPresent(status, forKey: .status)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? ReleaseRealTimeStatusResponse else { return false }
      guard self.appId == object.appId else { return false }
      guard self.releaseId == object.releaseId else { return false }
      guard self.status == object.status else { return false }
      return true
    }

    public static func == (lhs: ReleaseRealTimeStatusResponse, rhs: ReleaseRealTimeStatusResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
