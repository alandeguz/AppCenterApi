//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class ErrorAttachment: APIModel {

    public var appId: String?

    public var attachmentId: String?

    public var blobLocation: String?

    public var contentType: String?

    public var crashId: String?

    public var createdTime: DateTime?

    public var fileName: String?

    public var size: Int?

    public init(appId: String? = nil, attachmentId: String? = nil, blobLocation: String? = nil, contentType: String? = nil, crashId: String? = nil, createdTime: DateTime? = nil, fileName: String? = nil, size: Int? = nil) {
        self.appId = appId
        self.attachmentId = attachmentId
        self.blobLocation = blobLocation
        self.contentType = contentType
        self.crashId = crashId
        self.createdTime = createdTime
        self.fileName = fileName
        self.size = size
    }

    private enum CodingKeys: String, CodingKey {
        case appId
        case attachmentId
        case blobLocation
        case contentType
        case crashId
        case createdTime
        case fileName
        case size
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        appId = try container.decodeIfPresent(.appId)
        attachmentId = try container.decodeIfPresent(.attachmentId)
        blobLocation = try container.decodeIfPresent(.blobLocation)
        contentType = try container.decodeIfPresent(.contentType)
        crashId = try container.decodeIfPresent(.crashId)
        createdTime = try container.decodeIfPresent(.createdTime)
        fileName = try container.decodeIfPresent(.fileName)
        size = try container.decodeIfPresent(.size)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(appId, forKey: .appId)
        try container.encodeIfPresent(attachmentId, forKey: .attachmentId)
        try container.encodeIfPresent(blobLocation, forKey: .blobLocation)
        try container.encodeIfPresent(contentType, forKey: .contentType)
        try container.encodeIfPresent(crashId, forKey: .crashId)
        try container.encodeIfPresent(createdTime, forKey: .createdTime)
        try container.encodeIfPresent(fileName, forKey: .fileName)
        try container.encodeIfPresent(size, forKey: .size)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? ErrorAttachment else { return false }
      guard self.appId == object.appId else { return false }
      guard self.attachmentId == object.attachmentId else { return false }
      guard self.blobLocation == object.blobLocation else { return false }
      guard self.contentType == object.contentType else { return false }
      guard self.crashId == object.crashId else { return false }
      guard self.createdTime == object.createdTime else { return false }
      guard self.fileName == object.fileName else { return false }
      guard self.size == object.size else { return false }
      return true
    }

    public static func == (lhs: ErrorAttachment, rhs: ErrorAttachment) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
