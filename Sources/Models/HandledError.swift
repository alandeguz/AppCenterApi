//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class HandledError: APIModel {

    public var country: String?

    public var deviceName: String?

    public var errorId: String?

    public var hasAttachments: Bool?

    public var hasBreadcrumbs: Bool?

    public var language: String?

    public var osType: String?

    public var osVersion: String?

    public var timestamp: DateTime?

    public var userId: String?

    public init(country: String? = nil, deviceName: String? = nil, errorId: String? = nil, hasAttachments: Bool? = nil, hasBreadcrumbs: Bool? = nil, language: String? = nil, osType: String? = nil, osVersion: String? = nil, timestamp: DateTime? = nil, userId: String? = nil) {
        self.country = country
        self.deviceName = deviceName
        self.errorId = errorId
        self.hasAttachments = hasAttachments
        self.hasBreadcrumbs = hasBreadcrumbs
        self.language = language
        self.osType = osType
        self.osVersion = osVersion
        self.timestamp = timestamp
        self.userId = userId
    }

    private enum CodingKeys: String, CodingKey {
        case country
        case deviceName
        case errorId
        case hasAttachments
        case hasBreadcrumbs
        case language
        case osType
        case osVersion
        case timestamp
        case userId
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        country = try container.decodeIfPresent(.country)
        deviceName = try container.decodeIfPresent(.deviceName)
        errorId = try container.decodeIfPresent(.errorId)
        hasAttachments = try container.decodeIfPresent(.hasAttachments)
        hasBreadcrumbs = try container.decodeIfPresent(.hasBreadcrumbs)
        language = try container.decodeIfPresent(.language)
        osType = try container.decodeIfPresent(.osType)
        osVersion = try container.decodeIfPresent(.osVersion)
        timestamp = try container.decodeIfPresent(.timestamp)
        userId = try container.decodeIfPresent(.userId)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(country, forKey: .country)
        try container.encodeIfPresent(deviceName, forKey: .deviceName)
        try container.encodeIfPresent(errorId, forKey: .errorId)
        try container.encodeIfPresent(hasAttachments, forKey: .hasAttachments)
        try container.encodeIfPresent(hasBreadcrumbs, forKey: .hasBreadcrumbs)
        try container.encodeIfPresent(language, forKey: .language)
        try container.encodeIfPresent(osType, forKey: .osType)
        try container.encodeIfPresent(osVersion, forKey: .osVersion)
        try container.encodeIfPresent(timestamp, forKey: .timestamp)
        try container.encodeIfPresent(userId, forKey: .userId)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? HandledError else { return false }
      guard self.country == object.country else { return false }
      guard self.deviceName == object.deviceName else { return false }
      guard self.errorId == object.errorId else { return false }
      guard self.hasAttachments == object.hasAttachments else { return false }
      guard self.hasBreadcrumbs == object.hasBreadcrumbs else { return false }
      guard self.language == object.language else { return false }
      guard self.osType == object.osType else { return false }
      guard self.osVersion == object.osVersion else { return false }
      guard self.timestamp == object.timestamp else { return false }
      guard self.userId == object.userId else { return false }
      return true
    }

    public static func == (lhs: HandledError, rhs: HandledError) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
