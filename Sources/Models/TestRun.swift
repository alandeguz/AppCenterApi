//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Summary single test run on Xamarin Test Cloud */
public class TestRun: APIModel {

    /** The compiled version of the app binary */
    public var appVersion: String?

    /** The date and time the test was uploaded */
    public var date: String?

    /** Human readable explanation of the current test status */
    public var description: String?

    /** The unique id of the test upload */
    public var id: ID?

    /** The device platform targeted by the test. Possible values are 'ios' or 'android' */
    public var platform: String?

    /** The passed/failed state */
    public var resultStatus: String?

    /** The current status of the test run, in relation to the various phases */
    public var runStatus: String?

    /** Deprecated. Use runStatus instead. */
    public var state: String?

    /** Summary single test run on Xamarin Test Cloud */
    public var stats: Stats?

    /** Deprecated. Use resultStatus instead. */
    public var status: String?

    /** The name of the test series with which this test upload is associated */
    public var testSeries: String?

    /** The name of the test framework used to run this test */
    public var testType: String?

    /** Summary single test run on Xamarin Test Cloud */
    public class Stats: APIModel {

        /** Number of devices running the test */
        public var devices: Double?

        /** Number of failed devices */
        public var devicesFailed: Double?

        /** Number of finished devices */
        public var devicesFinished: Double?

        /** Number of failed tests */
        public var failed: Double?

        /** Number of passed tests */
        public var passed: Double?

        /** The max amount of MB used during the test run */
        public var peakMemory: Double?

        /** Number of skipped tests */
        public var skipped: Double?

        /** Number of tests in total */
        public var total: Double?

        /** The number of minutes of device time the test has been runnign */
        public var totalDeviceMinutes: Double?

        public init(devices: Double? = nil, devicesFailed: Double? = nil, devicesFinished: Double? = nil, failed: Double? = nil, passed: Double? = nil, peakMemory: Double? = nil, skipped: Double? = nil, total: Double? = nil, totalDeviceMinutes: Double? = nil) {
            self.devices = devices
            self.devicesFailed = devicesFailed
            self.devicesFinished = devicesFinished
            self.failed = failed
            self.passed = passed
            self.peakMemory = peakMemory
            self.skipped = skipped
            self.total = total
            self.totalDeviceMinutes = totalDeviceMinutes
        }

        private enum CodingKeys: String, CodingKey {
            case devices
            case devicesFailed
            case devicesFinished
            case failed
            case passed
            case peakMemory
            case skipped
            case total
            case totalDeviceMinutes
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)

            devices = try container.decodeIfPresent(.devices)
            devicesFailed = try container.decodeIfPresent(.devicesFailed)
            devicesFinished = try container.decodeIfPresent(.devicesFinished)
            failed = try container.decodeIfPresent(.failed)
            passed = try container.decodeIfPresent(.passed)
            peakMemory = try container.decodeIfPresent(.peakMemory)
            skipped = try container.decodeIfPresent(.skipped)
            total = try container.decodeIfPresent(.total)
            totalDeviceMinutes = try container.decodeIfPresent(.totalDeviceMinutes)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)

            try container.encodeIfPresent(devices, forKey: .devices)
            try container.encodeIfPresent(devicesFailed, forKey: .devicesFailed)
            try container.encodeIfPresent(devicesFinished, forKey: .devicesFinished)
            try container.encodeIfPresent(failed, forKey: .failed)
            try container.encodeIfPresent(passed, forKey: .passed)
            try container.encodeIfPresent(peakMemory, forKey: .peakMemory)
            try container.encodeIfPresent(skipped, forKey: .skipped)
            try container.encodeIfPresent(total, forKey: .total)
            try container.encodeIfPresent(totalDeviceMinutes, forKey: .totalDeviceMinutes)
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? Stats else { return false }
          guard self.devices == object.devices else { return false }
          guard self.devicesFailed == object.devicesFailed else { return false }
          guard self.devicesFinished == object.devicesFinished else { return false }
          guard self.failed == object.failed else { return false }
          guard self.passed == object.passed else { return false }
          guard self.peakMemory == object.peakMemory else { return false }
          guard self.skipped == object.skipped else { return false }
          guard self.total == object.total else { return false }
          guard self.totalDeviceMinutes == object.totalDeviceMinutes else { return false }
          return true
        }

        public static func == (lhs: Stats, rhs: Stats) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(appVersion: String? = nil, date: String? = nil, description: String? = nil, id: ID? = nil, platform: String? = nil, resultStatus: String? = nil, runStatus: String? = nil, state: String? = nil, stats: Stats? = nil, status: String? = nil, testSeries: String? = nil, testType: String? = nil) {
        self.appVersion = appVersion
        self.date = date
        self.description = description
        self.id = id
        self.platform = platform
        self.resultStatus = resultStatus
        self.runStatus = runStatus
        self.state = state
        self.stats = stats
        self.status = status
        self.testSeries = testSeries
        self.testType = testType
    }

    private enum CodingKeys: String, CodingKey {
        case appVersion
        case date
        case description
        case id
        case platform
        case resultStatus
        case runStatus
        case state
        case stats
        case status
        case testSeries
        case testType
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        appVersion = try container.decodeIfPresent(.appVersion)
        date = try container.decodeIfPresent(.date)
        description = try container.decodeIfPresent(.description)
        id = try container.decodeIfPresent(.id)
        platform = try container.decodeIfPresent(.platform)
        resultStatus = try container.decodeIfPresent(.resultStatus)
        runStatus = try container.decodeIfPresent(.runStatus)
        state = try container.decodeIfPresent(.state)
        stats = try container.decodeIfPresent(.stats)
        status = try container.decodeIfPresent(.status)
        testSeries = try container.decodeIfPresent(.testSeries)
        testType = try container.decodeIfPresent(.testType)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(appVersion, forKey: .appVersion)
        try container.encodeIfPresent(date, forKey: .date)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(platform, forKey: .platform)
        try container.encodeIfPresent(resultStatus, forKey: .resultStatus)
        try container.encodeIfPresent(runStatus, forKey: .runStatus)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(stats, forKey: .stats)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(testSeries, forKey: .testSeries)
        try container.encodeIfPresent(testType, forKey: .testType)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? TestRun else { return false }
      guard self.appVersion == object.appVersion else { return false }
      guard self.date == object.date else { return false }
      guard self.description == object.description else { return false }
      guard self.id == object.id else { return false }
      guard self.platform == object.platform else { return false }
      guard self.resultStatus == object.resultStatus else { return false }
      guard self.runStatus == object.runStatus else { return false }
      guard self.state == object.state else { return false }
      guard self.stats == object.stats else { return false }
      guard self.status == object.status else { return false }
      guard self.testSeries == object.testSeries else { return false }
      guard self.testType == object.testType else { return false }
      return true
    }

    public static func == (lhs: TestRun, rhs: TestRun) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
