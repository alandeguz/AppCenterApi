//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Build configuration for Android projects */
public class AndroidBranchConfigurationProperties: APIModel {

    /** Whether to apply automatic signing or not */
    public var automaticSigning: Bool?

    /** The Android build variant to build */
    public var buildVariant: String?

    /** Path to the Gradle wrapper script */
    public var gradleWrapperPath: String?

    /** Whether it is the root module or not */
    public var isRoot: Bool?

    /** The key alias */
    public var keyAlias: String?

    /** The key password */
    public var keyPassword: String?

    /** The keystore encoded value */
    public var keystoreEncoded: String?

    /** The name of the keystore file */
    public var keystoreFilename: String?

    /** The password of the keystore */
    public var keystorePassword: String?

    /** The Gradle module to build */
    public var module: String?

    /** Whether to run lint checks during the build (default) */
    public var runLint: Bool?

    /** Whether to run unit tests during the build (default) */
    public var runTests: Bool?

    public init(automaticSigning: Bool? = nil, buildVariant: String? = nil, gradleWrapperPath: String? = nil, isRoot: Bool? = nil, keyAlias: String? = nil, keyPassword: String? = nil, keystoreEncoded: String? = nil, keystoreFilename: String? = nil, keystorePassword: String? = nil, module: String? = nil, runLint: Bool? = nil, runTests: Bool? = nil) {
        self.automaticSigning = automaticSigning
        self.buildVariant = buildVariant
        self.gradleWrapperPath = gradleWrapperPath
        self.isRoot = isRoot
        self.keyAlias = keyAlias
        self.keyPassword = keyPassword
        self.keystoreEncoded = keystoreEncoded
        self.keystoreFilename = keystoreFilename
        self.keystorePassword = keystorePassword
        self.module = module
        self.runLint = runLint
        self.runTests = runTests
    }

    private enum CodingKeys: String, CodingKey {
        case automaticSigning
        case buildVariant
        case gradleWrapperPath
        case isRoot
        case keyAlias
        case keyPassword
        case keystoreEncoded
        case keystoreFilename
        case keystorePassword
        case module
        case runLint
        case runTests
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        automaticSigning = try container.decodeIfPresent(.automaticSigning)
        buildVariant = try container.decodeIfPresent(.buildVariant)
        gradleWrapperPath = try container.decodeIfPresent(.gradleWrapperPath)
        isRoot = try container.decodeIfPresent(.isRoot)
        keyAlias = try container.decodeIfPresent(.keyAlias)
        keyPassword = try container.decodeIfPresent(.keyPassword)
        keystoreEncoded = try container.decodeIfPresent(.keystoreEncoded)
        keystoreFilename = try container.decodeIfPresent(.keystoreFilename)
        keystorePassword = try container.decodeIfPresent(.keystorePassword)
        module = try container.decodeIfPresent(.module)
        runLint = try container.decodeIfPresent(.runLint)
        runTests = try container.decodeIfPresent(.runTests)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(automaticSigning, forKey: .automaticSigning)
        try container.encodeIfPresent(buildVariant, forKey: .buildVariant)
        try container.encodeIfPresent(gradleWrapperPath, forKey: .gradleWrapperPath)
        try container.encodeIfPresent(isRoot, forKey: .isRoot)
        try container.encodeIfPresent(keyAlias, forKey: .keyAlias)
        try container.encodeIfPresent(keyPassword, forKey: .keyPassword)
        try container.encodeIfPresent(keystoreEncoded, forKey: .keystoreEncoded)
        try container.encodeIfPresent(keystoreFilename, forKey: .keystoreFilename)
        try container.encodeIfPresent(keystorePassword, forKey: .keystorePassword)
        try container.encodeIfPresent(module, forKey: .module)
        try container.encodeIfPresent(runLint, forKey: .runLint)
        try container.encodeIfPresent(runTests, forKey: .runTests)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? AndroidBranchConfigurationProperties else { return false }
      guard self.automaticSigning == object.automaticSigning else { return false }
      guard self.buildVariant == object.buildVariant else { return false }
      guard self.gradleWrapperPath == object.gradleWrapperPath else { return false }
      guard self.isRoot == object.isRoot else { return false }
      guard self.keyAlias == object.keyAlias else { return false }
      guard self.keyPassword == object.keyPassword else { return false }
      guard self.keystoreEncoded == object.keystoreEncoded else { return false }
      guard self.keystoreFilename == object.keystoreFilename else { return false }
      guard self.keystorePassword == object.keystorePassword else { return false }
      guard self.module == object.module else { return false }
      guard self.runLint == object.runLint else { return false }
      guard self.runTests == object.runTests else { return false }
      return true
    }

    public static func == (lhs: AndroidBranchConfigurationProperties, rhs: AndroidBranchConfigurationProperties) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
