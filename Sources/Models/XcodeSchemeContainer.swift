//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class XcodeSchemeContainer: APIModel {

    /** Path to project */
    public var path: String

    /** Project schemes */
    public var sharedSchemes: [SharedSchemes]

    /** Information regarding project app extensions, if present */
    public var appExtensionTargets: [AppExtensionTargets]?

    /** Path to Carthage file, if present */
    public var cartfilePath: String?

    /** Path to CocoaPods file, if present */
    public var podfilePath: String?

    /** Related projects paths for xcworkspace */
    public var workspaceProjectPaths: String?

    /** repo object Id of the pbxproject */
    public var xcodeProjectSha: String?

    public init(path: String, sharedSchemes: [SharedSchemes], appExtensionTargets: [AppExtensionTargets]? = nil, cartfilePath: String? = nil, podfilePath: String? = nil, workspaceProjectPaths: String? = nil, xcodeProjectSha: String? = nil) {
        self.path = path
        self.sharedSchemes = sharedSchemes
        self.appExtensionTargets = appExtensionTargets
        self.cartfilePath = cartfilePath
        self.podfilePath = podfilePath
        self.workspaceProjectPaths = workspaceProjectPaths
        self.xcodeProjectSha = xcodeProjectSha
    }

    private enum CodingKeys: String, CodingKey {
        case path
        case sharedSchemes
        case appExtensionTargets
        case cartfilePath
        case podfilePath
        case workspaceProjectPaths
        case xcodeProjectSha
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        path = try container.decode(.path)
        sharedSchemes = try container.decodeArray(.sharedSchemes)
        appExtensionTargets = try container.decodeArrayIfPresent(.appExtensionTargets)
        cartfilePath = try container.decodeIfPresent(.cartfilePath)
        podfilePath = try container.decodeIfPresent(.podfilePath)
        workspaceProjectPaths = try container.decodeIfPresent(.workspaceProjectPaths)
        xcodeProjectSha = try container.decodeIfPresent(.xcodeProjectSha)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(path, forKey: .path)
        try container.encode(sharedSchemes, forKey: .sharedSchemes)
        try container.encodeIfPresent(appExtensionTargets, forKey: .appExtensionTargets)
        try container.encodeIfPresent(cartfilePath, forKey: .cartfilePath)
        try container.encodeIfPresent(podfilePath, forKey: .podfilePath)
        try container.encodeIfPresent(workspaceProjectPaths, forKey: .workspaceProjectPaths)
        try container.encodeIfPresent(xcodeProjectSha, forKey: .xcodeProjectSha)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? XcodeSchemeContainer else { return false }
      guard self.path == object.path else { return false }
      guard self.sharedSchemes == object.sharedSchemes else { return false }
      guard self.appExtensionTargets == object.appExtensionTargets else { return false }
      guard self.cartfilePath == object.cartfilePath else { return false }
      guard self.podfilePath == object.podfilePath else { return false }
      guard self.workspaceProjectPaths == object.workspaceProjectPaths else { return false }
      guard self.xcodeProjectSha == object.xcodeProjectSha else { return false }
      return true
    }

    public static func == (lhs: XcodeSchemeContainer, rhs: XcodeSchemeContainer) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
