//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class ApiTokensGetResponse: APIModel {

    /** The scope for this token. */
    public enum Scope: String, Codable {
        case all = "all"
        case viewer = "viewer"

        public static let cases: [Scope] = [
          .all,
          .viewer,
        ]
    }

    /** The unique id (UUID) of the api token */
    public var id: String

    /** The creation time */
    public var createdAt: String

    /** The description of the token */
    public var description: String?

    /** The scope for this token. */
    public var scope: [Scope]?

    public init(id: String, createdAt: String, description: String? = nil, scope: [Scope]? = nil) {
        self.id = id
        self.createdAt = createdAt
        self.description = description
        self.scope = scope
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case createdAt = "created_at"
        case description
        case scope
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        id = try container.decode(.id)
        createdAt = try container.decode(.createdAt)
        description = try container.decodeIfPresent(.description)
        scope = try container.decodeArrayIfPresent(.scope)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(id, forKey: .id)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(scope, forKey: .scope)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? ApiTokensGetResponse else { return false }
      guard self.id == object.id else { return false }
      guard self.createdAt == object.createdAt else { return false }
      guard self.description == object.description else { return false }
      guard self.scope == object.scope else { return false }
      return true
    }

    public static func == (lhs: ApiTokensGetResponse, rhs: ApiTokensGetResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
