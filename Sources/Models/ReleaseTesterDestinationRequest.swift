//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class ReleaseTesterDestinationRequest: APIModel {

    /** Tester's email address */
    public var email: String

    /** Flag to mark the release for the provided destinations as mandatory */
    public var mandatoryUpdate: Bool?

    /** Flag to enable or disable notifications to testers */
    public var notifyTesters: Bool?

    public init(email: String, mandatoryUpdate: Bool? = nil, notifyTesters: Bool? = nil) {
        self.email = email
        self.mandatoryUpdate = mandatoryUpdate
        self.notifyTesters = notifyTesters
    }

    private enum CodingKeys: String, CodingKey {
        case email
        case mandatoryUpdate = "mandatory_update"
        case notifyTesters = "notify_testers"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        email = try container.decode(.email)
        mandatoryUpdate = try container.decodeIfPresent(.mandatoryUpdate)
        notifyTesters = try container.decodeIfPresent(.notifyTesters)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(email, forKey: .email)
        try container.encodeIfPresent(mandatoryUpdate, forKey: .mandatoryUpdate)
        try container.encodeIfPresent(notifyTesters, forKey: .notifyTesters)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? ReleaseTesterDestinationRequest else { return false }
      guard self.email == object.email else { return false }
      guard self.mandatoryUpdate == object.mandatoryUpdate else { return false }
      guard self.notifyTesters == object.notifyTesters else { return false }
      return true
    }

    public static func == (lhs: ReleaseTesterDestinationRequest, rhs: ReleaseTesterDestinationRequest) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
