//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class SubmitDsrOperationRequest: APIModel {

    public enum Request: String, Codable {
        case delete = "Delete"
        case purge = "Purge"
        case undoDelete = "UndoDelete"
        case export = "Export"

        public static let cases: [Request] = [
          .delete,
          .purge,
          .undoDelete,
          .export,
        ]
    }

    public var accountId: String?

    public var appId: String?

    /** The DSR operation ID provided by the GDPR coordinator. Used for tracking only. */
    public var operationId: String?

    public var request: Request?

    /** Request ID provided by the GDPR coordinator. Used for tracking. */
    public var requestId: String?

    public init(accountId: String? = nil, appId: String? = nil, operationId: String? = nil, request: Request? = nil, requestId: String? = nil) {
        self.accountId = accountId
        self.appId = appId
        self.operationId = operationId
        self.request = request
        self.requestId = requestId
    }

    private enum CodingKeys: String, CodingKey {
        case accountId
        case appId
        case operationId
        case request
        case requestId
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        accountId = try container.decodeIfPresent(.accountId)
        appId = try container.decodeIfPresent(.appId)
        operationId = try container.decodeIfPresent(.operationId)
        request = try container.decodeIfPresent(.request)
        requestId = try container.decodeIfPresent(.requestId)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(accountId, forKey: .accountId)
        try container.encodeIfPresent(appId, forKey: .appId)
        try container.encodeIfPresent(operationId, forKey: .operationId)
        try container.encodeIfPresent(request, forKey: .request)
        try container.encodeIfPresent(requestId, forKey: .requestId)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? SubmitDsrOperationRequest else { return false }
      guard self.accountId == object.accountId else { return false }
      guard self.appId == object.appId else { return false }
      guard self.operationId == object.operationId else { return false }
      guard self.request == object.request else { return false }
      guard self.requestId == object.requestId else { return false }
      return true
    }

    public static func == (lhs: SubmitDsrOperationRequest, rhs: SubmitDsrOperationRequest) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
