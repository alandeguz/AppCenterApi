//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class ScopeResponse: APIModel {

    public var appName: String?

    public var id: String?

    public var scope: String?

    public var url: String?

    public init(appName: String? = nil, id: String? = nil, scope: String? = nil, url: String? = nil) {
        self.appName = appName
        self.id = id
        self.scope = scope
        self.url = url
    }

    private enum CodingKeys: String, CodingKey {
        case appName
        case id
        case scope
        case url
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        appName = try container.decodeIfPresent(.appName)
        id = try container.decodeIfPresent(.id)
        scope = try container.decodeIfPresent(.scope)
        url = try container.decodeIfPresent(.url)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(appName, forKey: .appName)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(scope, forKey: .scope)
        try container.encodeIfPresent(url, forKey: .url)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? ScopeResponse else { return false }
      guard self.appName == object.appName else { return false }
      guard self.id == object.id else { return false }
      guard self.scope == object.scope else { return false }
      guard self.url == object.url else { return false }
      return true
    }

    public static func == (lhs: ScopeResponse, rhs: ScopeResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
