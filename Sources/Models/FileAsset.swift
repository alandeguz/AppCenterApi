//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class FileAsset: APIModel {

    public var id: String?

    public var location: String?

    public var token: String?

    public var uploadDomain: String?

    public var uploadWindowLocation: String?

    public var urlEncodedToken: String?

    public init(id: String? = nil, location: String? = nil, token: String? = nil, uploadDomain: String? = nil, uploadWindowLocation: String? = nil, urlEncodedToken: String? = nil) {
        self.id = id
        self.location = location
        self.token = token
        self.uploadDomain = uploadDomain
        self.uploadWindowLocation = uploadWindowLocation
        self.urlEncodedToken = urlEncodedToken
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case location
        case token
        case uploadDomain
        case uploadWindowLocation
        case urlEncodedToken
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        id = try container.decodeIfPresent(.id)
        location = try container.decodeIfPresent(.location)
        token = try container.decodeIfPresent(.token)
        uploadDomain = try container.decodeIfPresent(.uploadDomain)
        uploadWindowLocation = try container.decodeIfPresent(.uploadWindowLocation)
        urlEncodedToken = try container.decodeIfPresent(.urlEncodedToken)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(location, forKey: .location)
        try container.encodeIfPresent(token, forKey: .token)
        try container.encodeIfPresent(uploadDomain, forKey: .uploadDomain)
        try container.encodeIfPresent(uploadWindowLocation, forKey: .uploadWindowLocation)
        try container.encodeIfPresent(urlEncodedToken, forKey: .urlEncodedToken)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? FileAsset else { return false }
      guard self.id == object.id else { return false }
      guard self.location == object.location else { return false }
      guard self.token == object.token else { return false }
      guard self.uploadDomain == object.uploadDomain else { return false }
      guard self.uploadWindowLocation == object.uploadWindowLocation else { return false }
      guard self.urlEncodedToken == object.urlEncodedToken else { return false }
      return true
    }

    public static func == (lhs: FileAsset, rhs: FileAsset) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
