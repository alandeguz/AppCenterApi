//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Object returned in response to getting a bug tracker issue related to a crash group id */
public class BugTrackerIssueResult: APIModel {

    public var bugTrackerType: RepoTypeParameter?

    public var eventType: String?

    public var id: String?

    public var mobileCenterId: String?

    public var repoName: String?

    public var title: String?

    public var url: String?

    public init(bugTrackerType: RepoTypeParameter? = nil, eventType: String? = nil, id: String? = nil, mobileCenterId: String? = nil, repoName: String? = nil, title: String? = nil, url: String? = nil) {
        self.bugTrackerType = bugTrackerType
        self.eventType = eventType
        self.id = id
        self.mobileCenterId = mobileCenterId
        self.repoName = repoName
        self.title = title
        self.url = url
    }

    private enum CodingKeys: String, CodingKey {
        case bugTrackerType = "bug_tracker_type"
        case eventType = "event_type"
        case id
        case mobileCenterId = "mobile_center_id"
        case repoName = "repo_name"
        case title
        case url
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        bugTrackerType = try container.decodeIfPresent(.bugTrackerType)
        eventType = try container.decodeIfPresent(.eventType)
        id = try container.decodeIfPresent(.id)
        mobileCenterId = try container.decodeIfPresent(.mobileCenterId)
        repoName = try container.decodeIfPresent(.repoName)
        title = try container.decodeIfPresent(.title)
        url = try container.decodeIfPresent(.url)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(bugTrackerType, forKey: .bugTrackerType)
        try container.encodeIfPresent(eventType, forKey: .eventType)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(mobileCenterId, forKey: .mobileCenterId)
        try container.encodeIfPresent(repoName, forKey: .repoName)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(url, forKey: .url)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? BugTrackerIssueResult else { return false }
      guard self.bugTrackerType == object.bugTrackerType else { return false }
      guard self.eventType == object.eventType else { return false }
      guard self.id == object.id else { return false }
      guard self.mobileCenterId == object.mobileCenterId else { return false }
      guard self.repoName == object.repoName else { return false }
      guard self.title == object.title else { return false }
      guard self.url == object.url else { return false }
      return true
    }

    public static func == (lhs: BugTrackerIssueResult, rhs: BugTrackerIssueResult) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
