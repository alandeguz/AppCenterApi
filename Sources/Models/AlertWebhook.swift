//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Alerting webhook */
public class AlertWebhook: APIModel {

    /** Event types enabled for webhook */
    public enum EventTypes: String, Codable {
        case newCrashGroupCreated = "newCrashGroupCreated"
        case newAppReleased = "newAppReleased"

        public static let cases: [EventTypes] = [
          .newCrashGroupCreated,
          .newAppReleased,
        ]
    }

    /** display name of the webhook */
    public var name: String

    /** target url of the webhook */
    public var url: String

    /** Event types enabled for webhook */
    public var eventTypes: [EventTypes]

    /** Allows eanble/disable webhook */
    public var enabled: Bool?

    /** The unique id (UUID) of the webhook */
    public var id: String?

    public init(name: String, url: String, eventTypes: [EventTypes], enabled: Bool? = nil, id: String? = nil) {
        self.name = name
        self.url = url
        self.eventTypes = eventTypes
        self.enabled = enabled
        self.id = id
    }

    private enum CodingKeys: String, CodingKey {
        case name
        case url
        case eventTypes = "event_types"
        case enabled
        case id
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        name = try container.decode(.name)
        url = try container.decode(.url)
        eventTypes = try container.decodeArray(.eventTypes)
        enabled = try container.decodeIfPresent(.enabled)
        id = try container.decodeIfPresent(.id)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(name, forKey: .name)
        try container.encode(url, forKey: .url)
        try container.encode(eventTypes, forKey: .eventTypes)
        try container.encodeIfPresent(enabled, forKey: .enabled)
        try container.encodeIfPresent(id, forKey: .id)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? AlertWebhook else { return false }
      guard self.name == object.name else { return false }
      guard self.url == object.url else { return false }
      guard self.eventTypes == object.eventTypes else { return false }
      guard self.enabled == object.enabled else { return false }
      guard self.id == object.id else { return false }
      return true
    }

    public static func == (lhs: AlertWebhook, rhs: AlertWebhook) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
