//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class RepoInfo: APIModel {

    /** The repository url */
    public var repoURL: String

    /** The external user ID */
    public var externalUserId: String?

    public init(repoURL: String, externalUserId: String? = nil) {
        self.repoURL = repoURL
        self.externalUserId = externalUserId
    }

    private enum CodingKeys: String, CodingKey {
        case repoURL = "repo_url"
        case externalUserId = "external_user_id"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        repoURL = try container.decode(.repoURL)
        externalUserId = try container.decodeIfPresent(.externalUserId)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(repoURL, forKey: .repoURL)
        try container.encodeIfPresent(externalUserId, forKey: .externalUserId)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? RepoInfo else { return false }
      guard self.repoURL == object.repoURL else { return false }
      guard self.externalUserId == object.externalUserId else { return false }
      return true
    }

    public static func == (lhs: RepoInfo, rhs: RepoInfo) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
