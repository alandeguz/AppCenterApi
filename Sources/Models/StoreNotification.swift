//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class StoreNotification: APIModel {

    public var service: String?

    public var status: String?

    public var validUntil: Int?

    public init(service: String? = nil, status: String? = nil, validUntil: Int? = nil) {
        self.service = service
        self.status = status
        self.validUntil = validUntil
    }

    private enum CodingKeys: String, CodingKey {
        case service
        case status
        case validUntil = "valid_until"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        service = try container.decodeIfPresent(.service)
        status = try container.decodeIfPresent(.status)
        validUntil = try container.decodeIfPresent(.validUntil)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(service, forKey: .service)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(validUntil, forKey: .validUntil)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? StoreNotification else { return false }
      guard self.service == object.service else { return false }
      guard self.status == object.status else { return false }
      guard self.validUntil == object.validUntil else { return false }
      return true
    }

    public static func == (lhs: StoreNotification, rhs: StoreNotification) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
