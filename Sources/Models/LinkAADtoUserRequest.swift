//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class LinkAADtoUserRequest: APIModel {

    /** The role of the user to be added */
    public enum Role: String, Codable {
        case admin = "admin"
        case collaborator = "collaborator"
        case member = "member"

        public static let cases: [Role] = [
          .admin,
          .collaborator,
          .member,
        ]
    }

    /** An array of AAD tenant data needed to link the user to the tenants */
    public var aadTenantIds: [ID]

    /** The role of the user to be added */
    public var role: Role?

    public init(aadTenantIds: [ID], role: Role? = nil) {
        self.aadTenantIds = aadTenantIds
        self.role = role
    }

    private enum CodingKeys: String, CodingKey {
        case aadTenantIds = "aad_tenant_ids"
        case role
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        aadTenantIds = try container.decodeArray(.aadTenantIds)
        role = try container.decodeIfPresent(.role)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(aadTenantIds, forKey: .aadTenantIds)
        try container.encodeIfPresent(role, forKey: .role)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? LinkAADtoUserRequest else { return false }
      guard self.aadTenantIds == object.aadTenantIds else { return false }
      guard self.role == object.role else { return false }
      return true
    }

    public static func == (lhs: LinkAADtoUserRequest, rhs: LinkAADtoUserRequest) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
