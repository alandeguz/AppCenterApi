//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Audience definition. */
public class AudienceSummary: APIModel {

    /** Audience state. */
    public enum State: String, Codable {
        case calculating = "Calculating"
        case ready = "Ready"
        case disabled = "Disabled"

        public static let cases: [State] = [
          .calculating,
          .ready,
          .disabled,
        ]
    }

    /** Audience definition in OData format. */
    public var definition: String?

    /** Audience description. */
    public var description: String?

    /** Estimated audience size. */
    public var estimatedCount: Int?

    /** Audience name. */
    public var name: String?

    /** Audience state. */
    public var state: State?

    public init(definition: String? = nil, description: String? = nil, estimatedCount: Int? = nil, name: String? = nil, state: State? = nil) {
        self.definition = definition
        self.description = description
        self.estimatedCount = estimatedCount
        self.name = name
        self.state = state
    }

    private enum CodingKeys: String, CodingKey {
        case definition
        case description
        case estimatedCount = "estimated_count"
        case name
        case state
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        definition = try container.decodeIfPresent(.definition)
        description = try container.decodeIfPresent(.description)
        estimatedCount = try container.decodeIfPresent(.estimatedCount)
        name = try container.decodeIfPresent(.name)
        state = try container.decodeIfPresent(.state)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(definition, forKey: .definition)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(estimatedCount, forKey: .estimatedCount)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(state, forKey: .state)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? AudienceSummary else { return false }
      guard self.definition == object.definition else { return false }
      guard self.description == object.description else { return false }
      guard self.estimatedCount == object.estimatedCount else { return false }
      guard self.name == object.name else { return false }
      guard self.state == object.state else { return false }
      return true
    }

    public static func == (lhs: AudienceSummary, rhs: AudienceSummary) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
