//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class PatchReleaseUploadStatusResponse: APIModel {

    /** The current upload status. */
    public enum UploadStatus: String, Codable {
        case uploadStarted = "uploadStarted"
        case uploadFinished = "uploadFinished"
        case uploadCanceled = "uploadCanceled"
        case readyToBePublished = "readyToBePublished"
        case malwareDetected = "malwareDetected"
        case error = "error"

        public static let cases: [UploadStatus] = [
          .uploadStarted,
          .uploadFinished,
          .uploadCanceled,
          .readyToBePublished,
          .malwareDetected,
          .error,
        ]
    }

    /** The ID for the upload. */
    public var id: ID

    /** The current upload status. */
    public var uploadStatus: UploadStatus

    public init(id: ID, uploadStatus: UploadStatus) {
        self.id = id
        self.uploadStatus = uploadStatus
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case uploadStatus = "upload_status"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        id = try container.decode(.id)
        uploadStatus = try container.decode(.uploadStatus)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(id, forKey: .id)
        try container.encode(uploadStatus, forKey: .uploadStatus)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? PatchReleaseUploadStatusResponse else { return false }
      guard self.id == object.id else { return false }
      guard self.uploadStatus == object.uploadStatus else { return false }
      return true
    }

    public static func == (lhs: PatchReleaseUploadStatusResponse, rhs: PatchReleaseUploadStatusResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
