//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Set of toolsets available for app */
public class Toolsets: APIModel {

    /** A list of Node versions */
    public var node: [Node]?

    /** A list of Xamarin SDK bundles */
    public var xamarin: [Xamarin]?

    /** A list of Xcode versions */
    public var xcode: [Xcode]?

    public init(node: [Node]? = nil, xamarin: [Xamarin]? = nil, xcode: [Xcode]? = nil) {
        self.node = node
        self.xamarin = xamarin
        self.xcode = xcode
    }

    private enum CodingKeys: String, CodingKey {
        case node
        case xamarin
        case xcode
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        node = try container.decodeArrayIfPresent(.node)
        xamarin = try container.decodeArrayIfPresent(.xamarin)
        xcode = try container.decodeArrayIfPresent(.xcode)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(node, forKey: .node)
        try container.encodeIfPresent(xamarin, forKey: .xamarin)
        try container.encodeIfPresent(xcode, forKey: .xcode)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? Toolsets else { return false }
      guard self.node == object.node else { return false }
      guard self.xamarin == object.xamarin else { return false }
      guard self.xcode == object.xcode else { return false }
      return true
    }

    public static func == (lhs: Toolsets, rhs: Toolsets) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
