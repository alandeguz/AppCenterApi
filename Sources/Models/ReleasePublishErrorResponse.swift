//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** ReleasePublishErrorResponse */
public class ReleasePublishErrorResponse: APIModel {

    /** boolean property to tell if logs are available for download */
    public var isLogAvailable: Bool?

    /** error Details */
    public var message: String?

    public init(isLogAvailable: Bool? = nil, message: String? = nil) {
        self.isLogAvailable = isLogAvailable
        self.message = message
    }

    private enum CodingKeys: String, CodingKey {
        case isLogAvailable = "is_log_available"
        case message
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        isLogAvailable = try container.decodeIfPresent(.isLogAvailable)
        message = try container.decodeIfPresent(.message)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(isLogAvailable, forKey: .isLogAvailable)
        try container.encodeIfPresent(message, forKey: .message)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? ReleasePublishErrorResponse else { return false }
      guard self.isLogAvailable == object.isLogAvailable else { return false }
      guard self.message == object.message else { return false }
      return true
    }

    public static func == (lhs: ReleasePublishErrorResponse, rhs: ReleasePublishErrorResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
