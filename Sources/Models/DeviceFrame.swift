//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class DeviceFrame: APIModel {

    public var full: Full?

    public var grid: Grid?

    public class Full: APIModel {

        public var frameUrl: String?

        public var height: Double?

        public var screen: [Double]?

        public var width: Double?

        public init(frameUrl: String? = nil, height: Double? = nil, screen: [Double]? = nil, width: Double? = nil) {
            self.frameUrl = frameUrl
            self.height = height
            self.screen = screen
            self.width = width
        }

        private enum CodingKeys: String, CodingKey {
            case frameUrl
            case height
            case screen
            case width
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)

            frameUrl = try container.decodeIfPresent(.frameUrl)
            height = try container.decodeIfPresent(.height)
            screen = try container.decodeArrayIfPresent(.screen)
            width = try container.decodeIfPresent(.width)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)

            try container.encodeIfPresent(frameUrl, forKey: .frameUrl)
            try container.encodeIfPresent(height, forKey: .height)
            try container.encodeIfPresent(screen, forKey: .screen)
            try container.encodeIfPresent(width, forKey: .width)
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? Full else { return false }
          guard self.frameUrl == object.frameUrl else { return false }
          guard self.height == object.height else { return false }
          guard self.screen == object.screen else { return false }
          guard self.width == object.width else { return false }
          return true
        }

        public static func == (lhs: Full, rhs: Full) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public class Grid: APIModel {

        public var frameUrl: String?

        public var height: Double?

        public var screen: [Double]?

        public var width: Double?

        public init(frameUrl: String? = nil, height: Double? = nil, screen: [Double]? = nil, width: Double? = nil) {
            self.frameUrl = frameUrl
            self.height = height
            self.screen = screen
            self.width = width
        }

        private enum CodingKeys: String, CodingKey {
            case frameUrl
            case height
            case screen
            case width
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)

            frameUrl = try container.decodeIfPresent(.frameUrl)
            height = try container.decodeIfPresent(.height)
            screen = try container.decodeArrayIfPresent(.screen)
            width = try container.decodeIfPresent(.width)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)

            try container.encodeIfPresent(frameUrl, forKey: .frameUrl)
            try container.encodeIfPresent(height, forKey: .height)
            try container.encodeIfPresent(screen, forKey: .screen)
            try container.encodeIfPresent(width, forKey: .width)
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? Grid else { return false }
          guard self.frameUrl == object.frameUrl else { return false }
          guard self.height == object.height else { return false }
          guard self.screen == object.screen else { return false }
          guard self.width == object.width else { return false }
          return true
        }

        public static func == (lhs: Grid, rhs: Grid) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(full: Full? = nil, grid: Grid? = nil) {
        self.full = full
        self.grid = grid
    }

    private enum CodingKeys: String, CodingKey {
        case full
        case grid
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        full = try container.decodeIfPresent(.full)
        grid = try container.decodeIfPresent(.grid)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(full, forKey: .full)
        try container.encodeIfPresent(grid, forKey: .grid)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? DeviceFrame else { return false }
      guard self.full == object.full else { return false }
      guard self.grid == object.grid else { return false }
      return true
    }

    public static func == (lhs: DeviceFrame, rhs: DeviceFrame) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
