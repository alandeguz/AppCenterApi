//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Contains metadata about the build that produced the release being uploaded */
public class BuildInfo: APIModel {

    /** The branch name of the build producing the release */
    public var branchName: String?

    /** The commit hash of the build producing the release */
    public var commitHash: String?

    /** The commit message of the build producing the release */
    public var commitMessage: String?

    public init(branchName: String? = nil, commitHash: String? = nil, commitMessage: String? = nil) {
        self.branchName = branchName
        self.commitHash = commitHash
        self.commitMessage = commitMessage
    }

    private enum CodingKeys: String, CodingKey {
        case branchName = "branch_name"
        case commitHash = "commit_hash"
        case commitMessage = "commit_message"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        branchName = try container.decodeIfPresent(.branchName)
        commitHash = try container.decodeIfPresent(.commitHash)
        commitMessage = try container.decodeIfPresent(.commitMessage)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(branchName, forKey: .branchName)
        try container.encodeIfPresent(commitHash, forKey: .commitHash)
        try container.encodeIfPresent(commitMessage, forKey: .commitMessage)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? BuildInfo else { return false }
      guard self.branchName == object.branchName else { return false }
      guard self.commitHash == object.commitHash else { return false }
      guard self.commitMessage == object.commitMessage else { return false }
      return true
    }

    public static func == (lhs: BuildInfo, rhs: BuildInfo) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
