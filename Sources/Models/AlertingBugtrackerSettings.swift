//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Bugtracker specific settings */
public class AlertingBugtrackerSettings: APIModel {

    /** type of bugtracker */
    public var type: RepoTypeParameter

    public var ownerName: String

    public var callbackURL: String?

    public init(type: RepoTypeParameter, ownerName: String, callbackURL: String? = nil) {
        self.type = type
        self.ownerName = ownerName
        self.callbackURL = callbackURL
    }

    private enum CodingKeys: String, CodingKey {
        case type
        case ownerName = "owner_name"
        case callbackURL = "callback_url"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        type = try container.decode(.type)
        ownerName = try container.decode(.ownerName)
        callbackURL = try container.decodeIfPresent(.callbackURL)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(type, forKey: .type)
        try container.encode(ownerName, forKey: .ownerName)
        try container.encodeIfPresent(callbackURL, forKey: .callbackURL)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? AlertingBugtrackerSettings else { return false }
      guard self.type == object.type else { return false }
      guard self.ownerName == object.ownerName else { return false }
      guard self.callbackURL == object.callbackURL else { return false }
      return true
    }

    public static func == (lhs: AlertingBugtrackerSettings, rhs: AlertingBugtrackerSettings) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
