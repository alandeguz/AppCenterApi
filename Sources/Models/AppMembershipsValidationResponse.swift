//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class AppMembershipsValidationResponse: APIModel {

    public var appUsersWithMissingMemberships: [AppUsersWithMissingMemberships]?

    public var distributionGroupUsersWithMissingMemberships: [DistributionGroupUsersWithMissingMemberships]?

    public var excessAppMemberships: ExcessAppMemberships?

    public var organizationAdminsWithMissingMemberships: [OrganizationAdminsWithMissingMemberships]?

    public class ExcessAppMemberships: APIModel {

        public var appUsersMemberships: [AppUsersMemberships]?

        public var distributionGroupMemberships: [DistributionGroupMemberships]?

        public var organizationAdminMemberships: [OrganizationAdminMemberships]?

        public init(appUsersMemberships: [AppUsersMemberships]? = nil, distributionGroupMemberships: [DistributionGroupMemberships]? = nil, organizationAdminMemberships: [OrganizationAdminMemberships]? = nil) {
            self.appUsersMemberships = appUsersMemberships
            self.distributionGroupMemberships = distributionGroupMemberships
            self.organizationAdminMemberships = organizationAdminMemberships
        }

        private enum CodingKeys: String, CodingKey {
            case appUsersMemberships = "app_users_memberships"
            case distributionGroupMemberships = "distribution_group_memberships"
            case organizationAdminMemberships = "organization_admin_memberships"
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)

            appUsersMemberships = try container.decodeArrayIfPresent(.appUsersMemberships)
            distributionGroupMemberships = try container.decodeArrayIfPresent(.distributionGroupMemberships)
            organizationAdminMemberships = try container.decodeArrayIfPresent(.organizationAdminMemberships)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)

            try container.encodeIfPresent(appUsersMemberships, forKey: .appUsersMemberships)
            try container.encodeIfPresent(distributionGroupMemberships, forKey: .distributionGroupMemberships)
            try container.encodeIfPresent(organizationAdminMemberships, forKey: .organizationAdminMemberships)
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? ExcessAppMemberships else { return false }
          guard self.appUsersMemberships == object.appUsersMemberships else { return false }
          guard self.distributionGroupMemberships == object.distributionGroupMemberships else { return false }
          guard self.organizationAdminMemberships == object.organizationAdminMemberships else { return false }
          return true
        }

        public static func == (lhs: ExcessAppMemberships, rhs: ExcessAppMemberships) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(appUsersWithMissingMemberships: [AppUsersWithMissingMemberships]? = nil, distributionGroupUsersWithMissingMemberships: [DistributionGroupUsersWithMissingMemberships]? = nil, excessAppMemberships: ExcessAppMemberships? = nil, organizationAdminsWithMissingMemberships: [OrganizationAdminsWithMissingMemberships]? = nil) {
        self.appUsersWithMissingMemberships = appUsersWithMissingMemberships
        self.distributionGroupUsersWithMissingMemberships = distributionGroupUsersWithMissingMemberships
        self.excessAppMemberships = excessAppMemberships
        self.organizationAdminsWithMissingMemberships = organizationAdminsWithMissingMemberships
    }

    private enum CodingKeys: String, CodingKey {
        case appUsersWithMissingMemberships = "app_users_with_missing_memberships"
        case distributionGroupUsersWithMissingMemberships = "distribution_group_users_with_missing_memberships"
        case excessAppMemberships = "excess_app_memberships"
        case organizationAdminsWithMissingMemberships = "organization_admins_with_missing_memberships"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        appUsersWithMissingMemberships = try container.decodeArrayIfPresent(.appUsersWithMissingMemberships)
        distributionGroupUsersWithMissingMemberships = try container.decodeArrayIfPresent(.distributionGroupUsersWithMissingMemberships)
        excessAppMemberships = try container.decodeIfPresent(.excessAppMemberships)
        organizationAdminsWithMissingMemberships = try container.decodeArrayIfPresent(.organizationAdminsWithMissingMemberships)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(appUsersWithMissingMemberships, forKey: .appUsersWithMissingMemberships)
        try container.encodeIfPresent(distributionGroupUsersWithMissingMemberships, forKey: .distributionGroupUsersWithMissingMemberships)
        try container.encodeIfPresent(excessAppMemberships, forKey: .excessAppMemberships)
        try container.encodeIfPresent(organizationAdminsWithMissingMemberships, forKey: .organizationAdminsWithMissingMemberships)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? AppMembershipsValidationResponse else { return false }
      guard self.appUsersWithMissingMemberships == object.appUsersWithMissingMemberships else { return false }
      guard self.distributionGroupUsersWithMissingMemberships == object.distributionGroupUsersWithMissingMemberships else { return false }
      guard self.excessAppMemberships == object.excessAppMemberships else { return false }
      guard self.organizationAdminsWithMissingMemberships == object.organizationAdminsWithMissingMemberships else { return false }
      return true
    }

    public static func == (lhs: AppMembershipsValidationResponse, rhs: AppMembershipsValidationResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
