//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class IntuneStoreResponse: APIModel {

    public var appCategory: AppCategory?

    public var targetAudience: TargetAudience?

    public class AppCategory: APIModel {

        /** ID for the category. */
        public var id: String?

        /** display name for the app category */
        public var name: String?

        public init(id: String? = nil, name: String? = nil) {
            self.id = id
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case id
            case name
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)

            id = try container.decodeIfPresent(.id)
            name = try container.decodeIfPresent(.name)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)

            try container.encodeIfPresent(id, forKey: .id)
            try container.encodeIfPresent(name, forKey: .name)
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? AppCategory else { return false }
          guard self.id == object.id else { return false }
          guard self.name == object.name else { return false }
          return true
        }

        public static func == (lhs: AppCategory, rhs: AppCategory) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public class TargetAudience: APIModel {

        /** ID for the target audience/group. */
        public var id: String?

        /** display name for the target audience/group */
        public var name: String?

        public init(id: String? = nil, name: String? = nil) {
            self.id = id
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case id
            case name
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)

            id = try container.decodeIfPresent(.id)
            name = try container.decodeIfPresent(.name)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)

            try container.encodeIfPresent(id, forKey: .id)
            try container.encodeIfPresent(name, forKey: .name)
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? TargetAudience else { return false }
          guard self.id == object.id else { return false }
          guard self.name == object.name else { return false }
          return true
        }

        public static func == (lhs: TargetAudience, rhs: TargetAudience) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(appCategory: AppCategory? = nil, targetAudience: TargetAudience? = nil) {
        self.appCategory = appCategory
        self.targetAudience = targetAudience
    }

    private enum CodingKeys: String, CodingKey {
        case appCategory = "app_category"
        case targetAudience = "target_audience"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        appCategory = try container.decodeIfPresent(.appCategory)
        targetAudience = try container.decodeIfPresent(.targetAudience)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(appCategory, forKey: .appCategory)
        try container.encodeIfPresent(targetAudience, forKey: .targetAudience)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? IntuneStoreResponse else { return false }
      guard self.appCategory == object.appCategory else { return false }
      guard self.targetAudience == object.targetAudience else { return false }
      return true
    }

    public static func == (lhs: IntuneStoreResponse, rhs: IntuneStoreResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
