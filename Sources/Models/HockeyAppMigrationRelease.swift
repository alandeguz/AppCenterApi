//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** A single HockeyApp release to migrate to App Center */
public class HockeyAppMigrationRelease: APIModel {

    public var appsize: Int?

    public var buildURL: String?

    public var bundleIdentifier: String?

    public var createdAt: DateTime?

    public var deviceFamily: String?

    /** List of DistributionGroup IDs the release is distributed to */
    public var distributionGroupIds: [ID]?

    /** List of User IDs the release is distributed to */
    public var distributionUserIds: [ID]?

    public var id: Double?

    public var isExternalBuild: Bool?

    /** The languages supported by the release. Limited to 510 characters in a serialized array. */
    public var languages: [String]?

    public var mandatory: Bool?

    public var md5Fingerprint: String?

    public var minimumOsVersion: String?

    public var notes: String?

    /** Send out notifications to the destination groups and/or testers */
    public var notify: Bool?

    public var provisioningProfiles: [ProvisioningProfiles]?

    public var shortversion: String?

    /** The status of the release in HockeyApp. Maps to HockeyAppSchema.AppVersionStatus. Possible values: Deleted = -1, New = 0, Inactive = 1, Active = 2, Hidden = 3, SonomaActive = 4 */
    public var status: Int?

    /** For iOS apps, a dictionary of UUIDs for architectures (in format `{"armv7": "353df799-d450-3308-8492-928ecf1ebf53", "arm64": "e67c0e93-b6d6-3f5a-b3a7-68d2b215bf27"}`) */
    public var uuids: [String: ID]?

    public var version: String?

    public init(appsize: Int? = nil, buildURL: String? = nil, bundleIdentifier: String? = nil, createdAt: DateTime? = nil, deviceFamily: String? = nil, distributionGroupIds: [ID]? = nil, distributionUserIds: [ID]? = nil, id: Double? = nil, isExternalBuild: Bool? = nil, languages: [String]? = nil, mandatory: Bool? = nil, md5Fingerprint: String? = nil, minimumOsVersion: String? = nil, notes: String? = nil, notify: Bool? = nil, provisioningProfiles: [ProvisioningProfiles]? = nil, shortversion: String? = nil, status: Int? = nil, uuids: [String: ID]? = nil, version: String? = nil) {
        self.appsize = appsize
        self.buildURL = buildURL
        self.bundleIdentifier = bundleIdentifier
        self.createdAt = createdAt
        self.deviceFamily = deviceFamily
        self.distributionGroupIds = distributionGroupIds
        self.distributionUserIds = distributionUserIds
        self.id = id
        self.isExternalBuild = isExternalBuild
        self.languages = languages
        self.mandatory = mandatory
        self.md5Fingerprint = md5Fingerprint
        self.minimumOsVersion = minimumOsVersion
        self.notes = notes
        self.notify = notify
        self.provisioningProfiles = provisioningProfiles
        self.shortversion = shortversion
        self.status = status
        self.uuids = uuids
        self.version = version
    }

    private enum CodingKeys: String, CodingKey {
        case appsize
        case buildURL = "build_url"
        case bundleIdentifier = "bundle_identifier"
        case createdAt = "created_at"
        case deviceFamily = "device_family"
        case distributionGroupIds = "distribution_group_ids"
        case distributionUserIds = "distribution_user_ids"
        case id
        case isExternalBuild = "is_external_build"
        case languages
        case mandatory
        case md5Fingerprint = "md5_fingerprint"
        case minimumOsVersion = "minimum_os_version"
        case notes
        case notify
        case provisioningProfiles = "provisioning_profiles"
        case shortversion
        case status
        case uuids
        case version
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        appsize = try container.decodeIfPresent(.appsize)
        buildURL = try container.decodeIfPresent(.buildURL)
        bundleIdentifier = try container.decodeIfPresent(.bundleIdentifier)
        createdAt = try container.decodeIfPresent(.createdAt)
        deviceFamily = try container.decodeIfPresent(.deviceFamily)
        distributionGroupIds = try container.decodeArrayIfPresent(.distributionGroupIds)
        distributionUserIds = try container.decodeArrayIfPresent(.distributionUserIds)
        id = try container.decodeIfPresent(.id)
        isExternalBuild = try container.decodeIfPresent(.isExternalBuild)
        languages = try container.decodeArrayIfPresent(.languages)
        mandatory = try container.decodeIfPresent(.mandatory)
        md5Fingerprint = try container.decodeIfPresent(.md5Fingerprint)
        minimumOsVersion = try container.decodeIfPresent(.minimumOsVersion)
        notes = try container.decodeIfPresent(.notes)
        notify = try container.decodeIfPresent(.notify)
        provisioningProfiles = try container.decodeArrayIfPresent(.provisioningProfiles)
        shortversion = try container.decodeIfPresent(.shortversion)
        status = try container.decodeIfPresent(.status)
        uuids = try container.decodeIfPresent(.uuids)
        version = try container.decodeIfPresent(.version)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(appsize, forKey: .appsize)
        try container.encodeIfPresent(buildURL, forKey: .buildURL)
        try container.encodeIfPresent(bundleIdentifier, forKey: .bundleIdentifier)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(deviceFamily, forKey: .deviceFamily)
        try container.encodeIfPresent(distributionGroupIds, forKey: .distributionGroupIds)
        try container.encodeIfPresent(distributionUserIds, forKey: .distributionUserIds)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(isExternalBuild, forKey: .isExternalBuild)
        try container.encodeIfPresent(languages, forKey: .languages)
        try container.encodeIfPresent(mandatory, forKey: .mandatory)
        try container.encodeIfPresent(md5Fingerprint, forKey: .md5Fingerprint)
        try container.encodeIfPresent(minimumOsVersion, forKey: .minimumOsVersion)
        try container.encodeIfPresent(notes, forKey: .notes)
        try container.encodeIfPresent(notify, forKey: .notify)
        try container.encodeIfPresent(provisioningProfiles, forKey: .provisioningProfiles)
        try container.encodeIfPresent(shortversion, forKey: .shortversion)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(uuids, forKey: .uuids)
        try container.encodeIfPresent(version, forKey: .version)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? HockeyAppMigrationRelease else { return false }
      guard self.appsize == object.appsize else { return false }
      guard self.buildURL == object.buildURL else { return false }
      guard self.bundleIdentifier == object.bundleIdentifier else { return false }
      guard self.createdAt == object.createdAt else { return false }
      guard self.deviceFamily == object.deviceFamily else { return false }
      guard self.distributionGroupIds == object.distributionGroupIds else { return false }
      guard self.distributionUserIds == object.distributionUserIds else { return false }
      guard self.id == object.id else { return false }
      guard self.isExternalBuild == object.isExternalBuild else { return false }
      guard self.languages == object.languages else { return false }
      guard self.mandatory == object.mandatory else { return false }
      guard self.md5Fingerprint == object.md5Fingerprint else { return false }
      guard self.minimumOsVersion == object.minimumOsVersion else { return false }
      guard self.notes == object.notes else { return false }
      guard self.notify == object.notify else { return false }
      guard self.provisioningProfiles == object.provisioningProfiles else { return false }
      guard self.shortversion == object.shortversion else { return false }
      guard self.status == object.status else { return false }
      guard self.uuids == object.uuids else { return false }
      guard self.version == object.version else { return false }
      return true
    }

    public static func == (lhs: HockeyAppMigrationRelease, rhs: HockeyAppMigrationRelease) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
