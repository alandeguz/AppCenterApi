//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Apple notification certificate configuration result. */
public class NotificationConfigAppleResult: APIModel {

    /** Type of endpoint the certificate or token are associated with */
    public enum EndpointType: String, Codable {
        case production = "production"
        case sandbox = "sandbox"

        public static let cases: [EndpointType] = [
          .production,
          .sandbox,
        ]
    }

    /** Type of endpoint the certificate or token are associated with */
    public var endpointType: EndpointType

    /** Certificate expiration date. */
    public var certExpiration: DateTime

    /** Certificate file name */
    public var certFilename: String

    public init(endpointType: EndpointType, certExpiration: DateTime, certFilename: String) {
        self.endpointType = endpointType
        self.certExpiration = certExpiration
        self.certFilename = certFilename
    }

    private enum CodingKeys: String, CodingKey {
        case endpointType = "endpoint_type"
        case certExpiration = "cert_expiration"
        case certFilename = "cert_filename"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        endpointType = try container.decode(.endpointType)
        certExpiration = try container.decode(.certExpiration)
        certFilename = try container.decode(.certFilename)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(endpointType, forKey: .endpointType)
        try container.encode(certExpiration, forKey: .certExpiration)
        try container.encode(certFilename, forKey: .certFilename)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? NotificationConfigAppleResult else { return false }
      guard self.endpointType == object.endpointType else { return false }
      guard self.certExpiration == object.certExpiration else { return false }
      guard self.certFilename == object.certFilename else { return false }
      return true
    }

    public static func == (lhs: NotificationConfigAppleResult, rhs: NotificationConfigAppleResult) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
