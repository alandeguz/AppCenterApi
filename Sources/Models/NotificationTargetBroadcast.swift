//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Broadcast notification to all the devices */
public class NotificationTargetBroadcast: APIModel {

    /** Broadcast notification to all the devices */
    public enum `Type`: String, Codable {
        case audiencesTarget = "audiences_target"
        case devicesTarget = "devices_target"
        case userIdsTarget = "user_ids_target"
        case accountIdsTarget = "account_ids_target"
        case broadcastTarget = "broadcast_target"

        public static let cases: [`Type`] = [
          .audiencesTarget,
          .devicesTarget,
          .userIdsTarget,
          .accountIdsTarget,
          .broadcastTarget,
        ]
    }

    public var type: `Type`

    public init(type: `Type`) {
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case type
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        type = try container.decode(.type)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(type, forKey: .type)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? NotificationTargetBroadcast else { return false }
      guard self.type == object.type else { return false }
      return true
    }

    public static func == (lhs: NotificationTargetBroadcast, rhs: NotificationTargetBroadcast) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
