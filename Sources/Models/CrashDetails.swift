//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class CrashDetails: APIModel {

    /** Language code (example: en_US).
 */
    public var locale: String

    /** Screen size of the device in pixels (example: 640x480).
 */
    public var screenSize: String

    /** Whether the device where the crash occurred is rooted or jailbroken
 */
    public var rooted: Bool

    /** Application launch timestamp (example: 1985-04-12T23:20:50.52Z).
 */
    public var appStartTimestamp: DateTime?

    /** Carrier country code (for mobile devices).
 */
    public var carrierCountry: String?

    /** Carrier name (for mobile devices).
 */
    public var carrierName: String?

    /** OS build code (example: LMY47X).
 */
    public var osBuild: String?

    public init(locale: String, screenSize: String, rooted: Bool, appStartTimestamp: DateTime? = nil, carrierCountry: String? = nil, carrierName: String? = nil, osBuild: String? = nil) {
        self.locale = locale
        self.screenSize = screenSize
        self.rooted = rooted
        self.appStartTimestamp = appStartTimestamp
        self.carrierCountry = carrierCountry
        self.carrierName = carrierName
        self.osBuild = osBuild
    }

    private enum CodingKeys: String, CodingKey {
        case locale
        case screenSize = "screen_size"
        case rooted
        case appStartTimestamp = "app_start_timestamp"
        case carrierCountry = "carrier_country"
        case carrierName = "carrier_name"
        case osBuild = "os_build"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        locale = try container.decode(.locale)
        screenSize = try container.decode(.screenSize)
        rooted = try container.decode(.rooted)
        appStartTimestamp = try container.decodeIfPresent(.appStartTimestamp)
        carrierCountry = try container.decodeIfPresent(.carrierCountry)
        carrierName = try container.decodeIfPresent(.carrierName)
        osBuild = try container.decodeIfPresent(.osBuild)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(locale, forKey: .locale)
        try container.encode(screenSize, forKey: .screenSize)
        try container.encode(rooted, forKey: .rooted)
        try container.encodeIfPresent(appStartTimestamp, forKey: .appStartTimestamp)
        try container.encodeIfPresent(carrierCountry, forKey: .carrierCountry)
        try container.encodeIfPresent(carrierName, forKey: .carrierName)
        try container.encodeIfPresent(osBuild, forKey: .osBuild)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? CrashDetails else { return false }
      guard self.locale == object.locale else { return false }
      guard self.screenSize == object.screenSize else { return false }
      guard self.rooted == object.rooted else { return false }
      guard self.appStartTimestamp == object.appStartTimestamp else { return false }
      guard self.carrierCountry == object.carrierCountry else { return false }
      guard self.carrierName == object.carrierName else { return false }
      guard self.osBuild == object.osBuild else { return false }
      return true
    }

    public static func == (lhs: CrashDetails, rhs: CrashDetails) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
