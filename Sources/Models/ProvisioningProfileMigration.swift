//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Describes the migration schema for a provisioning profile defined in HockeyApp. */
public class ProvisioningProfileMigration: APIModel {

    /** The type of provisoning profile. */
    public enum `Type`: Int, Codable {
        case _0 = 0
        case _1 = 1
        case _2 = 2

        public static let cases: [`Type`] = [
          ._0,
          ._1,
          ._2,
        ]
    }

    /** The name of the provisioning profile. */
    public var name: String

    /** The bundle/application identifier. */
    public var bundleId: String

    /** The team identifier. */
    public var teamIdentifier: String

    /** The type of provisoning profile. */
    public var type: `Type`

    /** A boolean value that indicates whether the provisioning profile represents an app extension. */
    public var isAppex: Bool

    /** The provisioning profile's expiration date in RFC 3339 format, i.e. 2017-07-21T17:32:28Z. */
    public var expiredAt: DateTime?

    /** A list of UDIDs of provisioned devices. */
    public var udids: [String]?

    /** A provisioning profile URL that indicates where to download it from. */
    public var url: String?

    public init(name: String, bundleId: String, teamIdentifier: String, type: `Type`, isAppex: Bool, expiredAt: DateTime? = nil, udids: [String]? = nil, url: String? = nil) {
        self.name = name
        self.bundleId = bundleId
        self.teamIdentifier = teamIdentifier
        self.type = type
        self.isAppex = isAppex
        self.expiredAt = expiredAt
        self.udids = udids
        self.url = url
    }

    private enum CodingKeys: String, CodingKey {
        case name
        case bundleId = "bundle_id"
        case teamIdentifier = "team_identifier"
        case type
        case isAppex = "is_appex"
        case expiredAt = "expired_at"
        case udids
        case url
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        name = try container.decode(.name)
        bundleId = try container.decode(.bundleId)
        teamIdentifier = try container.decode(.teamIdentifier)
        type = try container.decode(.type)
        isAppex = try container.decode(.isAppex)
        expiredAt = try container.decodeIfPresent(.expiredAt)
        udids = try container.decodeArrayIfPresent(.udids)
        url = try container.decodeIfPresent(.url)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(name, forKey: .name)
        try container.encode(bundleId, forKey: .bundleId)
        try container.encode(teamIdentifier, forKey: .teamIdentifier)
        try container.encode(type, forKey: .type)
        try container.encode(isAppex, forKey: .isAppex)
        try container.encodeIfPresent(expiredAt, forKey: .expiredAt)
        try container.encodeIfPresent(udids, forKey: .udids)
        try container.encodeIfPresent(url, forKey: .url)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? ProvisioningProfileMigration else { return false }
      guard self.name == object.name else { return false }
      guard self.bundleId == object.bundleId else { return false }
      guard self.teamIdentifier == object.teamIdentifier else { return false }
      guard self.type == object.type else { return false }
      guard self.isAppex == object.isAppex else { return false }
      guard self.expiredAt == object.expiredAt else { return false }
      guard self.udids == object.udids else { return false }
      guard self.url == object.url else { return false }
      return true
    }

    public static func == (lhs: ProvisioningProfileMigration, rhs: ProvisioningProfileMigration) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
