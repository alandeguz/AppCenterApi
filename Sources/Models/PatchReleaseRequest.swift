//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class PatchReleaseRequest: APIModel {

    /** Destination Publish Id */
    public var destPublishId: String?

    /** contextId for failed error message */
    public var errorContextId: String?

    /** failure error details from store */
    public var errorDetails: String?

    /** request is for wrapping or not */
    public var isWrapperRequest: Bool?

    /** updated status of release */
    public var status: String?

    /** package url for wrapping request */
    public var wrapPackageURL: String?

    public init(destPublishId: String? = nil, errorContextId: String? = nil, errorDetails: String? = nil, isWrapperRequest: Bool? = nil, status: String? = nil, wrapPackageURL: String? = nil) {
        self.destPublishId = destPublishId
        self.errorContextId = errorContextId
        self.errorDetails = errorDetails
        self.isWrapperRequest = isWrapperRequest
        self.status = status
        self.wrapPackageURL = wrapPackageURL
    }

    private enum CodingKeys: String, CodingKey {
        case destPublishId = "dest_publish_id"
        case errorContextId = "error_contextId"
        case errorDetails = "error_details"
        case isWrapperRequest = "is_wrapper_request"
        case status
        case wrapPackageURL = "wrap_package_url"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        destPublishId = try container.decodeIfPresent(.destPublishId)
        errorContextId = try container.decodeIfPresent(.errorContextId)
        errorDetails = try container.decodeIfPresent(.errorDetails)
        isWrapperRequest = try container.decodeIfPresent(.isWrapperRequest)
        status = try container.decodeIfPresent(.status)
        wrapPackageURL = try container.decodeIfPresent(.wrapPackageURL)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(destPublishId, forKey: .destPublishId)
        try container.encodeIfPresent(errorContextId, forKey: .errorContextId)
        try container.encodeIfPresent(errorDetails, forKey: .errorDetails)
        try container.encodeIfPresent(isWrapperRequest, forKey: .isWrapperRequest)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(wrapPackageURL, forKey: .wrapPackageURL)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? PatchReleaseRequest else { return false }
      guard self.destPublishId == object.destPublishId else { return false }
      guard self.errorContextId == object.errorContextId else { return false }
      guard self.errorDetails == object.errorDetails else { return false }
      guard self.isWrapperRequest == object.isWrapperRequest else { return false }
      guard self.status == object.status else { return false }
      guard self.wrapPackageURL == object.wrapPackageURL else { return false }
      return true
    }

    public static func == (lhs: PatchReleaseRequest, rhs: PatchReleaseRequest) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
