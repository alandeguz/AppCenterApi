//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Physical device dimensions */
public class DeviceDimensions: APIModel {

    public var depth: [String: Any]?

    public var height: [String: Any]?

    public var width: [String: Any]?

    public init(depth: [String: Any]? = nil, height: [String: Any]? = nil, width: [String: Any]? = nil) {
        self.depth = depth
        self.height = height
        self.width = width
    }

    private enum CodingKeys: String, CodingKey {
        case depth
        case height
        case width
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        depth = try container.decodeAnyIfPresent(.depth)
        height = try container.decodeAnyIfPresent(.height)
        width = try container.decodeAnyIfPresent(.width)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeAnyIfPresent(depth, forKey: .depth)
        try container.encodeAnyIfPresent(height, forKey: .height)
        try container.encodeAnyIfPresent(width, forKey: .width)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? DeviceDimensions else { return false }
      guard NSDictionary(dictionary: self.depth ?? [:]).isEqual(to: object.depth ?? [:]) else { return false }
      guard NSDictionary(dictionary: self.height ?? [:]).isEqual(to: object.height ?? [:]) else { return false }
      guard NSDictionary(dictionary: self.width ?? [:]).isEqual(to: object.width ?? [:]) else { return false }
      return true
    }

    public static func == (lhs: DeviceDimensions, rhs: DeviceDimensions) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
