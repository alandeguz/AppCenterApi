//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** A request containing information for updating a release. */
public class PrivateReleaseUpdateRequest: APIModel {

    /** The store publishing status. */
    public enum PublishingStatus: String, Codable {
        case failed = "failed"
        case processing = "processing"
        case submitted = "submitted"
        case timeout = "timeout"

        public static let cases: [PublishingStatus] = [
          .failed,
          .processing,
          .submitted,
          .timeout,
        ]
    }

    /** The store publishing status. */
    public var publishingStatus: PublishingStatus?

    public init(publishingStatus: PublishingStatus? = nil) {
        self.publishingStatus = publishingStatus
    }

    private enum CodingKeys: String, CodingKey {
        case publishingStatus = "publishing_status"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        publishingStatus = try container.decodeIfPresent(.publishingStatus)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(publishingStatus, forKey: .publishingStatus)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? PrivateReleaseUpdateRequest else { return false }
      guard self.publishingStatus == object.publishingStatus else { return false }
      return true
    }

    public static func == (lhs: PrivateReleaseUpdateRequest, rhs: PrivateReleaseUpdateRequest) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
