//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Build configuration for Xamarin projects */
public class XamarinBranchConfigurationProperties: APIModel {

    public var args: String?

    public var configuration: String?

    public var isSimBuild: Bool?

    public var monoVersion: String?

    public var p12File: String?

    public var p12Pwd: String?

    public var provProfile: String?

    public var sdkBundle: String?

    public var slnPath: String?

    /** Symlink of the SDK Bundle and Mono installation.
The build will use the associated Mono bundled with related Xamarin SDK. If both symlink and monoVersion or sdkBundle are passed, the symlink is taking precedence. If non-existing symlink is passed, the current stable Mono version will be configured for building.
 */
    public var symlink: String?

    public init(args: String? = nil, configuration: String? = nil, isSimBuild: Bool? = nil, monoVersion: String? = nil, p12File: String? = nil, p12Pwd: String? = nil, provProfile: String? = nil, sdkBundle: String? = nil, slnPath: String? = nil, symlink: String? = nil) {
        self.args = args
        self.configuration = configuration
        self.isSimBuild = isSimBuild
        self.monoVersion = monoVersion
        self.p12File = p12File
        self.p12Pwd = p12Pwd
        self.provProfile = provProfile
        self.sdkBundle = sdkBundle
        self.slnPath = slnPath
        self.symlink = symlink
    }

    private enum CodingKeys: String, CodingKey {
        case args
        case configuration
        case isSimBuild
        case monoVersion
        case p12File
        case p12Pwd
        case provProfile
        case sdkBundle
        case slnPath
        case symlink
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        args = try container.decodeIfPresent(.args)
        configuration = try container.decodeIfPresent(.configuration)
        isSimBuild = try container.decodeIfPresent(.isSimBuild)
        monoVersion = try container.decodeIfPresent(.monoVersion)
        p12File = try container.decodeIfPresent(.p12File)
        p12Pwd = try container.decodeIfPresent(.p12Pwd)
        provProfile = try container.decodeIfPresent(.provProfile)
        sdkBundle = try container.decodeIfPresent(.sdkBundle)
        slnPath = try container.decodeIfPresent(.slnPath)
        symlink = try container.decodeIfPresent(.symlink)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(args, forKey: .args)
        try container.encodeIfPresent(configuration, forKey: .configuration)
        try container.encodeIfPresent(isSimBuild, forKey: .isSimBuild)
        try container.encodeIfPresent(monoVersion, forKey: .monoVersion)
        try container.encodeIfPresent(p12File, forKey: .p12File)
        try container.encodeIfPresent(p12Pwd, forKey: .p12Pwd)
        try container.encodeIfPresent(provProfile, forKey: .provProfile)
        try container.encodeIfPresent(sdkBundle, forKey: .sdkBundle)
        try container.encodeIfPresent(slnPath, forKey: .slnPath)
        try container.encodeIfPresent(symlink, forKey: .symlink)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? XamarinBranchConfigurationProperties else { return false }
      guard self.args == object.args else { return false }
      guard self.configuration == object.configuration else { return false }
      guard self.isSimBuild == object.isSimBuild else { return false }
      guard self.monoVersion == object.monoVersion else { return false }
      guard self.p12File == object.p12File else { return false }
      guard self.p12Pwd == object.p12Pwd else { return false }
      guard self.provProfile == object.provProfile else { return false }
      guard self.sdkBundle == object.sdkBundle else { return false }
      guard self.slnPath == object.slnPath else { return false }
      guard self.symlink == object.symlink else { return false }
      return true
    }

    public static func == (lhs: XamarinBranchConfigurationProperties, rhs: XamarinBranchConfigurationProperties) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
