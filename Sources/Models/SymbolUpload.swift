//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** A single symbol upload entity */
public class SymbolUpload: APIModel {

    /** The current status for the symbol upload */
    public enum Status: String, Codable {
        case created = "created"
        case committed = "committed"
        case aborted = "aborted"
        case processing = "processing"
        case indexed = "indexed"
        case failed = "failed"

        public static let cases: [Status] = [
          .created,
          .committed,
          .aborted,
          .processing,
          .indexed,
          .failed,
        ]
    }

    /** The type of the symbol for the current symbol upload */
    public enum SymbolType: String, Codable {
        case apple = "Apple"
        case javaScript = "JavaScript"
        case breakpad = "Breakpad"
        case androidProguard = "AndroidProguard"
        case uwp = "UWP"

        public static let cases: [SymbolType] = [
          .apple,
          .javaScript,
          .breakpad,
          .androidProguard,
          .uwp,
        ]
    }

    /** The origin of the symbol upload */
    public enum Origin: String, Codable {
        case user = "User"
        case system = "System"

        public static let cases: [Origin] = [
          .user,
          .system,
        ]
    }

    /** The id for the current symbol upload */
    public var symbolUploadId: String

    /** The application that this symbol upload belongs to */
    public var appId: String

    /** The current status for the symbol upload */
    public var status: Status

    /** The type of the symbol for the current symbol upload */
    public var symbolType: SymbolType

    /** The file name for the symbol upload */
    public var fileName: String?

    /** The size of the file in Mebibytes. This may be 0 until the status is indexed */
    public var fileSize: Double?

    /** The origin of the symbol upload */
    public var origin: Origin?

    /** The symbols found in the upload. This may be empty until the status is indexed */
    public var symbolsUploaded: [SymbolsUploaded]?

    /** When the symbol upload was committed, or last transaction time if not committed */
    public var timestamp: DateTime?

    /** User information of the one who intitiated the symbol upload */
    public var user: User?

    /** A single symbol upload entity */
    public class User: APIModel {

        /** The full name of the user. Might for example be first and last name */
        public var displayName: String?

        /** The email of the user */
        public var email: String?

        public init(displayName: String? = nil, email: String? = nil) {
            self.displayName = displayName
            self.email = email
        }

        private enum CodingKeys: String, CodingKey {
            case displayName = "display_name"
            case email
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)

            displayName = try container.decodeIfPresent(.displayName)
            email = try container.decodeIfPresent(.email)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)

            try container.encodeIfPresent(displayName, forKey: .displayName)
            try container.encodeIfPresent(email, forKey: .email)
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? User else { return false }
          guard self.displayName == object.displayName else { return false }
          guard self.email == object.email else { return false }
          return true
        }

        public static func == (lhs: User, rhs: User) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(symbolUploadId: String, appId: String, status: Status, symbolType: SymbolType, fileName: String? = nil, fileSize: Double? = nil, origin: Origin? = nil, symbolsUploaded: [SymbolsUploaded]? = nil, timestamp: DateTime? = nil, user: User? = nil) {
        self.symbolUploadId = symbolUploadId
        self.appId = appId
        self.status = status
        self.symbolType = symbolType
        self.fileName = fileName
        self.fileSize = fileSize
        self.origin = origin
        self.symbolsUploaded = symbolsUploaded
        self.timestamp = timestamp
        self.user = user
    }

    private enum CodingKeys: String, CodingKey {
        case symbolUploadId = "symbol_upload_id"
        case appId = "app_id"
        case status
        case symbolType = "symbol_type"
        case fileName = "file_name"
        case fileSize = "file_size"
        case origin
        case symbolsUploaded = "symbols_uploaded"
        case timestamp
        case user
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        symbolUploadId = try container.decode(.symbolUploadId)
        appId = try container.decode(.appId)
        status = try container.decode(.status)
        symbolType = try container.decode(.symbolType)
        fileName = try container.decodeIfPresent(.fileName)
        fileSize = try container.decodeIfPresent(.fileSize)
        origin = try container.decodeIfPresent(.origin)
        symbolsUploaded = try container.decodeArrayIfPresent(.symbolsUploaded)
        timestamp = try container.decodeIfPresent(.timestamp)
        user = try container.decodeIfPresent(.user)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(symbolUploadId, forKey: .symbolUploadId)
        try container.encode(appId, forKey: .appId)
        try container.encode(status, forKey: .status)
        try container.encode(symbolType, forKey: .symbolType)
        try container.encodeIfPresent(fileName, forKey: .fileName)
        try container.encodeIfPresent(fileSize, forKey: .fileSize)
        try container.encodeIfPresent(origin, forKey: .origin)
        try container.encodeIfPresent(symbolsUploaded, forKey: .symbolsUploaded)
        try container.encodeIfPresent(timestamp, forKey: .timestamp)
        try container.encodeIfPresent(user, forKey: .user)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? SymbolUpload else { return false }
      guard self.symbolUploadId == object.symbolUploadId else { return false }
      guard self.appId == object.appId else { return false }
      guard self.status == object.status else { return false }
      guard self.symbolType == object.symbolType else { return false }
      guard self.fileName == object.fileName else { return false }
      guard self.fileSize == object.fileSize else { return false }
      guard self.origin == object.origin else { return false }
      guard self.symbolsUploaded == object.symbolsUploaded else { return false }
      guard self.timestamp == object.timestamp else { return false }
      guard self.user == object.user else { return false }
      return true
    }

    public static func == (lhs: SymbolUpload, rhs: SymbolUpload) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
