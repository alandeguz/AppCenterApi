//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class ExternalUserRequest: APIModel {

    /** The email address of the user */
    public var email: String

    /** The token of the app invitation which lead to signup */
    public var appInvitation: String?

    /** The avatar URL of the user */
    public var avatarURL: String?

    /** The full name of the user. Might for example be first and last name */
    public var displayName: String?

    /** The unique name that is used to identify the user. If no explicit value is given, a default will be auto-generated from the `display_name` value */
    public var name: String?

    /** The token of the organization invitation which lead to signup */
    public var organizationInvitation: String?

    /** The token of the test invitation which lead to signup */
    public var testerInvitation: String?

    public init(email: String, appInvitation: String? = nil, avatarURL: String? = nil, displayName: String? = nil, name: String? = nil, organizationInvitation: String? = nil, testerInvitation: String? = nil) {
        self.email = email
        self.appInvitation = appInvitation
        self.avatarURL = avatarURL
        self.displayName = displayName
        self.name = name
        self.organizationInvitation = organizationInvitation
        self.testerInvitation = testerInvitation
    }

    private enum CodingKeys: String, CodingKey {
        case email
        case appInvitation = "app_invitation"
        case avatarURL = "avatar_url"
        case displayName = "display_name"
        case name
        case organizationInvitation = "organization_invitation"
        case testerInvitation = "tester_invitation"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        email = try container.decode(.email)
        appInvitation = try container.decodeIfPresent(.appInvitation)
        avatarURL = try container.decodeIfPresent(.avatarURL)
        displayName = try container.decodeIfPresent(.displayName)
        name = try container.decodeIfPresent(.name)
        organizationInvitation = try container.decodeIfPresent(.organizationInvitation)
        testerInvitation = try container.decodeIfPresent(.testerInvitation)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(email, forKey: .email)
        try container.encodeIfPresent(appInvitation, forKey: .appInvitation)
        try container.encodeIfPresent(avatarURL, forKey: .avatarURL)
        try container.encodeIfPresent(displayName, forKey: .displayName)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(organizationInvitation, forKey: .organizationInvitation)
        try container.encodeIfPresent(testerInvitation, forKey: .testerInvitation)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? ExternalUserRequest else { return false }
      guard self.email == object.email else { return false }
      guard self.appInvitation == object.appInvitation else { return false }
      guard self.avatarURL == object.avatarURL else { return false }
      guard self.displayName == object.displayName else { return false }
      guard self.name == object.name else { return false }
      guard self.organizationInvitation == object.organizationInvitation else { return false }
      guard self.testerInvitation == object.testerInvitation else { return false }
      return true
    }

    public static func == (lhs: ExternalUserRequest, rhs: ExternalUserRequest) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
