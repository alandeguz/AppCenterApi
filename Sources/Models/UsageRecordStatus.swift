//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Status of the usage record creation */
public class UsageRecordStatus: APIModel {

    /** Is the age of the most recent Build service usage record within expected limits */
    public var expectedLatestBuildExists: Bool?

    /** Is the age of the most recent Test service usage record within expected limits */
    public var expectedLatestTestExists: Bool?

    /** The time of the most recent Build service usage record */
    public var latestBuildUsageRecordTime: String?

    /** The time of the most recent Test service usage record */
    public var latestTestUsageRecordTime: String?

    public init(expectedLatestBuildExists: Bool? = nil, expectedLatestTestExists: Bool? = nil, latestBuildUsageRecordTime: String? = nil, latestTestUsageRecordTime: String? = nil) {
        self.expectedLatestBuildExists = expectedLatestBuildExists
        self.expectedLatestTestExists = expectedLatestTestExists
        self.latestBuildUsageRecordTime = latestBuildUsageRecordTime
        self.latestTestUsageRecordTime = latestTestUsageRecordTime
    }

    private enum CodingKeys: String, CodingKey {
        case expectedLatestBuildExists
        case expectedLatestTestExists
        case latestBuildUsageRecordTime
        case latestTestUsageRecordTime
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        expectedLatestBuildExists = try container.decodeIfPresent(.expectedLatestBuildExists)
        expectedLatestTestExists = try container.decodeIfPresent(.expectedLatestTestExists)
        latestBuildUsageRecordTime = try container.decodeIfPresent(.latestBuildUsageRecordTime)
        latestTestUsageRecordTime = try container.decodeIfPresent(.latestTestUsageRecordTime)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(expectedLatestBuildExists, forKey: .expectedLatestBuildExists)
        try container.encodeIfPresent(expectedLatestTestExists, forKey: .expectedLatestTestExists)
        try container.encodeIfPresent(latestBuildUsageRecordTime, forKey: .latestBuildUsageRecordTime)
        try container.encodeIfPresent(latestTestUsageRecordTime, forKey: .latestTestUsageRecordTime)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? UsageRecordStatus else { return false }
      guard self.expectedLatestBuildExists == object.expectedLatestBuildExists else { return false }
      guard self.expectedLatestTestExists == object.expectedLatestTestExists else { return false }
      guard self.latestBuildUsageRecordTime == object.latestBuildUsageRecordTime else { return false }
      guard self.latestTestUsageRecordTime == object.latestTestUsageRecordTime else { return false }
      return true
    }

    public static func == (lhs: UsageRecordStatus, rhs: UsageRecordStatus) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
