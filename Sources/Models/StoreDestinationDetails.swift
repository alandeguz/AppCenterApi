//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class StoreDestinationDetails: APIModel {

    /** type of store. */
    public enum StoreType: String, Codable {
        case intune = "intune"

        public static let cases: [StoreType] = [
          .intune,
        ]
    }

    /** app id of application. */
    public var appId: String?

    /** destination ID identifying a unique id in distribution store. */
    public var destPublishId: String?

    /** type of store. */
    public var storeType: StoreType?

    public init(appId: String? = nil, destPublishId: String? = nil, storeType: StoreType? = nil) {
        self.appId = appId
        self.destPublishId = destPublishId
        self.storeType = storeType
    }

    private enum CodingKeys: String, CodingKey {
        case appId
        case destPublishId = "dest_publish_id"
        case storeType = "store_type"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        appId = try container.decodeIfPresent(.appId)
        destPublishId = try container.decodeIfPresent(.destPublishId)
        storeType = try container.decodeIfPresent(.storeType)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(appId, forKey: .appId)
        try container.encodeIfPresent(destPublishId, forKey: .destPublishId)
        try container.encodeIfPresent(storeType, forKey: .storeType)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? StoreDestinationDetails else { return false }
      guard self.appId == object.appId else { return false }
      guard self.destPublishId == object.destPublishId else { return false }
      guard self.storeType == object.storeType else { return false }
      return true
    }

    public static func == (lhs: StoreDestinationDetails, rhs: StoreDestinationDetails) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
