//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Number of pipelines */
public class BuildConcurrencyResponse: APIModel {

    /** The number of pipelines committed, which can be equal or greater than the number from the billing plan */
    public var committedQuantity: Double?

    /** The number of pipelines set by the billing plan */
    public var quantity: Double?

    public init(committedQuantity: Double? = nil, quantity: Double? = nil) {
        self.committedQuantity = committedQuantity
        self.quantity = quantity
    }

    private enum CodingKeys: String, CodingKey {
        case committedQuantity = "committed_quantity"
        case quantity
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        committedQuantity = try container.decodeIfPresent(.committedQuantity)
        quantity = try container.decodeIfPresent(.quantity)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(committedQuantity, forKey: .committedQuantity)
        try container.encodeIfPresent(quantity, forKey: .quantity)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? BuildConcurrencyResponse else { return false }
      guard self.committedQuantity == object.committedQuantity else { return false }
      guard self.quantity == object.quantity else { return false }
      return true
    }

    public static func == (lhs: BuildConcurrencyResponse, rhs: BuildConcurrencyResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
