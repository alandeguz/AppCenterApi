//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** missing symbol */
public class V2MissingSymbol: APIModel {

    /** symbol status */
    public enum Status: String, Codable {
        case missing = "missing"
        case ignored = "ignored"
        case available = "available"

        public static let cases: [Status] = [
          .missing,
          .ignored,
          .available,
        ]
    }

    /** symbol id */
    public var symbolId: String

    /** symbol name */
    public var name: String

    /** symbol status */
    public var status: Status

    /** symbol plarform */
    public var platform: String?

    public init(symbolId: String, name: String, status: Status, platform: String? = nil) {
        self.symbolId = symbolId
        self.name = name
        self.status = status
        self.platform = platform
    }

    private enum CodingKeys: String, CodingKey {
        case symbolId = "symbol_id"
        case name
        case status
        case platform
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        symbolId = try container.decode(.symbolId)
        name = try container.decode(.name)
        status = try container.decode(.status)
        platform = try container.decodeIfPresent(.platform)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(symbolId, forKey: .symbolId)
        try container.encode(name, forKey: .name)
        try container.encode(status, forKey: .status)
        try container.encodeIfPresent(platform, forKey: .platform)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? V2MissingSymbol else { return false }
      guard self.symbolId == object.symbolId else { return false }
      guard self.name == object.name else { return false }
      guard self.status == object.status else { return false }
      guard self.platform == object.platform else { return false }
      return true
    }

    public static func == (lhs: V2MissingSymbol, rhs: V2MissingSymbol) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
