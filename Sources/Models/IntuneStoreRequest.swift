//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class IntuneStoreRequest: APIModel {

    public var appCategory: AppCategory?

    public var secretJson: SecretJson?

    public var targetAudience: TargetAudience?

    /** tenant id of the intune store */
    public var tenantId: String?

    public class AppCategory: APIModel {

        /** display name for the app category */
        public var name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)

            name = try container.decodeIfPresent(.name)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)

            try container.encodeIfPresent(name, forKey: .name)
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? AppCategory else { return false }
          guard self.name == object.name else { return false }
          return true
        }

        public static func == (lhs: AppCategory, rhs: AppCategory) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public class SecretJson: APIModel {

        /** the id token of user */
        public var idToken: String?

        /** the refresh token for user */
        public var refreshToken: String?

        /** the expiry of refresh token */
        public var refreshTokenExpiry: String?

        public init(idToken: String? = nil, refreshToken: String? = nil, refreshTokenExpiry: String? = nil) {
            self.idToken = idToken
            self.refreshToken = refreshToken
            self.refreshTokenExpiry = refreshTokenExpiry
        }

        private enum CodingKeys: String, CodingKey {
            case idToken = "id_token"
            case refreshToken = "refresh_token"
            case refreshTokenExpiry = "refresh_token_expiry"
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)

            idToken = try container.decodeIfPresent(.idToken)
            refreshToken = try container.decodeIfPresent(.refreshToken)
            refreshTokenExpiry = try container.decodeIfPresent(.refreshTokenExpiry)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)

            try container.encodeIfPresent(idToken, forKey: .idToken)
            try container.encodeIfPresent(refreshToken, forKey: .refreshToken)
            try container.encodeIfPresent(refreshTokenExpiry, forKey: .refreshTokenExpiry)
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? SecretJson else { return false }
          guard self.idToken == object.idToken else { return false }
          guard self.refreshToken == object.refreshToken else { return false }
          guard self.refreshTokenExpiry == object.refreshTokenExpiry else { return false }
          return true
        }

        public static func == (lhs: SecretJson, rhs: SecretJson) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public class TargetAudience: APIModel {

        /** display name for the target audience/group */
        public var name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)

            name = try container.decodeIfPresent(.name)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)

            try container.encodeIfPresent(name, forKey: .name)
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? TargetAudience else { return false }
          guard self.name == object.name else { return false }
          return true
        }

        public static func == (lhs: TargetAudience, rhs: TargetAudience) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(appCategory: AppCategory? = nil, secretJson: SecretJson? = nil, targetAudience: TargetAudience? = nil, tenantId: String? = nil) {
        self.appCategory = appCategory
        self.secretJson = secretJson
        self.targetAudience = targetAudience
        self.tenantId = tenantId
    }

    private enum CodingKeys: String, CodingKey {
        case appCategory = "app_category"
        case secretJson = "secret_json"
        case targetAudience = "target_audience"
        case tenantId = "tenant_id"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        appCategory = try container.decodeIfPresent(.appCategory)
        secretJson = try container.decodeIfPresent(.secretJson)
        targetAudience = try container.decodeIfPresent(.targetAudience)
        tenantId = try container.decodeIfPresent(.tenantId)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(appCategory, forKey: .appCategory)
        try container.encodeIfPresent(secretJson, forKey: .secretJson)
        try container.encodeIfPresent(targetAudience, forKey: .targetAudience)
        try container.encodeIfPresent(tenantId, forKey: .tenantId)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? IntuneStoreRequest else { return false }
      guard self.appCategory == object.appCategory else { return false }
      guard self.secretJson == object.secretJson else { return false }
      guard self.targetAudience == object.targetAudience else { return false }
      guard self.tenantId == object.tenantId else { return false }
      return true
    }

    public static func == (lhs: IntuneStoreRequest, rhs: IntuneStoreRequest) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
