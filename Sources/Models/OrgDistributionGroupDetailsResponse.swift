//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class OrgDistributionGroupDetailsResponse: APIModel {

    /** The creation origin of this distribution group */
    public enum Origin: String, Codable {
        case appcenter = "appcenter"
        case hockeyapp = "hockeyapp"

        public static let cases: [Origin] = [
          .appcenter,
          .hockeyapp,
        ]
    }

    /** The unique ID of the distribution group */
    public var id: ID

    /** The name of the distribution group used in URLs */
    public var name: String

    /** The creation origin of this distribution group */
    public var origin: Origin

    /** Whether the distribution group is public */
    public var isPublic: Bool

    /** The name of the distribution group */
    public var displayName: String?

    public init(id: ID, name: String, origin: Origin, isPublic: Bool, displayName: String? = nil) {
        self.id = id
        self.name = name
        self.origin = origin
        self.isPublic = isPublic
        self.displayName = displayName
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case name
        case origin
        case isPublic = "is_public"
        case displayName = "display_name"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        id = try container.decode(.id)
        name = try container.decode(.name)
        origin = try container.decode(.origin)
        isPublic = try container.decode(.isPublic)
        displayName = try container.decodeIfPresent(.displayName)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(id, forKey: .id)
        try container.encode(name, forKey: .name)
        try container.encode(origin, forKey: .origin)
        try container.encode(isPublic, forKey: .isPublic)
        try container.encodeIfPresent(displayName, forKey: .displayName)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? OrgDistributionGroupDetailsResponse else { return false }
      guard self.id == object.id else { return false }
      guard self.name == object.name else { return false }
      guard self.origin == object.origin else { return false }
      guard self.isPublic == object.isPublic else { return false }
      guard self.displayName == object.displayName else { return false }
      return true
    }

    public static func == (lhs: OrgDistributionGroupDetailsResponse, rhs: OrgDistributionGroupDetailsResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
