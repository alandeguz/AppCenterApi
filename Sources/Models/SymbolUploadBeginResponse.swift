//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** A response containing information pertaining to starting a symbol upload process */
public class SymbolUploadBeginResponse: APIModel {

    /** The id for the current upload */
    public var symbolUploadId: String

    /** The URL where the client needs to upload the symbol blob to */
    public var uploadURL: String

    /** Describes how long the upload_url is valid */
    public var expirationDate: DateTime

    public init(symbolUploadId: String, uploadURL: String, expirationDate: DateTime) {
        self.symbolUploadId = symbolUploadId
        self.uploadURL = uploadURL
        self.expirationDate = expirationDate
    }

    private enum CodingKeys: String, CodingKey {
        case symbolUploadId = "symbol_upload_id"
        case uploadURL = "upload_url"
        case expirationDate = "expiration_date"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        symbolUploadId = try container.decode(.symbolUploadId)
        uploadURL = try container.decode(.uploadURL)
        expirationDate = try container.decode(.expirationDate)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(symbolUploadId, forKey: .symbolUploadId)
        try container.encode(uploadURL, forKey: .uploadURL)
        try container.encode(expirationDate, forKey: .expirationDate)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? SymbolUploadBeginResponse else { return false }
      guard self.symbolUploadId == object.symbolUploadId else { return false }
      guard self.uploadURL == object.uploadURL else { return false }
      guard self.expirationDate == object.expirationDate else { return false }
      return true
    }

    public static func == (lhs: SymbolUploadBeginResponse, rhs: SymbolUploadBeginResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
