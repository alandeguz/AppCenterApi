//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Response for updating a release */
public class ReleaseUpdateResponse: APIModel {

    public var destinations: [Destinations]?

    public var enabled: Bool?

    public var mandatoryUpdate: Bool?

    public var provisioningStatusURL: String?

    public var releaseNotes: String?

    public init(destinations: [Destinations]? = nil, enabled: Bool? = nil, mandatoryUpdate: Bool? = nil, provisioningStatusURL: String? = nil, releaseNotes: String? = nil) {
        self.destinations = destinations
        self.enabled = enabled
        self.mandatoryUpdate = mandatoryUpdate
        self.provisioningStatusURL = provisioningStatusURL
        self.releaseNotes = releaseNotes
    }

    private enum CodingKeys: String, CodingKey {
        case destinations
        case enabled
        case mandatoryUpdate = "mandatory_update"
        case provisioningStatusURL = "provisioning_status_url"
        case releaseNotes = "release_notes"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        destinations = try container.decodeArrayIfPresent(.destinations)
        enabled = try container.decodeIfPresent(.enabled)
        mandatoryUpdate = try container.decodeIfPresent(.mandatoryUpdate)
        provisioningStatusURL = try container.decodeIfPresent(.provisioningStatusURL)
        releaseNotes = try container.decodeIfPresent(.releaseNotes)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(destinations, forKey: .destinations)
        try container.encodeIfPresent(enabled, forKey: .enabled)
        try container.encodeIfPresent(mandatoryUpdate, forKey: .mandatoryUpdate)
        try container.encodeIfPresent(provisioningStatusURL, forKey: .provisioningStatusURL)
        try container.encodeIfPresent(releaseNotes, forKey: .releaseNotes)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? ReleaseUpdateResponse else { return false }
      guard self.destinations == object.destinations else { return false }
      guard self.enabled == object.enabled else { return false }
      guard self.mandatoryUpdate == object.mandatoryUpdate else { return false }
      guard self.provisioningStatusURL == object.provisioningStatusURL else { return false }
      guard self.releaseNotes == object.releaseNotes else { return false }
      return true
    }

    public static func == (lhs: ReleaseUpdateResponse, rhs: ReleaseUpdateResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
