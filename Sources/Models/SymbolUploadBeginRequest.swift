//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** A request containing information pertaining to starting a symbol upload process */
public class SymbolUploadBeginRequest: APIModel {

    /** The type of the symbol for the current symbol upload */
    public enum SymbolType: String, Codable {
        case apple = "Apple"
        case javaScript = "JavaScript"
        case breakpad = "Breakpad"
        case androidProguard = "AndroidProguard"
        case uwp = "UWP"

        public static let cases: [SymbolType] = [
          .apple,
          .javaScript,
          .breakpad,
          .androidProguard,
          .uwp,
        ]
    }

    /** The type of the symbol for the current symbol upload */
    public var symbolType: SymbolType

    /** The build number. Optional for Apple. Required for Android. */
    public var build: String?

    /** The callback URL that the client can optionally provide to get status updates for the current symbol upload */
    public var clientCallback: String?

    /** The file name for the symbol upload */
    public var fileName: String?

    /** The version number. Optional for Apple. Required for Android. */
    public var version: String?

    public init(symbolType: SymbolType, build: String? = nil, clientCallback: String? = nil, fileName: String? = nil, version: String? = nil) {
        self.symbolType = symbolType
        self.build = build
        self.clientCallback = clientCallback
        self.fileName = fileName
        self.version = version
    }

    private enum CodingKeys: String, CodingKey {
        case symbolType = "symbol_type"
        case build
        case clientCallback = "client_callback"
        case fileName = "file_name"
        case version
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        symbolType = try container.decode(.symbolType)
        build = try container.decodeIfPresent(.build)
        clientCallback = try container.decodeIfPresent(.clientCallback)
        fileName = try container.decodeIfPresent(.fileName)
        version = try container.decodeIfPresent(.version)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(symbolType, forKey: .symbolType)
        try container.encodeIfPresent(build, forKey: .build)
        try container.encodeIfPresent(clientCallback, forKey: .clientCallback)
        try container.encodeIfPresent(fileName, forKey: .fileName)
        try container.encodeIfPresent(version, forKey: .version)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? SymbolUploadBeginRequest else { return false }
      guard self.symbolType == object.symbolType else { return false }
      guard self.build == object.build else { return false }
      guard self.clientCallback == object.clientCallback else { return false }
      guard self.fileName == object.fileName else { return false }
      guard self.version == object.version else { return false }
      return true
    }

    public static func == (lhs: SymbolUploadBeginRequest, rhs: SymbolUploadBeginRequest) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
