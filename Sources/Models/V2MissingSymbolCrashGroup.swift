//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** missing symbol crash group object */
public class V2MissingSymbolCrashGroup: APIModel {

    /** group status */
    public enum Status: String, Codable {
        case active = "active"
        case pending = "pending"
        case closed = "closed"

        public static let cases: [Status] = [
          .active,
          .pending,
          .closed,
        ]
    }

    /** id of the symbol group */
    public var symbolGroupId: String

    /** application id */
    public var appId: String

    /** application version */
    public var appVer: String

    /** application build */
    public var appBuild: String

    /** last update date for the group */
    public var lastModified: DateTime

    /** list of missing symbols */
    public var missingSymbols: [MissingSymbols]

    /** group status */
    public var status: Status

    /** number of crashes that belong to this group */
    public var crashCount: Int?

    /** number of errors that belong to this group */
    public var errorCount: Int?

    public init(symbolGroupId: String, appId: String, appVer: String, appBuild: String, lastModified: DateTime, missingSymbols: [MissingSymbols], status: Status, crashCount: Int? = nil, errorCount: Int? = nil) {
        self.symbolGroupId = symbolGroupId
        self.appId = appId
        self.appVer = appVer
        self.appBuild = appBuild
        self.lastModified = lastModified
        self.missingSymbols = missingSymbols
        self.status = status
        self.crashCount = crashCount
        self.errorCount = errorCount
    }

    private enum CodingKeys: String, CodingKey {
        case symbolGroupId = "symbol_group_id"
        case appId = "app_id"
        case appVer = "app_ver"
        case appBuild = "app_build"
        case lastModified = "last_modified"
        case missingSymbols = "missing_symbols"
        case status
        case crashCount = "crash_count"
        case errorCount = "error_count"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        symbolGroupId = try container.decode(.symbolGroupId)
        appId = try container.decode(.appId)
        appVer = try container.decode(.appVer)
        appBuild = try container.decode(.appBuild)
        lastModified = try container.decode(.lastModified)
        missingSymbols = try container.decodeArray(.missingSymbols)
        status = try container.decode(.status)
        crashCount = try container.decodeIfPresent(.crashCount)
        errorCount = try container.decodeIfPresent(.errorCount)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(symbolGroupId, forKey: .symbolGroupId)
        try container.encode(appId, forKey: .appId)
        try container.encode(appVer, forKey: .appVer)
        try container.encode(appBuild, forKey: .appBuild)
        try container.encode(lastModified, forKey: .lastModified)
        try container.encode(missingSymbols, forKey: .missingSymbols)
        try container.encode(status, forKey: .status)
        try container.encodeIfPresent(crashCount, forKey: .crashCount)
        try container.encodeIfPresent(errorCount, forKey: .errorCount)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? V2MissingSymbolCrashGroup else { return false }
      guard self.symbolGroupId == object.symbolGroupId else { return false }
      guard self.appId == object.appId else { return false }
      guard self.appVer == object.appVer else { return false }
      guard self.appBuild == object.appBuild else { return false }
      guard self.lastModified == object.lastModified else { return false }
      guard self.missingSymbols == object.missingSymbols else { return false }
      guard self.status == object.status else { return false }
      guard self.crashCount == object.crashCount else { return false }
      guard self.errorCount == object.errorCount else { return false }
      return true
    }

    public static func == (lhs: V2MissingSymbolCrashGroup, rhs: V2MissingSymbolCrashGroup) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
