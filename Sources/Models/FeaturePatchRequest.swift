//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class FeaturePatchRequest: APIModel {

    /** The friendly name of the feature */
    public var description: String?

    /** The full (friendly) name of the feature. */
    public var displayName: String?

    /** The state of the feature */
    public var state: Int?

    public init(description: String? = nil, displayName: String? = nil, state: Int? = nil) {
        self.description = description
        self.displayName = displayName
        self.state = state
    }

    private enum CodingKeys: String, CodingKey {
        case description
        case displayName = "display_name"
        case state
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        description = try container.decodeIfPresent(.description)
        displayName = try container.decodeIfPresent(.displayName)
        state = try container.decodeIfPresent(.state)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(displayName, forKey: .displayName)
        try container.encodeIfPresent(state, forKey: .state)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? FeaturePatchRequest else { return false }
      guard self.description == object.description else { return false }
      guard self.displayName == object.displayName else { return false }
      guard self.state == object.state else { return false }
      return true
    }

    public static func == (lhs: FeaturePatchRequest, rhs: FeaturePatchRequest) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
