//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Hash, type, path and byte range of a file that is required in test run */
public class TestCloudFileHashDeprecated: APIModel {

    /** Type of the file */
    public enum FileType: String, Codable {
        case dsymFile = "dsym-file"
        case appFile = "app-file"
        case testFile = "test-file"

        public static let cases: [FileType] = [
          .dsymFile,
          .appFile,
          .testFile,
        ]
    }

    /** Type of the file */
    public var fileType: FileType

    /** SHA256 hash of the file */
    public var checksum: String

    /** Relative path of the file */
    public var relativePath: String

    /** Range of bytes required to verify ownership of the file */
    public var byteRange: String?

    public init(fileType: FileType, checksum: String, relativePath: String, byteRange: String? = nil) {
        self.fileType = fileType
        self.checksum = checksum
        self.relativePath = relativePath
        self.byteRange = byteRange
    }

    private enum CodingKeys: String, CodingKey {
        case fileType = "file_type"
        case checksum
        case relativePath = "relative_path"
        case byteRange = "byte_range"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        fileType = try container.decode(.fileType)
        checksum = try container.decode(.checksum)
        relativePath = try container.decode(.relativePath)
        byteRange = try container.decodeIfPresent(.byteRange)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(fileType, forKey: .fileType)
        try container.encode(checksum, forKey: .checksum)
        try container.encode(relativePath, forKey: .relativePath)
        try container.encodeIfPresent(byteRange, forKey: .byteRange)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? TestCloudFileHashDeprecated else { return false }
      guard self.fileType == object.fileType else { return false }
      guard self.checksum == object.checksum else { return false }
      guard self.relativePath == object.relativePath else { return false }
      guard self.byteRange == object.byteRange else { return false }
      return true
    }

    public static func == (lhs: TestCloudFileHashDeprecated, rhs: TestCloudFileHashDeprecated) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
