//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class XcodeScheme: APIModel {

    /** Scheme name */
    public var name: String

    /** Does scheme have a test action? */
    public var hasTestAction: Bool

    /** Build configuration set in Archive action */
    public var archiveConfiguration: String?

    public var archiveProject: ArchiveProject?

    public class ArchiveProject: APIModel {

        /** The Id of the target to archive */
        public var archiveTargetId: String

        /** The project to archive container name */
        public var projectName: String

        /** Full path of the target project */
        public var projectPath: String?

        public init(archiveTargetId: String, projectName: String, projectPath: String? = nil) {
            self.archiveTargetId = archiveTargetId
            self.projectName = projectName
            self.projectPath = projectPath
        }

        private enum CodingKeys: String, CodingKey {
            case archiveTargetId
            case projectName
            case projectPath
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)

            archiveTargetId = try container.decode(.archiveTargetId)
            projectName = try container.decode(.projectName)
            projectPath = try container.decodeIfPresent(.projectPath)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)

            try container.encode(archiveTargetId, forKey: .archiveTargetId)
            try container.encode(projectName, forKey: .projectName)
            try container.encodeIfPresent(projectPath, forKey: .projectPath)
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? ArchiveProject else { return false }
          guard self.archiveTargetId == object.archiveTargetId else { return false }
          guard self.projectName == object.projectName else { return false }
          guard self.projectPath == object.projectPath else { return false }
          return true
        }

        public static func == (lhs: ArchiveProject, rhs: ArchiveProject) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(name: String, hasTestAction: Bool, archiveConfiguration: String? = nil, archiveProject: ArchiveProject? = nil) {
        self.name = name
        self.hasTestAction = hasTestAction
        self.archiveConfiguration = archiveConfiguration
        self.archiveProject = archiveProject
    }

    private enum CodingKeys: String, CodingKey {
        case name
        case hasTestAction
        case archiveConfiguration
        case archiveProject
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        name = try container.decode(.name)
        hasTestAction = try container.decode(.hasTestAction)
        archiveConfiguration = try container.decodeIfPresent(.archiveConfiguration)
        archiveProject = try container.decodeIfPresent(.archiveProject)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(name, forKey: .name)
        try container.encode(hasTestAction, forKey: .hasTestAction)
        try container.encodeIfPresent(archiveConfiguration, forKey: .archiveConfiguration)
        try container.encodeIfPresent(archiveProject, forKey: .archiveProject)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? XcodeScheme else { return false }
      guard self.name == object.name else { return false }
      guard self.hasTestAction == object.hasTestAction else { return false }
      guard self.archiveConfiguration == object.archiveConfiguration else { return false }
      guard self.archiveProject == object.archiveProject else { return false }
      return true
    }

    public static func == (lhs: XcodeScheme, rhs: XcodeScheme) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
