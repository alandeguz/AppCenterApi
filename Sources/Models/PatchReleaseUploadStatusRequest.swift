//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class PatchReleaseUploadStatusRequest: APIModel {

    /** The new status of the release upload */
    public enum UploadStatus: String, Codable {
        case uploadFinished = "uploadFinished"
        case uploadCanceled = "uploadCanceled"

        public static let cases: [UploadStatus] = [
          .uploadFinished,
          .uploadCanceled,
        ]
    }

    /** The new status of the release upload */
    public var uploadStatus: UploadStatus

    public init(uploadStatus: UploadStatus) {
        self.uploadStatus = uploadStatus
    }

    private enum CodingKeys: String, CodingKey {
        case uploadStatus = "upload_status"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        uploadStatus = try container.decode(.uploadStatus)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(uploadStatus, forKey: .uploadStatus)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? PatchReleaseUploadStatusRequest else { return false }
      guard self.uploadStatus == object.uploadStatus else { return false }
      return true
    }

    public static func == (lhs: PatchReleaseUploadStatusRequest, rhs: PatchReleaseUploadStatusRequest) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
