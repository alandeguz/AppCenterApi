//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class DistributionRequest: APIModel {

    /** Array of objects {id:string, type:string} with "id" being the distribution group ID, store ID, or tester email, and "type" being "group", "store", or "tester" */
    public var destinations: [Destinations]?

    public var mandatoryUpdate: Bool?

    public var notifyTesters: Bool?

    /** The release notes */
    public var releaseNotes: String?

    public init(destinations: [Destinations]? = nil, mandatoryUpdate: Bool? = nil, notifyTesters: Bool? = nil, releaseNotes: String? = nil) {
        self.destinations = destinations
        self.mandatoryUpdate = mandatoryUpdate
        self.notifyTesters = notifyTesters
        self.releaseNotes = releaseNotes
    }

    private enum CodingKeys: String, CodingKey {
        case destinations
        case mandatoryUpdate
        case notifyTesters
        case releaseNotes
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        destinations = try container.decodeArrayIfPresent(.destinations)
        mandatoryUpdate = try container.decodeIfPresent(.mandatoryUpdate)
        notifyTesters = try container.decodeIfPresent(.notifyTesters)
        releaseNotes = try container.decodeIfPresent(.releaseNotes)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(destinations, forKey: .destinations)
        try container.encodeIfPresent(mandatoryUpdate, forKey: .mandatoryUpdate)
        try container.encodeIfPresent(notifyTesters, forKey: .notifyTesters)
        try container.encodeIfPresent(releaseNotes, forKey: .releaseNotes)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? DistributionRequest else { return false }
      guard self.destinations == object.destinations else { return false }
      guard self.mandatoryUpdate == object.mandatoryUpdate else { return false }
      guard self.notifyTesters == object.notifyTesters else { return false }
      guard self.releaseNotes == object.releaseNotes else { return false }
      return true
    }

    public static func == (lhs: DistributionRequest, rhs: DistributionRequest) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
