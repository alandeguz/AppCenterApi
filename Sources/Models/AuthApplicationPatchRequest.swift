//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class AuthApplicationPatchRequest: APIModel {

    public enum Provider: String, Codable {
        case aadb2c = "AADB2C"
        case auth0 = "Auth0"
        case firebase = "Firebase"
        case aad = "AAD"

        public static let cases: [Provider] = [
          .aadb2c,
          .auth0,
          .firebase,
          .aad,
        ]
    }

    public var id: String?

    public var policyId: String?

    public var provider: Provider?

    public var scopeId: ID?

    public var scopeUrl: String?

    public init(id: String? = nil, policyId: String? = nil, provider: Provider? = nil, scopeId: ID? = nil, scopeUrl: String? = nil) {
        self.id = id
        self.policyId = policyId
        self.provider = provider
        self.scopeId = scopeId
        self.scopeUrl = scopeUrl
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case policyId
        case provider
        case scopeId
        case scopeUrl
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        id = try container.decodeIfPresent(.id)
        policyId = try container.decodeIfPresent(.policyId)
        provider = try container.decodeIfPresent(.provider)
        scopeId = try container.decodeIfPresent(.scopeId)
        scopeUrl = try container.decodeIfPresent(.scopeUrl)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(policyId, forKey: .policyId)
        try container.encodeIfPresent(provider, forKey: .provider)
        try container.encodeIfPresent(scopeId, forKey: .scopeId)
        try container.encodeIfPresent(scopeUrl, forKey: .scopeUrl)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? AuthApplicationPatchRequest else { return false }
      guard self.id == object.id else { return false }
      guard self.policyId == object.policyId else { return false }
      guard self.provider == object.provider else { return false }
      guard self.scopeId == object.scopeId else { return false }
      guard self.scopeUrl == object.scopeUrl else { return false }
      return true
    }

    public static func == (lhs: AuthApplicationPatchRequest, rhs: AuthApplicationPatchRequest) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
