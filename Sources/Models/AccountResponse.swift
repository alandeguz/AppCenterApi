//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class AccountResponse: APIModel {

    /** The creation origin of this account */
    public enum Origin: String, Codable {
        case appcenter = "appcenter"
        case hockeyapp = "hockeyapp"

        public static let cases: [Origin] = [
          .appcenter,
          .hockeyapp,
        ]
    }

    /** The type of this account */
    public enum `Type`: String, Codable {
        case user = "user"
        case org = "org"

        public static let cases: [`Type`] = [
          .user,
          .org,
        ]
    }

    /** The internal unique id (UUID) of the account. */
    public var id: ID

    /** The display name of the account */
    public var displayName: String

    /** The slug name of the account */
    public var name: String

    /** The creation origin of this account */
    public var origin: Origin

    /** The type of this account */
    public var type: `Type`

    /** The account's email. For org that value might be empty. */
    public var email: String?

    public init(id: ID, displayName: String, name: String, origin: Origin, type: `Type`, email: String? = nil) {
        self.id = id
        self.displayName = displayName
        self.name = name
        self.origin = origin
        self.type = type
        self.email = email
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case displayName = "display_name"
        case name
        case origin
        case type
        case email
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        id = try container.decode(.id)
        displayName = try container.decode(.displayName)
        name = try container.decode(.name)
        origin = try container.decode(.origin)
        type = try container.decode(.type)
        email = try container.decodeIfPresent(.email)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(id, forKey: .id)
        try container.encode(displayName, forKey: .displayName)
        try container.encode(name, forKey: .name)
        try container.encode(origin, forKey: .origin)
        try container.encode(type, forKey: .type)
        try container.encodeIfPresent(email, forKey: .email)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? AccountResponse else { return false }
      guard self.id == object.id else { return false }
      guard self.displayName == object.displayName else { return false }
      guard self.name == object.name else { return false }
      guard self.origin == object.origin else { return false }
      guard self.type == object.type else { return false }
      guard self.email == object.email else { return false }
      return true
    }

    public static func == (lhs: AccountResponse, rhs: AccountResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
