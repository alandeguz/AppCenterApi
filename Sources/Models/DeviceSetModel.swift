//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class DeviceSetModel: APIModel {

    public var formFactor: String?

    public var manufacturer: String?

    public var name: String?

    public var releaseDate: String?

    public init(formFactor: String? = nil, manufacturer: String? = nil, name: String? = nil, releaseDate: String? = nil) {
        self.formFactor = formFactor
        self.manufacturer = manufacturer
        self.name = name
        self.releaseDate = releaseDate
    }

    private enum CodingKeys: String, CodingKey {
        case formFactor
        case manufacturer
        case name
        case releaseDate
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        formFactor = try container.decodeIfPresent(.formFactor)
        manufacturer = try container.decodeIfPresent(.manufacturer)
        name = try container.decodeIfPresent(.name)
        releaseDate = try container.decodeIfPresent(.releaseDate)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(formFactor, forKey: .formFactor)
        try container.encodeIfPresent(manufacturer, forKey: .manufacturer)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(releaseDate, forKey: .releaseDate)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? DeviceSetModel else { return false }
      guard self.formFactor == object.formFactor else { return false }
      guard self.manufacturer == object.manufacturer else { return false }
      guard self.name == object.name else { return false }
      guard self.releaseDate == object.releaseDate else { return false }
      return true
    }

    public static func == (lhs: DeviceSetModel, rhs: DeviceSetModel) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
