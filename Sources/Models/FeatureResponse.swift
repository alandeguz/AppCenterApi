//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class FeatureResponse: APIModel {

    /** The unique name of the feature */
    public var name: String

    /** The friendly name of the feature */
    public var displayName: String

    /** The state (unset, enabled, disabled) of the feature */
    public var state: Int

    /** The creation date of the feature */
    public var createdAt: String?

    /** The description of the feature */
    public var description: String?

    /** The date the feature was last updated at */
    public var updatedAt: String?

    public init(name: String, displayName: String, state: Int, createdAt: String? = nil, description: String? = nil, updatedAt: String? = nil) {
        self.name = name
        self.displayName = displayName
        self.state = state
        self.createdAt = createdAt
        self.description = description
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case name
        case displayName = "display_name"
        case state
        case createdAt = "created_at"
        case description
        case updatedAt = "updated_at"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        name = try container.decode(.name)
        displayName = try container.decode(.displayName)
        state = try container.decode(.state)
        createdAt = try container.decodeIfPresent(.createdAt)
        description = try container.decodeIfPresent(.description)
        updatedAt = try container.decodeIfPresent(.updatedAt)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(name, forKey: .name)
        try container.encode(displayName, forKey: .displayName)
        try container.encode(state, forKey: .state)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? FeatureResponse else { return false }
      guard self.name == object.name else { return false }
      guard self.displayName == object.displayName else { return false }
      guard self.state == object.state else { return false }
      guard self.createdAt == object.createdAt else { return false }
      guard self.description == object.description else { return false }
      guard self.updatedAt == object.updatedAt else { return false }
      return true
    }

    public static func == (lhs: FeatureResponse, rhs: FeatureResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
