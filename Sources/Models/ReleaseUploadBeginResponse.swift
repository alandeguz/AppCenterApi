//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** A response containing information pertaining to starting a release upload process */
public class ReleaseUploadBeginResponse: APIModel {

    /** The ID for the current upload */
    public var uploadId: String

    /** The URL where the client needs to upload the release to */
    public var uploadURL: String

    /** The URL for the current upload, reserved for future use */
    public var assetDomain: String?

    /** The ID for the current upload, reserved for future use */
    public var assetId: String?

    /** The token for the current upload, reserved for future use */
    public var assetToken: String?

    public init(uploadId: String, uploadURL: String, assetDomain: String? = nil, assetId: String? = nil, assetToken: String? = nil) {
        self.uploadId = uploadId
        self.uploadURL = uploadURL
        self.assetDomain = assetDomain
        self.assetId = assetId
        self.assetToken = assetToken
    }

    private enum CodingKeys: String, CodingKey {
        case uploadId = "upload_id"
        case uploadURL = "upload_url"
        case assetDomain = "asset_domain"
        case assetId = "asset_id"
        case assetToken = "asset_token"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        uploadId = try container.decode(.uploadId)
        uploadURL = try container.decode(.uploadURL)
        assetDomain = try container.decodeIfPresent(.assetDomain)
        assetId = try container.decodeIfPresent(.assetId)
        assetToken = try container.decodeIfPresent(.assetToken)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(uploadId, forKey: .uploadId)
        try container.encode(uploadURL, forKey: .uploadURL)
        try container.encodeIfPresent(assetDomain, forKey: .assetDomain)
        try container.encodeIfPresent(assetId, forKey: .assetId)
        try container.encodeIfPresent(assetToken, forKey: .assetToken)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? ReleaseUploadBeginResponse else { return false }
      guard self.uploadId == object.uploadId else { return false }
      guard self.uploadURL == object.uploadURL else { return false }
      guard self.assetDomain == object.assetDomain else { return false }
      guard self.assetId == object.assetId else { return false }
      guard self.assetToken == object.assetToken else { return false }
      return true
    }

    public static func == (lhs: ReleaseUploadBeginResponse, rhs: ReleaseUploadBeginResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
