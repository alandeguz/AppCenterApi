//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Github bugtracker specific settings */
public class AlertingGithubBugtrackerSettings: APIModel {

    public var githubRepoId: Int

    public var githubRepoName: String

    public var githubLabel: String?

    public init(githubRepoId: Int, githubRepoName: String, githubLabel: String? = nil) {
        self.githubRepoId = githubRepoId
        self.githubRepoName = githubRepoName
        self.githubLabel = githubLabel
    }

    private enum CodingKeys: String, CodingKey {
        case githubRepoId = "github_repo_id"
        case githubRepoName = "github_repo_name"
        case githubLabel = "github_label"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        githubRepoId = try container.decode(.githubRepoId)
        githubRepoName = try container.decode(.githubRepoName)
        githubLabel = try container.decodeIfPresent(.githubLabel)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(githubRepoId, forKey: .githubRepoId)
        try container.encode(githubRepoName, forKey: .githubRepoName)
        try container.encodeIfPresent(githubLabel, forKey: .githubLabel)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? AlertingGithubBugtrackerSettings else { return false }
      guard self.githubRepoId == object.githubRepoId else { return false }
      guard self.githubRepoName == object.githubRepoName else { return false }
      guard self.githubLabel == object.githubLabel else { return false }
      return true
    }

    public static func == (lhs: AlertingGithubBugtrackerSettings, rhs: AlertingGithubBugtrackerSettings) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
