//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class HockeyAppCompatibilityReleaseResponse: APIModel {

    public var appsize: Int?

    public var bundleIdentifier: String?

    public var deviceFamily: String?

    public var external: Bool?

    public var id: Int?

    public var installURL: String?

    public var mandatory: Bool?

    public var minimumOsVersion: String?

    public var notes: String?

    public var shortversion: String?

    public var uploadedAt: DateTime?

    public var version: String?

    public init(appsize: Int? = nil, bundleIdentifier: String? = nil, deviceFamily: String? = nil, external: Bool? = nil, id: Int? = nil, installURL: String? = nil, mandatory: Bool? = nil, minimumOsVersion: String? = nil, notes: String? = nil, shortversion: String? = nil, uploadedAt: DateTime? = nil, version: String? = nil) {
        self.appsize = appsize
        self.bundleIdentifier = bundleIdentifier
        self.deviceFamily = deviceFamily
        self.external = external
        self.id = id
        self.installURL = installURL
        self.mandatory = mandatory
        self.minimumOsVersion = minimumOsVersion
        self.notes = notes
        self.shortversion = shortversion
        self.uploadedAt = uploadedAt
        self.version = version
    }

    private enum CodingKeys: String, CodingKey {
        case appsize
        case bundleIdentifier = "bundle_identifier"
        case deviceFamily = "device_family"
        case external
        case id
        case installURL = "install_url"
        case mandatory
        case minimumOsVersion = "minimum_os_version"
        case notes
        case shortversion
        case uploadedAt = "uploaded_at"
        case version
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        appsize = try container.decodeIfPresent(.appsize)
        bundleIdentifier = try container.decodeIfPresent(.bundleIdentifier)
        deviceFamily = try container.decodeIfPresent(.deviceFamily)
        external = try container.decodeIfPresent(.external)
        id = try container.decodeIfPresent(.id)
        installURL = try container.decodeIfPresent(.installURL)
        mandatory = try container.decodeIfPresent(.mandatory)
        minimumOsVersion = try container.decodeIfPresent(.minimumOsVersion)
        notes = try container.decodeIfPresent(.notes)
        shortversion = try container.decodeIfPresent(.shortversion)
        uploadedAt = try container.decodeIfPresent(.uploadedAt)
        version = try container.decodeIfPresent(.version)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(appsize, forKey: .appsize)
        try container.encodeIfPresent(bundleIdentifier, forKey: .bundleIdentifier)
        try container.encodeIfPresent(deviceFamily, forKey: .deviceFamily)
        try container.encodeIfPresent(external, forKey: .external)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(installURL, forKey: .installURL)
        try container.encodeIfPresent(mandatory, forKey: .mandatory)
        try container.encodeIfPresent(minimumOsVersion, forKey: .minimumOsVersion)
        try container.encodeIfPresent(notes, forKey: .notes)
        try container.encodeIfPresent(shortversion, forKey: .shortversion)
        try container.encodeIfPresent(uploadedAt, forKey: .uploadedAt)
        try container.encodeIfPresent(version, forKey: .version)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? HockeyAppCompatibilityReleaseResponse else { return false }
      guard self.appsize == object.appsize else { return false }
      guard self.bundleIdentifier == object.bundleIdentifier else { return false }
      guard self.deviceFamily == object.deviceFamily else { return false }
      guard self.external == object.external else { return false }
      guard self.id == object.id else { return false }
      guard self.installURL == object.installURL else { return false }
      guard self.mandatory == object.mandatory else { return false }
      guard self.minimumOsVersion == object.minimumOsVersion else { return false }
      guard self.notes == object.notes else { return false }
      guard self.shortversion == object.shortversion else { return false }
      guard self.uploadedAt == object.uploadedAt else { return false }
      guard self.version == object.version else { return false }
      return true
    }

    public static func == (lhs: HockeyAppCompatibilityReleaseResponse, rhs: HockeyAppCompatibilityReleaseResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
