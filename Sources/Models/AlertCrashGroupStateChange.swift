//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** AlertCrashGroup patching parameter */
public class AlertCrashGroupStateChange: APIModel {

    /** AlertCrashGroup patching parameter */
    public enum State: String, Codable {
        case `open` = "Open"
        case closed = "Closed"
        case ignored = "Ignored"

        public static let cases: [State] = [
          .`open`,
          .closed,
          .ignored,
        ]
    }

    public var state: State?

    public init(state: State? = nil) {
        self.state = state
    }

    private enum CodingKeys: String, CodingKey {
        case state
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        state = try container.decodeIfPresent(.state)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(state, forKey: .state)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? AlertCrashGroupStateChange else { return false }
      guard self.state == object.state else { return false }
      return true
    }

    public static func == (lhs: AlertCrashGroupStateChange, rhs: AlertCrashGroupStateChange) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
