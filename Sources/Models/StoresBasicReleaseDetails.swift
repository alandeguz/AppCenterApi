//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Basic information on a release */
public class StoresBasicReleaseDetails: APIModel {

    /** Destination for this release. */
    public enum DestinationType: String, Codable {
        case group = "group"
        case store = "store"
        case tester = "tester"

        public static let cases: [DestinationType] = [
          .group,
          .store,
          .tester,
        ]
    }

    /** Destination for this release. */
    public var destinationType: DestinationType?

    /** a list of distribution stores that are associated with this release. */
    public var distributionStores: [DistributionStores]?

    /** ID identifying this unique release. */
    public var id: Double?

    /** The release's short version.
For iOS: CFBundleShortVersionString from info.plist.
For Android: android:versionName from AppManifest.xml.
 */
    public var shortVersion: String?

    /** UTC time in ISO 8601 format of the uploaded time. */
    public var uploadedAt: String?

    /** The release's version.
For iOS: CFBundleVersion from info.plist.
For Android: android:versionCode from AppManifest.xml.
 */
    public var version: String?

    public init(destinationType: DestinationType? = nil, distributionStores: [DistributionStores]? = nil, id: Double? = nil, shortVersion: String? = nil, uploadedAt: String? = nil, version: String? = nil) {
        self.destinationType = destinationType
        self.distributionStores = distributionStores
        self.id = id
        self.shortVersion = shortVersion
        self.uploadedAt = uploadedAt
        self.version = version
    }

    private enum CodingKeys: String, CodingKey {
        case destinationType = "destination_type"
        case distributionStores = "distribution_stores"
        case id
        case shortVersion = "short_version"
        case uploadedAt = "uploaded_at"
        case version
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        destinationType = try container.decodeIfPresent(.destinationType)
        distributionStores = try container.decodeArrayIfPresent(.distributionStores)
        id = try container.decodeIfPresent(.id)
        shortVersion = try container.decodeIfPresent(.shortVersion)
        uploadedAt = try container.decodeIfPresent(.uploadedAt)
        version = try container.decodeIfPresent(.version)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(destinationType, forKey: .destinationType)
        try container.encodeIfPresent(distributionStores, forKey: .distributionStores)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(shortVersion, forKey: .shortVersion)
        try container.encodeIfPresent(uploadedAt, forKey: .uploadedAt)
        try container.encodeIfPresent(version, forKey: .version)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? StoresBasicReleaseDetails else { return false }
      guard self.destinationType == object.destinationType else { return false }
      guard self.distributionStores == object.distributionStores else { return false }
      guard self.id == object.id else { return false }
      guard self.shortVersion == object.shortVersion else { return false }
      guard self.uploadedAt == object.uploadedAt else { return false }
      guard self.version == object.version else { return false }
      return true
    }

    public static func == (lhs: StoresBasicReleaseDetails, rhs: StoresBasicReleaseDetails) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
