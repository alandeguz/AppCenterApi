//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Basic information on a release */
public class BasicReleaseDetailsResponse: APIModel {

    /** OBSOLETE. Will be removed in next version. The destination type.<br>
    <b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>
    <b>store</b>: The release distributed to external stores and distribution_stores details will be returned. <br>
     */
    public enum DestinationType: String, Codable {
        case group = "group"
        case store = "store"
        case tester = "tester"

        public static let cases: [DestinationType] = [
          .group,
          .store,
          .tester,
        ]
    }

    /** The release's origin */
    public enum Origin: String, Codable {
        case hockeyapp = "hockeyapp"
        case appcenter = "appcenter"

        public static let cases: [Origin] = [
          .hockeyapp,
          .appcenter,
        ]
    }

    /** ID identifying this unique release. */
    public var id: Int

    /** The release's version.<br>
For iOS: CFBundleVersion from info.plist.<br>
For Android: android:versionCode from AppManifest.xml.
 */
    public var version: String

    /** This value determines the whether a release currently is enabled or disabled. */
    public var enabled: Bool

    /** UTC time in ISO 8601 format of the uploaded time. */
    public var uploadedAt: String

    /** The release's short version.<br>
For iOS: CFBundleShortVersionString from info.plist.<br>
For Android: android:versionName from AppManifest.xml.
 */
    public var shortVersion: String

    /** Build information for the release
 */
    public var build: Build?

    /** OBSOLETE. Will be removed in next version. The destination type.<br>
<b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>
<b>store</b>: The release distributed to external stores and distribution_stores details will be returned. <br>
 */
    public var destinationType: DestinationType?

    /** A list of distribution groups or stores. */
    public var destinations: [UNKNOWN_ALL_OFF]?

    /** OBSOLETE. Will be removed in next version. A list of distribution groups that are associated with this release. */
    public var distributionGroups: [UNKNOWN_ALL_OFF]?

    /** OBSOLETE. Will be removed in next version. A list of distribution stores that are associated with this release. */
    public var distributionStores: [UNKNOWN_ALL_OFF]?

    /** This value determines if a release is external or not. */
    public var isExternalBuild: Bool?

    /** The release's origin */
    public var origin: Origin?

    /** Basic information on a release */
    public class Build: APIModel {

        /** The branch name of the build producing the release */
        public var branchName: String?

        /** The commit hash of the build producing the release */
        public var commitHash: String?

        /** The commit message of the build producing the release */
        public var commitMessage: String?

        public init(branchName: String? = nil, commitHash: String? = nil, commitMessage: String? = nil) {
            self.branchName = branchName
            self.commitHash = commitHash
            self.commitMessage = commitMessage
        }

        private enum CodingKeys: String, CodingKey {
            case branchName = "branch_name"
            case commitHash = "commit_hash"
            case commitMessage = "commit_message"
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)

            branchName = try container.decodeIfPresent(.branchName)
            commitHash = try container.decodeIfPresent(.commitHash)
            commitMessage = try container.decodeIfPresent(.commitMessage)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)

            try container.encodeIfPresent(branchName, forKey: .branchName)
            try container.encodeIfPresent(commitHash, forKey: .commitHash)
            try container.encodeIfPresent(commitMessage, forKey: .commitMessage)
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? Build else { return false }
          guard self.branchName == object.branchName else { return false }
          guard self.commitHash == object.commitHash else { return false }
          guard self.commitMessage == object.commitMessage else { return false }
          return true
        }

        public static func == (lhs: Build, rhs: Build) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(id: Int, version: String, enabled: Bool, uploadedAt: String, shortVersion: String, build: Build? = nil, destinationType: DestinationType? = nil, destinations: [UNKNOWN_ALL_OFF]? = nil, distributionGroups: [UNKNOWN_ALL_OFF]? = nil, distributionStores: [UNKNOWN_ALL_OFF]? = nil, isExternalBuild: Bool? = nil, origin: Origin? = nil) {
        self.id = id
        self.version = version
        self.enabled = enabled
        self.uploadedAt = uploadedAt
        self.shortVersion = shortVersion
        self.build = build
        self.destinationType = destinationType
        self.destinations = destinations
        self.distributionGroups = distributionGroups
        self.distributionStores = distributionStores
        self.isExternalBuild = isExternalBuild
        self.origin = origin
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case version
        case enabled
        case uploadedAt = "uploaded_at"
        case shortVersion = "short_version"
        case build
        case destinationType = "destination_type"
        case destinations
        case distributionGroups = "distribution_groups"
        case distributionStores = "distribution_stores"
        case isExternalBuild = "is_external_build"
        case origin
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        id = try container.decode(.id)
        version = try container.decode(.version)
        enabled = try container.decode(.enabled)
        uploadedAt = try container.decode(.uploadedAt)
        shortVersion = try container.decode(.shortVersion)
        build = try container.decodeIfPresent(.build)
        destinationType = try container.decodeIfPresent(.destinationType)
        destinations = try container.decodeArrayIfPresent(.destinations)
        distributionGroups = try container.decodeArrayIfPresent(.distributionGroups)
        distributionStores = try container.decodeArrayIfPresent(.distributionStores)
        isExternalBuild = try container.decodeIfPresent(.isExternalBuild)
        origin = try container.decodeIfPresent(.origin)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(id, forKey: .id)
        try container.encode(version, forKey: .version)
        try container.encode(enabled, forKey: .enabled)
        try container.encode(uploadedAt, forKey: .uploadedAt)
        try container.encode(shortVersion, forKey: .shortVersion)
        try container.encodeIfPresent(build, forKey: .build)
        try container.encodeIfPresent(destinationType, forKey: .destinationType)
        try container.encodeIfPresent(destinations, forKey: .destinations)
        try container.encodeIfPresent(distributionGroups, forKey: .distributionGroups)
        try container.encodeIfPresent(distributionStores, forKey: .distributionStores)
        try container.encodeIfPresent(isExternalBuild, forKey: .isExternalBuild)
        try container.encodeIfPresent(origin, forKey: .origin)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? BasicReleaseDetailsResponse else { return false }
      guard self.id == object.id else { return false }
      guard self.version == object.version else { return false }
      guard self.enabled == object.enabled else { return false }
      guard self.uploadedAt == object.uploadedAt else { return false }
      guard self.shortVersion == object.shortVersion else { return false }
      guard self.build == object.build else { return false }
      guard self.destinationType == object.destinationType else { return false }
      guard self.destinations == object.destinations else { return false }
      guard self.distributionGroups == object.distributionGroups else { return false }
      guard self.distributionStores == object.distributionStores else { return false }
      guard self.isExternalBuild == object.isExternalBuild else { return false }
      guard self.origin == object.origin else { return false }
      return true
    }

    public static func == (lhs: BasicReleaseDetailsResponse, rhs: BasicReleaseDetailsResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
