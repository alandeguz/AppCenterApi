//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class HandledErrorReasonFrame: APIModel {

    /** programming language of the frame */
    public enum Language: String, Codable {
        case javaScript = "JavaScript"
        case cSharp = "CSharp"
        case objectiveC = "Objective-C"
        case objectiveCpp = "Objective-Cpp"
        case cpp = "Cpp"
        case c = "C"
        case swift = "Swift"
        case java = "Java"
        case unknown = "Unknown"

        public static let cases: [Language] = [
          .javaScript,
          .cSharp,
          .objectiveC,
          .objectiveCpp,
          .cpp,
          .c,
          .swift,
          .java,
          .unknown,
        ]
    }

    /** this line isn't from any framework */
    public var appCode: Bool?

    /** is a class method */
    public var classMethod: Bool?

    /** name of the class */
    public var className: String?

    /** Formatted frame string */
    public var codeFormatted: String?

    /** Unformatted Frame string */
    public var codeRaw: String?

    /** Exception type. */
    public var exceptionType: String?

    /** name of the file */
    public var file: String?

    /** Name of the framework */
    public var frameworkName: String?

    /** programming language of the frame */
    public var language: Language?

    /** line number */
    public var line: Int?

    /** name of the method */
    public var method: String?

    /** parameters of the frames method */
    public var methodParams: String?

    /** OS exception type. (aka. SIGNAL) */
    public var osExceptionType: String?

    public init(appCode: Bool? = nil, classMethod: Bool? = nil, className: String? = nil, codeFormatted: String? = nil, codeRaw: String? = nil, exceptionType: String? = nil, file: String? = nil, frameworkName: String? = nil, language: Language? = nil, line: Int? = nil, method: String? = nil, methodParams: String? = nil, osExceptionType: String? = nil) {
        self.appCode = appCode
        self.classMethod = classMethod
        self.className = className
        self.codeFormatted = codeFormatted
        self.codeRaw = codeRaw
        self.exceptionType = exceptionType
        self.file = file
        self.frameworkName = frameworkName
        self.language = language
        self.line = line
        self.method = method
        self.methodParams = methodParams
        self.osExceptionType = osExceptionType
    }

    private enum CodingKeys: String, CodingKey {
        case appCode
        case classMethod
        case className
        case codeFormatted
        case codeRaw
        case exceptionType
        case file
        case frameworkName
        case language
        case line
        case method
        case methodParams
        case osExceptionType
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        appCode = try container.decodeIfPresent(.appCode)
        classMethod = try container.decodeIfPresent(.classMethod)
        className = try container.decodeIfPresent(.className)
        codeFormatted = try container.decodeIfPresent(.codeFormatted)
        codeRaw = try container.decodeIfPresent(.codeRaw)
        exceptionType = try container.decodeIfPresent(.exceptionType)
        file = try container.decodeIfPresent(.file)
        frameworkName = try container.decodeIfPresent(.frameworkName)
        language = try container.decodeIfPresent(.language)
        line = try container.decodeIfPresent(.line)
        method = try container.decodeIfPresent(.method)
        methodParams = try container.decodeIfPresent(.methodParams)
        osExceptionType = try container.decodeIfPresent(.osExceptionType)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(appCode, forKey: .appCode)
        try container.encodeIfPresent(classMethod, forKey: .classMethod)
        try container.encodeIfPresent(className, forKey: .className)
        try container.encodeIfPresent(codeFormatted, forKey: .codeFormatted)
        try container.encodeIfPresent(codeRaw, forKey: .codeRaw)
        try container.encodeIfPresent(exceptionType, forKey: .exceptionType)
        try container.encodeIfPresent(file, forKey: .file)
        try container.encodeIfPresent(frameworkName, forKey: .frameworkName)
        try container.encodeIfPresent(language, forKey: .language)
        try container.encodeIfPresent(line, forKey: .line)
        try container.encodeIfPresent(method, forKey: .method)
        try container.encodeIfPresent(methodParams, forKey: .methodParams)
        try container.encodeIfPresent(osExceptionType, forKey: .osExceptionType)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? HandledErrorReasonFrame else { return false }
      guard self.appCode == object.appCode else { return false }
      guard self.classMethod == object.classMethod else { return false }
      guard self.className == object.className else { return false }
      guard self.codeFormatted == object.codeFormatted else { return false }
      guard self.codeRaw == object.codeRaw else { return false }
      guard self.exceptionType == object.exceptionType else { return false }
      guard self.file == object.file else { return false }
      guard self.frameworkName == object.frameworkName else { return false }
      guard self.language == object.language else { return false }
      guard self.line == object.line else { return false }
      guard self.method == object.method else { return false }
      guard self.methodParams == object.methodParams else { return false }
      guard self.osExceptionType == object.osExceptionType else { return false }
      return true
    }

    public static func == (lhs: HandledErrorReasonFrame, rhs: HandledErrorReasonFrame) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
