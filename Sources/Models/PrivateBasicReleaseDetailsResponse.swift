//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Basic information on a release for private apis */
public class PrivateBasicReleaseDetailsResponse: APIModel {

    /** The destination type.<br>
    <b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>
    <b>store</b>: The release distributed to external stores and distribution_stores details will be returned. <br>
     */
    public enum DestinationType: String, Codable {
        case group = "group"
        case store = "store"
        case tester = "tester"

        public static let cases: [DestinationType] = [
          .group,
          .store,
          .tester,
        ]
    }

    /** The release's origin */
    public enum Origin: String, Codable {
        case hockeyapp = "hockeyapp"
        case appcenter = "appcenter"

        public static let cases: [Origin] = [
          .hockeyapp,
          .appcenter,
        ]
    }

    /** The destination type.<br>
<b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>
<b>store</b>: The release distributed to external stores and distribution_stores details will be returned. <br>
 */
    public var destinationType: DestinationType?

    /** the destination id of release where it is distributed. */
    public var distributionGroupId: String?

    /** ID identifying this unique release. */
    public var id: Int?

    /** This value determines if a release is external or not. */
    public var isExternalBuild: Bool?

    /** Indicates if this is the latest release in the group. */
    public var isLatest: Bool?

    /** A boolean which determines whether the release is a mandatory update or not. */
    public var mandatoryUpdate: Bool?

    /** The release's origin */
    public var origin: Origin?

    /** the publishing status of the distributed release */
    public var publishingStatus: String?

    /** The release's short version.<br>
For iOS: CFBundleShortVersionString from info.plist.<br>
For Android: android:versionName from AppManifest.xml.
 */
    public var shortVersion: String?

    /** UTC time in ISO 8601 format of the uploaded time. */
    public var uploadedAt: String?

    /** The release's version.<br>
For iOS: CFBundleVersion from info.plist.<br>
For Android: android:versionCode from AppManifest.xml.
 */
    public var version: String?

    public init(destinationType: DestinationType? = nil, distributionGroupId: String? = nil, id: Int? = nil, isExternalBuild: Bool? = nil, isLatest: Bool? = nil, mandatoryUpdate: Bool? = nil, origin: Origin? = nil, publishingStatus: String? = nil, shortVersion: String? = nil, uploadedAt: String? = nil, version: String? = nil) {
        self.destinationType = destinationType
        self.distributionGroupId = distributionGroupId
        self.id = id
        self.isExternalBuild = isExternalBuild
        self.isLatest = isLatest
        self.mandatoryUpdate = mandatoryUpdate
        self.origin = origin
        self.publishingStatus = publishingStatus
        self.shortVersion = shortVersion
        self.uploadedAt = uploadedAt
        self.version = version
    }

    private enum CodingKeys: String, CodingKey {
        case destinationType = "destination_type"
        case distributionGroupId = "distribution_group_id"
        case id
        case isExternalBuild = "is_external_build"
        case isLatest = "is_latest"
        case mandatoryUpdate = "mandatory_update"
        case origin
        case publishingStatus = "publishing_status"
        case shortVersion = "short_version"
        case uploadedAt = "uploaded_at"
        case version
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        destinationType = try container.decodeIfPresent(.destinationType)
        distributionGroupId = try container.decodeIfPresent(.distributionGroupId)
        id = try container.decodeIfPresent(.id)
        isExternalBuild = try container.decodeIfPresent(.isExternalBuild)
        isLatest = try container.decodeIfPresent(.isLatest)
        mandatoryUpdate = try container.decodeIfPresent(.mandatoryUpdate)
        origin = try container.decodeIfPresent(.origin)
        publishingStatus = try container.decodeIfPresent(.publishingStatus)
        shortVersion = try container.decodeIfPresent(.shortVersion)
        uploadedAt = try container.decodeIfPresent(.uploadedAt)
        version = try container.decodeIfPresent(.version)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(destinationType, forKey: .destinationType)
        try container.encodeIfPresent(distributionGroupId, forKey: .distributionGroupId)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(isExternalBuild, forKey: .isExternalBuild)
        try container.encodeIfPresent(isLatest, forKey: .isLatest)
        try container.encodeIfPresent(mandatoryUpdate, forKey: .mandatoryUpdate)
        try container.encodeIfPresent(origin, forKey: .origin)
        try container.encodeIfPresent(publishingStatus, forKey: .publishingStatus)
        try container.encodeIfPresent(shortVersion, forKey: .shortVersion)
        try container.encodeIfPresent(uploadedAt, forKey: .uploadedAt)
        try container.encodeIfPresent(version, forKey: .version)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? PrivateBasicReleaseDetailsResponse else { return false }
      guard self.destinationType == object.destinationType else { return false }
      guard self.distributionGroupId == object.distributionGroupId else { return false }
      guard self.id == object.id else { return false }
      guard self.isExternalBuild == object.isExternalBuild else { return false }
      guard self.isLatest == object.isLatest else { return false }
      guard self.mandatoryUpdate == object.mandatoryUpdate else { return false }
      guard self.origin == object.origin else { return false }
      guard self.publishingStatus == object.publishingStatus else { return false }
      guard self.shortVersion == object.shortVersion else { return false }
      guard self.uploadedAt == object.uploadedAt else { return false }
      guard self.version == object.version else { return false }
      return true
    }

    public static func == (lhs: PrivateBasicReleaseDetailsResponse, rhs: PrivateBasicReleaseDetailsResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
