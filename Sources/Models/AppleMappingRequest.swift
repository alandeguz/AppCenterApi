//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Apple Mapping Request Type */
public class AppleMappingRequest: APIModel {

    /** Id for the shared service connection. In case of Apple AppStore, this connection will be used to create and connect to the Apple AppStore in Mobile Center. */
    public var serviceConnectionId: String

    /** ID of the Team associated with the app in apple store */
    public var teamIdentifier: String

    /** ID of the apple application in apple store, takes precedence over bundle_identifier when both are provided */
    public var appleId: String?

    /** Bundle Identifier of the apple package */
    public var bundleIdentifier: String?

    public init(serviceConnectionId: String, teamIdentifier: String, appleId: String? = nil, bundleIdentifier: String? = nil) {
        self.serviceConnectionId = serviceConnectionId
        self.teamIdentifier = teamIdentifier
        self.appleId = appleId
        self.bundleIdentifier = bundleIdentifier
    }

    private enum CodingKeys: String, CodingKey {
        case serviceConnectionId = "service_connection_id"
        case teamIdentifier = "team_identifier"
        case appleId = "apple_id"
        case bundleIdentifier = "bundle_identifier"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        serviceConnectionId = try container.decode(.serviceConnectionId)
        teamIdentifier = try container.decode(.teamIdentifier)
        appleId = try container.decodeIfPresent(.appleId)
        bundleIdentifier = try container.decodeIfPresent(.bundleIdentifier)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(serviceConnectionId, forKey: .serviceConnectionId)
        try container.encode(teamIdentifier, forKey: .teamIdentifier)
        try container.encodeIfPresent(appleId, forKey: .appleId)
        try container.encodeIfPresent(bundleIdentifier, forKey: .bundleIdentifier)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? AppleMappingRequest else { return false }
      guard self.serviceConnectionId == object.serviceConnectionId else { return false }
      guard self.teamIdentifier == object.teamIdentifier else { return false }
      guard self.appleId == object.appleId else { return false }
      guard self.bundleIdentifier == object.bundleIdentifier else { return false }
      return true
    }

    public static func == (lhs: AppleMappingRequest, rhs: AppleMappingRequest) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
