//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class ApiTokensPostRequest: APIModel {

    /** The scope for this token. An array of supported roles. */
    public enum Scope: String, Codable {
        case all = "all"
        case inAppUpdate = "in_app_update"
        case viewer = "viewer"

        public static let cases: [Scope] = [
          .all,
          .inAppUpdate,
          .viewer,
        ]
    }

    /** The token's type. public:managed by the user; in_app_update:special token for in-app update scenario; buid:dedicated for CI usage for now; session:for CLI session management; tester_app: used for tester mobile app; default is "public".' */
    public enum TokenType: String, Codable {
        case `public` = "public"
        case inAppUpdate = "in_app_update"
        case build = "build"
        case session = "session"
        case testerApp = "tester_app"

        public static let cases: [TokenType] = [
          .`public`,
          .inAppUpdate,
          .build,
          .session,
          .testerApp,
        ]
    }

    /** The description of the token */
    public var description: String?

    /** An encrypted value of the token. */
    public var encryptedToken: String?

    /** The scope for this token. An array of supported roles. */
    public var scope: [Scope]?

    /** The hashed value of api token */
    public var tokenHash: String?

    /** The token's type. public:managed by the user; in_app_update:special token for in-app update scenario; buid:dedicated for CI usage for now; session:for CLI session management; tester_app: used for tester mobile app; default is "public".' */
    public var tokenType: TokenType?

    public init(description: String? = nil, encryptedToken: String? = nil, scope: [Scope]? = nil, tokenHash: String? = nil, tokenType: TokenType? = nil) {
        self.description = description
        self.encryptedToken = encryptedToken
        self.scope = scope
        self.tokenHash = tokenHash
        self.tokenType = tokenType
    }

    private enum CodingKeys: String, CodingKey {
        case description
        case encryptedToken = "encrypted_token"
        case scope
        case tokenHash = "token_hash"
        case tokenType = "token_type"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        description = try container.decodeIfPresent(.description)
        encryptedToken = try container.decodeIfPresent(.encryptedToken)
        scope = try container.decodeArrayIfPresent(.scope)
        tokenHash = try container.decodeIfPresent(.tokenHash)
        tokenType = try container.decodeIfPresent(.tokenType)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(encryptedToken, forKey: .encryptedToken)
        try container.encodeIfPresent(scope, forKey: .scope)
        try container.encodeIfPresent(tokenHash, forKey: .tokenHash)
        try container.encodeIfPresent(tokenType, forKey: .tokenType)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? ApiTokensPostRequest else { return false }
      guard self.description == object.description else { return false }
      guard self.encryptedToken == object.encryptedToken else { return false }
      guard self.scope == object.scope else { return false }
      guard self.tokenHash == object.tokenHash else { return false }
      guard self.tokenType == object.tokenType else { return false }
      return true
    }

    public static func == (lhs: ApiTokensPostRequest, rhs: ApiTokensPostRequest) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
