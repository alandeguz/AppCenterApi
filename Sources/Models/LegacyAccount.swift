//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class LegacyAccount: APIModel {

    /** The calling user's email. */
    public var email: String?

    /** Array of linked authentication providers associated with the account. */
    public var linkedProviders: [String]?

    /** The account name of the calling user. */
    public var name: String?

    public init(email: String? = nil, linkedProviders: [String]? = nil, name: String? = nil) {
        self.email = email
        self.linkedProviders = linkedProviders
        self.name = name
    }

    private enum CodingKeys: String, CodingKey {
        case email
        case linkedProviders
        case name
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        email = try container.decodeIfPresent(.email)
        linkedProviders = try container.decodeArrayIfPresent(.linkedProviders)
        name = try container.decodeIfPresent(.name)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(linkedProviders, forKey: .linkedProviders)
        try container.encodeIfPresent(name, forKey: .name)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? LegacyAccount else { return false }
      guard self.email == object.email else { return false }
      guard self.linkedProviders == object.linkedProviders else { return false }
      guard self.name == object.name else { return false }
      return true
    }

    public static func == (lhs: LegacyAccount, rhs: LegacyAccount) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
