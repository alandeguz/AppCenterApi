//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Status Data from store */
public class StatusData: APIModel {

    /** status from store */
    public var status: String?

    /** store type */
    public var storetype: String?

    /** track information from store */
    public var track: String?

    /** version of the app from store */
    public var version: String?

    public init(status: String? = nil, storetype: String? = nil, track: String? = nil, version: String? = nil) {
        self.status = status
        self.storetype = storetype
        self.track = track
        self.version = version
    }

    private enum CodingKeys: String, CodingKey {
        case status
        case storetype
        case track
        case version
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        status = try container.decodeIfPresent(.status)
        storetype = try container.decodeIfPresent(.storetype)
        track = try container.decodeIfPresent(.track)
        version = try container.decodeIfPresent(.version)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(storetype, forKey: .storetype)
        try container.encodeIfPresent(track, forKey: .track)
        try container.encodeIfPresent(version, forKey: .version)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? StatusData else { return false }
      guard self.status == object.status else { return false }
      guard self.storetype == object.storetype else { return false }
      guard self.track == object.track else { return false }
      guard self.version == object.version else { return false }
      return true
    }

    public static func == (lhs: StatusData, rhs: StatusData) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
