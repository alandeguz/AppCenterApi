//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension EngagementAPI.Account {

    /**
    Creates a team and returns it
    */
    public enum TeamsCreateTeam {

        public static let service = APIService<Response>(id: "teams_createTeam", tag: "account", method: "POST", path: "/v0.1/orgs/{org_name}/teams", hasBody: true, securityRequirement: SecurityRequirement(type: "APIToken", scope: ""))

        public final class Request: APIRequest<Response> {

            /** Creates a team and returns it */
            public class Team: APIModel {

                /** The display name of the team */
                public var displayName: String

                /** The description of the team */
                public var description: String?

                /** The name of the team */
                public var name: String?

                public init(displayName: String, description: String? = nil, name: String? = nil) {
                    self.displayName = displayName
                    self.description = description
                    self.name = name
                }

                private enum CodingKeys: String, CodingKey {
                    case displayName = "display_name"
                    case description
                    case name
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)

                    displayName = try container.decode(.displayName)
                    description = try container.decodeIfPresent(.description)
                    name = try container.decodeIfPresent(.name)
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)

                    try container.encode(displayName, forKey: .displayName)
                    try container.encodeIfPresent(description, forKey: .description)
                    try container.encodeIfPresent(name, forKey: .name)
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Team else { return false }
                  guard self.displayName == object.displayName else { return false }
                  guard self.description == object.description else { return false }
                  guard self.name == object.name else { return false }
                  return true
                }

                public static func == (lhs: Team, rhs: Team) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            public struct Options {

                /** The organization's name */
                public var orgName: String

                public init(orgName: String) {
                    self.orgName = orgName
                }
            }

            public var options: Options

            public var team: Team?

            public init(team: Team?, options: Options) {
                self.team = team
                self.options = options
                super.init(service: TeamsCreateTeam.service) {
                    let jsonEncoder = JSONEncoder()
                    return try jsonEncoder.encode(team)
                }
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(orgName: String, team: Team? = nil) {
                let options = Options(orgName: orgName)
                self.init(team: team, options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "orgName" + "}", with: "\(self.options.orgName)")
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {

            /** Creates a team and returns it */
            public class DefaultResponse: APIModel {

                public var error: ErrorType

                /** Creates a team and returns it */
                public class ErrorType: APIModel {

                    /** Creates a team and returns it */
                    public enum Code: String, Codable {
                        case badRequest = "BadRequest"
                        case conflict = "Conflict"
                        case notAcceptable = "NotAcceptable"
                        case notFound = "NotFound"
                        case internalServerError = "InternalServerError"
                        case unauthorized = "Unauthorized"
                        case tooManyRequests = "TooManyRequests"

                        public static let cases: [Code] = [
                          .badRequest,
                          .conflict,
                          .notAcceptable,
                          .notFound,
                          .internalServerError,
                          .unauthorized,
                          .tooManyRequests,
                        ]
                    }

                    public var code: Code

                    public var message: String

                    public init(code: Code, message: String) {
                        self.code = code
                        self.message = message
                    }

                    private enum CodingKeys: String, CodingKey {
                        case code
                        case message
                    }

                    public required init(from decoder: Decoder) throws {
                        let container = try decoder.container(keyedBy: CodingKeys.self)

                        code = try container.decode(.code)
                        message = try container.decode(.message)
                    }

                    public func encode(to encoder: Encoder) throws {
                        var container = encoder.container(keyedBy: CodingKeys.self)

                        try container.encode(code, forKey: .code)
                        try container.encode(message, forKey: .message)
                    }

                    public func isEqual(to object: Any?) -> Bool {
                      guard let object = object as? ErrorType else { return false }
                      guard self.code == object.code else { return false }
                      guard self.message == object.message else { return false }
                      return true
                    }

                    public static func == (lhs: ErrorType, rhs: ErrorType) -> Bool {
                        return lhs.isEqual(to: rhs)
                    }
                }

                public init(error: ErrorType) {
                    self.error = error
                }

                private enum CodingKeys: String, CodingKey {
                    case error
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)

                    error = try container.decode(.error)
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)

                    try container.encode(error, forKey: .error)
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? DefaultResponse else { return false }
                  guard self.error == object.error else { return false }
                  return true
                }

                public static func == (lhs: DefaultResponse, rhs: DefaultResponse) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }
            public typealias SuccessType = [Status201]

            /** Success */
            case status201([Status201])

            /** Error */
            case defaultResponse(statusCode: Int, DefaultResponse)

            public var success: [Status201]? {
                switch self {
                case .status201(let response): return response
                default: return nil
                }
            }

            public var failure: DefaultResponse? {
                switch self {
                case .defaultResponse(_, let response): return response
                default: return nil
                }
            }

            /// either success or failure value. Success is anything in the 200..<300 status code range
            public var responseResult: APIResponseResult<[Status201], DefaultResponse> {
                if let successValue = success {
                    return .success(successValue)
                } else if let failureValue = failure {
                    return .failure(failureValue)
                } else {
                    fatalError("Response does not have success or failure response")
                }
            }

            public var response: Any {
                switch self {
                case .status201(let response): return response
                case .defaultResponse(_, let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status201: return 201
                case .defaultResponse(let statusCode, _): return statusCode
                }
            }

            public var successful: Bool {
                switch self {
                case .status201: return true
                case .defaultResponse: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 201: self = try .status201(decoder.decode([Status201].self, from: data))
                default: self = try .defaultResponse(statusCode: statusCode, decoder.decode(DefaultResponse.self, from: data))
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
