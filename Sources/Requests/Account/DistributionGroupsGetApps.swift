//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension EngagementAPI.Account {

    /**
    Get apps from a distribution group in an org
    */
    public enum DistributionGroupsGetApps {

        public static let service = APIService<Response>(id: "distributionGroups_getApps", tag: "account", method: "GET", path: "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps", hasBody: false, securityRequirement: SecurityRequirement(type: "APIToken", scope: ""))

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** The organization's name */
                public var orgName: String

                /** The name of the distribution group */
                public var distributionGroupName: String

                public init(orgName: String, distributionGroupName: String) {
                    self.orgName = orgName
                    self.distributionGroupName = distributionGroupName
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: DistributionGroupsGetApps.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(orgName: String, distributionGroupName: String) {
                let options = Options(orgName: orgName, distributionGroupName: distributionGroupName)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "orgName" + "}", with: "\(self.options.orgName)").replacingOccurrences(of: "{" + "distributionGroupName" + "}", with: "\(self.options.distributionGroupName)")
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = [UNKNOWN_ALL_OFF]

            /** Success */
            case status200([UNKNOWN_ALL_OFF])

            public var success: [UNKNOWN_ALL_OFF]? {
                switch self {
                case .status200(let response): return response
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode([UNKNOWN_ALL_OFF].self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
