//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension EngagementAPI.Account {

    /**
    Gets the pending invitations for the app
    */
    public enum AppInvitationsList {

        public static let service = APIService<Response>(id: "appInvitations_list", tag: "account", method: "GET", path: "/v0.1/apps/{owner_name}/{app_name}/invitations", hasBody: false, securityRequirement: SecurityRequirement(type: "APIToken", scope: ""))

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** The name of the owner */
                public var ownerName: String

                /** The name of the application */
                public var appName: String

                public init(ownerName: String, appName: String) {
                    self.ownerName = ownerName
                    self.appName = appName
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: AppInvitationsList.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(ownerName: String, appName: String) {
                let options = Options(ownerName: ownerName, appName: appName)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "ownerName" + "}", with: "\(self.options.ownerName)").replacingOccurrences(of: "{" + "appName" + "}", with: "\(self.options.appName)")
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {

            /** Gets the pending invitations for the app */
            public class Status200: APIModel {

                /** The invitation type */
                public enum InviteType: String, Codable {
                    case developer = "developer"
                    case tester = "tester"

                    public static let cases: [InviteType] = [
                      .developer,
                      .tester,
                    ]
                }

                /** The permissions the user has for the app */
                public enum Permissions: String, Codable {
                    case manager = "manager"
                    case developer = "developer"
                    case viewer = "viewer"
                    case tester = "tester"

                    public static let cases: [Permissions] = [
                      .manager,
                      .developer,
                      .viewer,
                      .tester,
                    ]
                }

                /** The unique ID (UUID) of the invitation */
                public var id: ID

                /** The email address of the invited user */
                public var email: String

                /** Indicates whether the invited user already exists */
                public var isExistingUser: Bool

                public var invitedBy: InvitedBy

                /** The invitation type */
                public var inviteType: InviteType

                public var app: UNKNOWN_ALL_OFF

                /** The number of apps in the group */
                public var appCount: Double?

                /** The organization that owns the distribution group, if it exists */
                public var distributionGroup: DistributionGroup?

                /** The permissions the user has for the app */
                public var permissions: [Permissions]?

                /** Gets the pending invitations for the app */
                public class InvitedBy: APIModel {

                    /** The creation origin of this user */
                    public enum Origin: String, Codable {
                        case appcenter = "appcenter"
                        case hockeyapp = "hockeyapp"
                        case codepush = "codepush"

                        public static let cases: [Origin] = [
                          .appcenter,
                          .hockeyapp,
                          .codepush,
                        ]
                    }

                    /** The permissions the user has for the app */
                    public enum Permissions: String, Codable {
                        case manager = "manager"
                        case developer = "developer"
                        case viewer = "viewer"
                        case tester = "tester"

                        public static let cases: [Permissions] = [
                          .manager,
                          .developer,
                          .viewer,
                          .tester,
                        ]
                    }

                    /** The unique id (UUID) of the user */
                    public var id: ID

                    /** The full name of the user. Might for example be first and last name */
                    public var displayName: String

                    /** The email address of the user */
                    public var email: String

                    /** The unique name that is used to identify the user. */
                    public var name: String

                    /** The creation origin of this user */
                    public var origin: Origin

                    /** The avatar URL of the user */
                    public var avatarURL: String?

                    /** User is required to send an old password in order to change the password. */
                    public var canChangePassword: Bool?

                    /** The permissions the user has for the app */
                    public var permissions: [Permissions]?

                    public init(id: ID, displayName: String, email: String, name: String, origin: Origin, avatarURL: String? = nil, canChangePassword: Bool? = nil, permissions: [Permissions]? = nil) {
                        self.id = id
                        self.displayName = displayName
                        self.email = email
                        self.name = name
                        self.origin = origin
                        self.avatarURL = avatarURL
                        self.canChangePassword = canChangePassword
                        self.permissions = permissions
                    }

                    private enum CodingKeys: String, CodingKey {
                        case id
                        case displayName = "display_name"
                        case email
                        case name
                        case origin
                        case avatarURL = "avatar_url"
                        case canChangePassword = "can_change_password"
                        case permissions
                    }

                    public required init(from decoder: Decoder) throws {
                        let container = try decoder.container(keyedBy: CodingKeys.self)

                        id = try container.decode(.id)
                        displayName = try container.decode(.displayName)
                        email = try container.decode(.email)
                        name = try container.decode(.name)
                        origin = try container.decode(.origin)
                        avatarURL = try container.decodeIfPresent(.avatarURL)
                        canChangePassword = try container.decodeIfPresent(.canChangePassword)
                        permissions = try container.decodeArrayIfPresent(.permissions)
                    }

                    public func encode(to encoder: Encoder) throws {
                        var container = encoder.container(keyedBy: CodingKeys.self)

                        try container.encode(id, forKey: .id)
                        try container.encode(displayName, forKey: .displayName)
                        try container.encode(email, forKey: .email)
                        try container.encode(name, forKey: .name)
                        try container.encode(origin, forKey: .origin)
                        try container.encodeIfPresent(avatarURL, forKey: .avatarURL)
                        try container.encodeIfPresent(canChangePassword, forKey: .canChangePassword)
                        try container.encodeIfPresent(permissions, forKey: .permissions)
                    }

                    public func isEqual(to object: Any?) -> Bool {
                      guard let object = object as? InvitedBy else { return false }
                      guard self.id == object.id else { return false }
                      guard self.displayName == object.displayName else { return false }
                      guard self.email == object.email else { return false }
                      guard self.name == object.name else { return false }
                      guard self.origin == object.origin else { return false }
                      guard self.avatarURL == object.avatarURL else { return false }
                      guard self.canChangePassword == object.canChangePassword else { return false }
                      guard self.permissions == object.permissions else { return false }
                      return true
                    }

                    public static func == (lhs: InvitedBy, rhs: InvitedBy) -> Bool {
                        return lhs.isEqual(to: rhs)
                    }
                }

                /** Gets the pending invitations for the app */
                public class DistributionGroup: APIModel {

                    /** The information about the app's owner */
                    public var owner: Owner?

                    /** Gets the pending invitations for the app */
                    public class Owner: APIModel {

                        /** The owner type. Can either be 'org' or 'user' */
                        public enum `Type`: String, Codable {
                            case org = "org"
                            case user = "user"

                            public static let cases: [`Type`] = [
                              .org,
                              .user,
                            ]
                        }

                        /** The unique id (UUID) of the owner */
                        public var id: ID

                        /** The owner's display name */
                        public var displayName: String

                        /** The unique name that used to identify the owner */
                        public var name: String

                        /** The owner type. Can either be 'org' or 'user' */
                        public var type: `Type`

                        /** The avatar URL of the owner */
                        public var avatarURL: String?

                        /** The owner's email address */
                        public var email: String?

                        public init(id: ID, displayName: String, name: String, type: `Type`, avatarURL: String? = nil, email: String? = nil) {
                            self.id = id
                            self.displayName = displayName
                            self.name = name
                            self.type = type
                            self.avatarURL = avatarURL
                            self.email = email
                        }

                        private enum CodingKeys: String, CodingKey {
                            case id
                            case displayName = "display_name"
                            case name
                            case type
                            case avatarURL = "avatar_url"
                            case email
                        }

                        public required init(from decoder: Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)

                            id = try container.decode(.id)
                            displayName = try container.decode(.displayName)
                            name = try container.decode(.name)
                            type = try container.decode(.type)
                            avatarURL = try container.decodeIfPresent(.avatarURL)
                            email = try container.decodeIfPresent(.email)
                        }

                        public func encode(to encoder: Encoder) throws {
                            var container = encoder.container(keyedBy: CodingKeys.self)

                            try container.encode(id, forKey: .id)
                            try container.encode(displayName, forKey: .displayName)
                            try container.encode(name, forKey: .name)
                            try container.encode(type, forKey: .type)
                            try container.encodeIfPresent(avatarURL, forKey: .avatarURL)
                            try container.encodeIfPresent(email, forKey: .email)
                        }

                        public func isEqual(to object: Any?) -> Bool {
                          guard let object = object as? Owner else { return false }
                          guard self.id == object.id else { return false }
                          guard self.displayName == object.displayName else { return false }
                          guard self.name == object.name else { return false }
                          guard self.type == object.type else { return false }
                          guard self.avatarURL == object.avatarURL else { return false }
                          guard self.email == object.email else { return false }
                          return true
                        }

                        public static func == (lhs: Owner, rhs: Owner) -> Bool {
                            return lhs.isEqual(to: rhs)
                        }
                    }

                    public init(owner: Owner? = nil) {
                        self.owner = owner
                    }

                    private enum CodingKeys: String, CodingKey {
                        case owner
                    }

                    public required init(from decoder: Decoder) throws {
                        let container = try decoder.container(keyedBy: CodingKeys.self)

                        owner = try container.decodeIfPresent(.owner)
                    }

                    public func encode(to encoder: Encoder) throws {
                        var container = encoder.container(keyedBy: CodingKeys.self)

                        try container.encodeIfPresent(owner, forKey: .owner)
                    }

                    public func isEqual(to object: Any?) -> Bool {
                      guard let object = object as? DistributionGroup else { return false }
                      guard self.owner == object.owner else { return false }
                      return true
                    }

                    public static func == (lhs: DistributionGroup, rhs: DistributionGroup) -> Bool {
                        return lhs.isEqual(to: rhs)
                    }
                }

                public init(id: ID, email: String, isExistingUser: Bool, invitedBy: InvitedBy, inviteType: InviteType, app: UNKNOWN_ALL_OFF, appCount: Double? = nil, distributionGroup: DistributionGroup? = nil, permissions: [Permissions]? = nil) {
                    self.id = id
                    self.email = email
                    self.isExistingUser = isExistingUser
                    self.invitedBy = invitedBy
                    self.inviteType = inviteType
                    self.app = app
                    self.appCount = appCount
                    self.distributionGroup = distributionGroup
                    self.permissions = permissions
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case email
                    case isExistingUser = "is_existing_user"
                    case invitedBy = "invited_by"
                    case inviteType = "invite_type"
                    case app
                    case appCount = "app_count"
                    case distributionGroup = "distribution_group"
                    case permissions
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)

                    id = try container.decode(.id)
                    email = try container.decode(.email)
                    isExistingUser = try container.decode(.isExistingUser)
                    invitedBy = try container.decode(.invitedBy)
                    inviteType = try container.decode(.inviteType)
                    app = try container.decode(.app)
                    appCount = try container.decodeIfPresent(.appCount)
                    distributionGroup = try container.decodeIfPresent(.distributionGroup)
                    permissions = try container.decodeArrayIfPresent(.permissions)
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)

                    try container.encode(id, forKey: .id)
                    try container.encode(email, forKey: .email)
                    try container.encode(isExistingUser, forKey: .isExistingUser)
                    try container.encode(invitedBy, forKey: .invitedBy)
                    try container.encode(inviteType, forKey: .inviteType)
                    try container.encode(app, forKey: .app)
                    try container.encodeIfPresent(appCount, forKey: .appCount)
                    try container.encodeIfPresent(distributionGroup, forKey: .distributionGroup)
                    try container.encodeIfPresent(permissions, forKey: .permissions)
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Status200 else { return false }
                  guard self.id == object.id else { return false }
                  guard self.email == object.email else { return false }
                  guard self.isExistingUser == object.isExistingUser else { return false }
                  guard self.invitedBy == object.invitedBy else { return false }
                  guard self.inviteType == object.inviteType else { return false }
                  guard self.app == object.app else { return false }
                  guard self.appCount == object.appCount else { return false }
                  guard self.distributionGroup == object.distributionGroup else { return false }
                  guard self.permissions == object.permissions else { return false }
                  return true
                }

                public static func == (lhs: Status200, rhs: Status200) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            /** Gets the pending invitations for the app */
            public class DefaultResponse: APIModel {

                public var error: ErrorType

                /** Gets the pending invitations for the app */
                public class ErrorType: APIModel {

                    /** Gets the pending invitations for the app */
                    public enum Code: String, Codable {
                        case badRequest = "BadRequest"
                        case conflict = "Conflict"
                        case notAcceptable = "NotAcceptable"
                        case notFound = "NotFound"
                        case internalServerError = "InternalServerError"
                        case unauthorized = "Unauthorized"
                        case tooManyRequests = "TooManyRequests"

                        public static let cases: [Code] = [
                          .badRequest,
                          .conflict,
                          .notAcceptable,
                          .notFound,
                          .internalServerError,
                          .unauthorized,
                          .tooManyRequests,
                        ]
                    }

                    public var code: Code

                    public var message: String

                    public init(code: Code, message: String) {
                        self.code = code
                        self.message = message
                    }

                    private enum CodingKeys: String, CodingKey {
                        case code
                        case message
                    }

                    public required init(from decoder: Decoder) throws {
                        let container = try decoder.container(keyedBy: CodingKeys.self)

                        code = try container.decode(.code)
                        message = try container.decode(.message)
                    }

                    public func encode(to encoder: Encoder) throws {
                        var container = encoder.container(keyedBy: CodingKeys.self)

                        try container.encode(code, forKey: .code)
                        try container.encode(message, forKey: .message)
                    }

                    public func isEqual(to object: Any?) -> Bool {
                      guard let object = object as? ErrorType else { return false }
                      guard self.code == object.code else { return false }
                      guard self.message == object.message else { return false }
                      return true
                    }

                    public static func == (lhs: ErrorType, rhs: ErrorType) -> Bool {
                        return lhs.isEqual(to: rhs)
                    }
                }

                public init(error: ErrorType) {
                    self.error = error
                }

                private enum CodingKeys: String, CodingKey {
                    case error
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)

                    error = try container.decode(.error)
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)

                    try container.encode(error, forKey: .error)
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? DefaultResponse else { return false }
                  guard self.error == object.error else { return false }
                  return true
                }

                public static func == (lhs: DefaultResponse, rhs: DefaultResponse) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }
            public typealias SuccessType = Status200

            /** Success */
            case status200(Status200)

            /** Error */
            case defaultResponse(statusCode: Int, DefaultResponse)

            public var success: Status200? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var failure: DefaultResponse? {
                switch self {
                case .defaultResponse(_, let response): return response
                default: return nil
                }
            }

            /// either success or failure value. Success is anything in the 200..<300 status code range
            public var responseResult: APIResponseResult<Status200, DefaultResponse> {
                if let successValue = success {
                    return .success(successValue)
                } else if let failureValue = failure {
                    return .failure(failureValue)
                } else {
                    fatalError("Response does not have success or failure response")
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                case .defaultResponse(_, let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .defaultResponse(let statusCode, _): return statusCode
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .defaultResponse: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(Status200.self, from: data))
                default: self = try .defaultResponse(statusCode: statusCode, decoder.decode(DefaultResponse.self, from: data))
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
