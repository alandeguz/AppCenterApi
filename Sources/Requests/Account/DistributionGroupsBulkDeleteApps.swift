//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension EngagementAPI.Account {

    /**
    Delete apps from distribution group in an org
    */
    public enum DistributionGroupsBulkDeleteApps {

        public static let service = APIService<Response>(id: "distributionGroups_bulkDeleteApps", tag: "account", method: "POST", path: "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps/bulk_delete", hasBody: true, securityRequirement: SecurityRequirement(type: "APIToken", scope: ""))

        public final class Request: APIRequest<Response> {

            /** Delete apps from distribution group in an org */
            public class Apps: APIModel {

                /** The list of apps to delete from the distribution group */
                public var apps: [Apps]?

                public init(apps: [Apps]? = nil) {
                    self.apps = apps
                }

                private enum CodingKeys: String, CodingKey {
                    case apps
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)

                    apps = try container.decodeArrayIfPresent(.apps)
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)

                    try container.encodeIfPresent(apps, forKey: .apps)
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Apps else { return false }
                  guard self.apps == object.apps else { return false }
                  return true
                }

                public static func == (lhs: Apps, rhs: Apps) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            public struct Options {

                /** The organization's name */
                public var orgName: String

                /** The name of the distribution group */
                public var distributionGroupName: String

                public init(orgName: String, distributionGroupName: String) {
                    self.orgName = orgName
                    self.distributionGroupName = distributionGroupName
                }
            }

            public var options: Options

            public var apps: Apps

            public init(apps: Apps, options: Options) {
                self.apps = apps
                self.options = options
                super.init(service: DistributionGroupsBulkDeleteApps.service) {
                    let jsonEncoder = JSONEncoder()
                    return try jsonEncoder.encode(apps)
                }
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(orgName: String, distributionGroupName: String, apps: Apps) {
                let options = Options(orgName: orgName, distributionGroupName: distributionGroupName)
                self.init(apps: apps, options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "orgName" + "}", with: "\(self.options.orgName)").replacingOccurrences(of: "{" + "distributionGroupName" + "}", with: "\(self.options.distributionGroupName)")
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = Void

            /** Success */
            case status204

            public var success: Void? {
                switch self {
                case .status204: return ()
                }
            }

            public var response: Any {
                switch self {
                default: return ()
                }
            }

            public var statusCode: Int {
                switch self {
                case .status204: return 204
                }
            }

            public var successful: Bool {
                switch self {
                case .status204: return true
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 204: self = .status204
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
