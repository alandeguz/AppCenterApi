//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension EngagementAPI.Push {

    /**
    Get details about a specific notification.
    */
    public enum PushGet {

        public static let service = APIService<Response>(id: "Push_Get", tag: "push", method: "GET", path: "/v0.1/apps/{owner_name}/{app_name}/push/notifications/{notification_id}", hasBody: false, securityRequirement: SecurityRequirement(type: "APIToken", scope: ""))

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** The id of the notification. */
                public var notificationId: String

                /** The name of the owner */
                public var ownerName: String

                /** The name of the application */
                public var appName: String

                public init(notificationId: String, ownerName: String, appName: String) {
                    self.notificationId = notificationId
                    self.ownerName = ownerName
                    self.appName = appName
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: PushGet.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(notificationId: String, ownerName: String, appName: String) {
                let options = Options(notificationId: notificationId, ownerName: ownerName, appName: appName)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "notificationId" + "}", with: "\(self.options.notificationId)").replacingOccurrences(of: "{" + "ownerName" + "}", with: "\(self.options.ownerName)").replacingOccurrences(of: "{" + "appName" + "}", with: "\(self.options.appName)")
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {

            /** Get details about a specific notification. */
            public class Status200: APIModel {

                /** Notification definition object */
                public var notificationContent: NotificationContent

                /** Failture outcome counts */
                public var failureOutcomes: [FailureOutcomes]?

                /** Get details about a specific notification. */
                public class NotificationContent: APIModel {

                    /** Notification name */
                    public var name: String

                    /** Notification body */
                    public var body: String?

                    /** Notification custom data (such as badge, color, sound, etc.) */
                    public var customData: [String: String]?

                    /** Notification title */
                    public var title: String?

                    public init(name: String, body: String? = nil, customData: [String: String]? = nil, title: String? = nil) {
                        self.name = name
                        self.body = body
                        self.customData = customData
                        self.title = title
                    }

                    private enum CodingKeys: String, CodingKey {
                        case name
                        case body
                        case customData = "custom_data"
                        case title
                    }

                    public required init(from decoder: Decoder) throws {
                        let container = try decoder.container(keyedBy: CodingKeys.self)

                        name = try container.decode(.name)
                        body = try container.decodeIfPresent(.body)
                        customData = try container.decodeIfPresent(.customData)
                        title = try container.decodeIfPresent(.title)
                    }

                    public func encode(to encoder: Encoder) throws {
                        var container = encoder.container(keyedBy: CodingKeys.self)

                        try container.encode(name, forKey: .name)
                        try container.encodeIfPresent(body, forKey: .body)
                        try container.encodeIfPresent(customData, forKey: .customData)
                        try container.encodeIfPresent(title, forKey: .title)
                    }

                    public func isEqual(to object: Any?) -> Bool {
                      guard let object = object as? NotificationContent else { return false }
                      guard self.name == object.name else { return false }
                      guard self.body == object.body else { return false }
                      guard self.customData == object.customData else { return false }
                      guard self.title == object.title else { return false }
                      return true
                    }

                    public static func == (lhs: NotificationContent, rhs: NotificationContent) -> Bool {
                        return lhs.isEqual(to: rhs)
                    }
                }

                public init(notificationContent: NotificationContent, failureOutcomes: [FailureOutcomes]? = nil) {
                    self.notificationContent = notificationContent
                    self.failureOutcomes = failureOutcomes
                }

                private enum CodingKeys: String, CodingKey {
                    case notificationContent = "notification_content"
                    case failureOutcomes = "failure_outcomes"
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)

                    notificationContent = try container.decode(.notificationContent)
                    failureOutcomes = try container.decodeArrayIfPresent(.failureOutcomes)
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)

                    try container.encode(notificationContent, forKey: .notificationContent)
                    try container.encodeIfPresent(failureOutcomes, forKey: .failureOutcomes)
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Status200 else { return false }
                  guard self.notificationContent == object.notificationContent else { return false }
                  guard self.failureOutcomes == object.failureOutcomes else { return false }
                  return true
                }

                public static func == (lhs: Status200, rhs: Status200) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            /** Get details about a specific notification. */
            public class DefaultResponse: APIModel {

                public var error: ErrorType

                /** Get details about a specific notification. */
                public class ErrorType: APIModel {

                    /** Get details about a specific notification. */
                    public enum Code: String, Codable {
                        case badRequest = "BadRequest"
                        case conflict = "Conflict"
                        case notAcceptable = "NotAcceptable"
                        case notFound = "NotFound"
                        case internalServerError = "InternalServerError"
                        case unauthorized = "Unauthorized"
                        case tooManyRequests = "TooManyRequests"

                        public static let cases: [Code] = [
                          .badRequest,
                          .conflict,
                          .notAcceptable,
                          .notFound,
                          .internalServerError,
                          .unauthorized,
                          .tooManyRequests,
                        ]
                    }

                    public var code: Code

                    public var message: String

                    public init(code: Code, message: String) {
                        self.code = code
                        self.message = message
                    }

                    private enum CodingKeys: String, CodingKey {
                        case code
                        case message
                    }

                    public required init(from decoder: Decoder) throws {
                        let container = try decoder.container(keyedBy: CodingKeys.self)

                        code = try container.decode(.code)
                        message = try container.decode(.message)
                    }

                    public func encode(to encoder: Encoder) throws {
                        var container = encoder.container(keyedBy: CodingKeys.self)

                        try container.encode(code, forKey: .code)
                        try container.encode(message, forKey: .message)
                    }

                    public func isEqual(to object: Any?) -> Bool {
                      guard let object = object as? ErrorType else { return false }
                      guard self.code == object.code else { return false }
                      guard self.message == object.message else { return false }
                      return true
                    }

                    public static func == (lhs: ErrorType, rhs: ErrorType) -> Bool {
                        return lhs.isEqual(to: rhs)
                    }
                }

                public init(error: ErrorType) {
                    self.error = error
                }

                private enum CodingKeys: String, CodingKey {
                    case error
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)

                    error = try container.decode(.error)
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)

                    try container.encode(error, forKey: .error)
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? DefaultResponse else { return false }
                  guard self.error == object.error else { return false }
                  return true
                }

                public static func == (lhs: DefaultResponse, rhs: DefaultResponse) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }
            public typealias SuccessType = Status200

            /** Notification details */
            case status200(Status200)

            /** Error code with reason */
            case defaultResponse(statusCode: Int, DefaultResponse)

            public var success: Status200? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var failure: DefaultResponse? {
                switch self {
                case .defaultResponse(_, let response): return response
                default: return nil
                }
            }

            /// either success or failure value. Success is anything in the 200..<300 status code range
            public var responseResult: APIResponseResult<Status200, DefaultResponse> {
                if let successValue = success {
                    return .success(successValue)
                } else if let failureValue = failure {
                    return .failure(failureValue)
                } else {
                    fatalError("Response does not have success or failure response")
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                case .defaultResponse(_, let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .defaultResponse(let statusCode, _): return statusCode
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .defaultResponse: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(Status200.self, from: data))
                default: self = try .defaultResponse(statusCode: statusCode, decoder.decode(DefaultResponse.self, from: data))
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
