//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension EngagementAPI.Test {

    /**
    Adds file with the given hash to a test run
    */
    public enum TestUploadHash {

        public static let service = APIService<Response>(id: "test_uploadHash", tag: "test", method: "POST", path: "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/hashes", hasBody: true, securityRequirement: SecurityRequirement(type: "APIToken", scope: ""))

        public final class Request: APIRequest<Response> {

            /** Adds file with the given hash to a test run */
            public class FileInfo: APIModel {

                /** Type of the file */
                public enum FileType: String, Codable {
                    case dsymFile = "dsym-file"
                    case appFile = "app-file"
                    case testFile = "test-file"

                    public static let cases: [FileType] = [
                      .dsymFile,
                      .appFile,
                      .testFile,
                    ]
                }

                /** Type of the file */
                public var fileType: FileType

                /** SHA256 hash of the file */
                public var checksum: String

                /** Relative path of the file */
                public var relativePath: String

                /** Range of bytes required to verify ownership of the file */
                public var byteRange: String?

                public init(fileType: FileType, checksum: String, relativePath: String, byteRange: String? = nil) {
                    self.fileType = fileType
                    self.checksum = checksum
                    self.relativePath = relativePath
                    self.byteRange = byteRange
                }

                private enum CodingKeys: String, CodingKey {
                    case fileType = "file_type"
                    case checksum
                    case relativePath = "relative_path"
                    case byteRange = "byte_range"
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)

                    fileType = try container.decode(.fileType)
                    checksum = try container.decode(.checksum)
                    relativePath = try container.decode(.relativePath)
                    byteRange = try container.decodeIfPresent(.byteRange)
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)

                    try container.encode(fileType, forKey: .fileType)
                    try container.encode(checksum, forKey: .checksum)
                    try container.encode(relativePath, forKey: .relativePath)
                    try container.encodeIfPresent(byteRange, forKey: .byteRange)
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? FileInfo else { return false }
                  guard self.fileType == object.fileType else { return false }
                  guard self.checksum == object.checksum else { return false }
                  guard self.relativePath == object.relativePath else { return false }
                  guard self.byteRange == object.byteRange else { return false }
                  return true
                }

                public static func == (lhs: FileInfo, rhs: FileInfo) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            public struct Options {

                /** The ID of the test run */
                public var testRunId: String

                /** The name of the owner */
                public var ownerName: String

                /** The name of the application */
                public var appName: String

                public init(testRunId: String, ownerName: String, appName: String) {
                    self.testRunId = testRunId
                    self.ownerName = ownerName
                    self.appName = appName
                }
            }

            public var options: Options

            public var fileInfo: FileInfo

            public init(fileInfo: FileInfo, options: Options) {
                self.fileInfo = fileInfo
                self.options = options
                super.init(service: TestUploadHash.service) {
                    let jsonEncoder = JSONEncoder()
                    return try jsonEncoder.encode(fileInfo)
                }
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(testRunId: String, fileInfo: FileInfo, ownerName: String, appName: String) {
                let options = Options(testRunId: testRunId, ownerName: ownerName, appName: appName)
                self.init(fileInfo: fileInfo, options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "testRunId" + "}", with: "\(self.options.testRunId)").replacingOccurrences(of: "{" + "ownerName" + "}", with: "\(self.options.ownerName)").replacingOccurrences(of: "{" + "appName" + "}", with: "\(self.options.appName)")
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = Void

            /** OK */
            case status201

            /** Byte range verification required for given SHA256 hash */
            case status401

            /** File with given SHA256 hash doesn't exist and must be uploaded */
            case status412

            public var success: Void? {
                switch self {
                case .status201: return ()
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                default: return ()
                }
            }

            public var statusCode: Int {
                switch self {
                case .status201: return 201
                case .status401: return 401
                case .status412: return 412
                }
            }

            public var successful: Bool {
                switch self {
                case .status201: return true
                case .status401: return false
                case .status412: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 201: self = .status201
                case 401: self = .status401
                case 412: self = .status412
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
