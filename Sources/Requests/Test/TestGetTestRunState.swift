//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension EngagementAPI.Test {

    /**
    Gets state of the test run
    */
    public enum TestGetTestRunState {

        public static let service = APIService<Response>(id: "test_getTestRunState", tag: "test", method: "GET", path: "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/state", hasBody: false, securityRequirement: SecurityRequirement(type: "APIToken", scope: ""))

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** The ID of the test run */
                public var testRunId: String

                /** The name of the owner */
                public var ownerName: String

                /** The name of the application */
                public var appName: String

                public init(testRunId: String, ownerName: String, appName: String) {
                    self.testRunId = testRunId
                    self.ownerName = ownerName
                    self.appName = appName
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: TestGetTestRunState.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(testRunId: String, ownerName: String, appName: String) {
                let options = Options(testRunId: testRunId, ownerName: ownerName, appName: appName)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "testRunId" + "}", with: "\(self.options.testRunId)").replacingOccurrences(of: "{" + "ownerName" + "}", with: "\(self.options.ownerName)").replacingOccurrences(of: "{" + "appName" + "}", with: "\(self.options.appName)")
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {

            /** Gets state of the test run */
            public class Status200: APIModel {

                /** The exit code that the client should use when exiting. Used for indicating status to the caller of the client.
            0: test run completes with no failing tests
            1: test run completes with at least one failing test
            2: test run failed to complete. Status for test run is unknown
             */
                public var exitCode: Int?

                /** Multi-line message that describes the status */
                public var message: [String]?

                /** Time (in seconds) that the client should wait for before checking the status again */
                public var waitTime: Int?

                public init(exitCode: Int? = nil, message: [String]? = nil, waitTime: Int? = nil) {
                    self.exitCode = exitCode
                    self.message = message
                    self.waitTime = waitTime
                }

                private enum CodingKeys: String, CodingKey {
                    case exitCode = "exit_code"
                    case message
                    case waitTime = "wait_time"
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)

                    exitCode = try container.decodeIfPresent(.exitCode)
                    message = try container.decodeArrayIfPresent(.message)
                    waitTime = try container.decodeIfPresent(.waitTime)
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)

                    try container.encodeIfPresent(exitCode, forKey: .exitCode)
                    try container.encodeIfPresent(message, forKey: .message)
                    try container.encodeIfPresent(waitTime, forKey: .waitTime)
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Status200 else { return false }
                  guard self.exitCode == object.exitCode else { return false }
                  guard self.message == object.message else { return false }
                  guard self.waitTime == object.waitTime else { return false }
                  return true
                }

                public static func == (lhs: Status200, rhs: Status200) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }
            public typealias SuccessType = Status200

            /** OK */
            case status200(Status200)

            public var success: Status200? {
                switch self {
                case .status200(let response): return response
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(Status200.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
