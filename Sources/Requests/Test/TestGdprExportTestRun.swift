//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension EngagementAPI.Test {

    /**
    Lists test run data
    */
    public enum TestGdprExportTestRun {

        public static let service = APIService<Response>(id: "test_gdprExportTestRun", tag: "test", method: "GET", path: "/v0.1/apps/{owner_name}/{app_name}/test/export/testRuns", hasBody: false, securityRequirement: SecurityRequirement(type: "APIToken", scope: ""))

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** The name of the owner */
                public var ownerName: String

                /** The name of the application */
                public var appName: String

                public init(ownerName: String, appName: String) {
                    self.ownerName = ownerName
                    self.appName = appName
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: TestGdprExportTestRun.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(ownerName: String, appName: String) {
                let options = Options(ownerName: ownerName, appName: appName)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "ownerName" + "}", with: "\(self.options.ownerName)").replacingOccurrences(of: "{" + "appName" + "}", with: "\(self.options.appName)")
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {

            /** Lists test run data */
            public class Status200: APIModel {

                public var appHashFileId: ID?

                public var appHashFileURL: String?

                public var appIconURL: String?

                public var dsymHashFileId: ID?

                public var dsymHashFileURL: String?

                public var id: ID?

                public var locale: String?

                public init(appHashFileId: ID? = nil, appHashFileURL: String? = nil, appIconURL: String? = nil, dsymHashFileId: ID? = nil, dsymHashFileURL: String? = nil, id: ID? = nil, locale: String? = nil) {
                    self.appHashFileId = appHashFileId
                    self.appHashFileURL = appHashFileURL
                    self.appIconURL = appIconURL
                    self.dsymHashFileId = dsymHashFileId
                    self.dsymHashFileURL = dsymHashFileURL
                    self.id = id
                    self.locale = locale
                }

                private enum CodingKeys: String, CodingKey {
                    case appHashFileId = "app_hash_file_id"
                    case appHashFileURL = "app_hash_file_url"
                    case appIconURL = "app_icon_url"
                    case dsymHashFileId = "dsym_hash_file_id"
                    case dsymHashFileURL = "dsym_hash_file_url"
                    case id
                    case locale
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)

                    appHashFileId = try container.decodeIfPresent(.appHashFileId)
                    appHashFileURL = try container.decodeIfPresent(.appHashFileURL)
                    appIconURL = try container.decodeIfPresent(.appIconURL)
                    dsymHashFileId = try container.decodeIfPresent(.dsymHashFileId)
                    dsymHashFileURL = try container.decodeIfPresent(.dsymHashFileURL)
                    id = try container.decodeIfPresent(.id)
                    locale = try container.decodeIfPresent(.locale)
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)

                    try container.encodeIfPresent(appHashFileId, forKey: .appHashFileId)
                    try container.encodeIfPresent(appHashFileURL, forKey: .appHashFileURL)
                    try container.encodeIfPresent(appIconURL, forKey: .appIconURL)
                    try container.encodeIfPresent(dsymHashFileId, forKey: .dsymHashFileId)
                    try container.encodeIfPresent(dsymHashFileURL, forKey: .dsymHashFileURL)
                    try container.encodeIfPresent(id, forKey: .id)
                    try container.encodeIfPresent(locale, forKey: .locale)
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Status200 else { return false }
                  guard self.appHashFileId == object.appHashFileId else { return false }
                  guard self.appHashFileURL == object.appHashFileURL else { return false }
                  guard self.appIconURL == object.appIconURL else { return false }
                  guard self.dsymHashFileId == object.dsymHashFileId else { return false }
                  guard self.dsymHashFileURL == object.dsymHashFileURL else { return false }
                  guard self.id == object.id else { return false }
                  guard self.locale == object.locale else { return false }
                  return true
                }

                public static func == (lhs: Status200, rhs: Status200) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }
            public typealias SuccessType = Status200

            /** OK */
            case status200(Status200)

            public var success: Status200? {
                switch self {
                case .status200(let response): return response
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(Status200.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
