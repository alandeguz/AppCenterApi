//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension EngagementAPI.Test {

    /**
    Starts test run
    */
    public enum TestStartTestRun {

        public static let service = APIService<Response>(id: "test_startTestRun", tag: "test", method: "POST", path: "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/start", hasBody: true, securityRequirement: SecurityRequirement(type: "APIToken", scope: ""))

        public final class Request: APIRequest<Response> {

            /** Starts test run */
            public class StartOptions: APIModel {

                /** Test framework used by tests. */
                public var testFramework: String

                /** Device selection string. */
                public var deviceSelection: String

                /** Language that should be used to run tests. */
                public var language: String?

                /** Locale that should be used to run tests. */
                public var locale: String?

                /** A JSON dictionary with additional test parameters */
                public var testParameters: [String: Any]?

                /** Name of the test series. */
                public var testSeries: String?

                public init(testFramework: String, deviceSelection: String, language: String? = nil, locale: String? = nil, testParameters: [String: Any]? = nil, testSeries: String? = nil) {
                    self.testFramework = testFramework
                    self.deviceSelection = deviceSelection
                    self.language = language
                    self.locale = locale
                    self.testParameters = testParameters
                    self.testSeries = testSeries
                }

                private enum CodingKeys: String, CodingKey {
                    case testFramework = "test_framework"
                    case deviceSelection = "device_selection"
                    case language
                    case locale
                    case testParameters = "test_parameters"
                    case testSeries = "test_series"
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)

                    testFramework = try container.decode(.testFramework)
                    deviceSelection = try container.decode(.deviceSelection)
                    language = try container.decodeIfPresent(.language)
                    locale = try container.decodeIfPresent(.locale)
                    testParameters = try container.decodeAnyIfPresent(.testParameters)
                    testSeries = try container.decodeIfPresent(.testSeries)
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)

                    try container.encode(testFramework, forKey: .testFramework)
                    try container.encode(deviceSelection, forKey: .deviceSelection)
                    try container.encodeIfPresent(language, forKey: .language)
                    try container.encodeIfPresent(locale, forKey: .locale)
                    try container.encodeAnyIfPresent(testParameters, forKey: .testParameters)
                    try container.encodeIfPresent(testSeries, forKey: .testSeries)
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? StartOptions else { return false }
                  guard self.testFramework == object.testFramework else { return false }
                  guard self.deviceSelection == object.deviceSelection else { return false }
                  guard self.language == object.language else { return false }
                  guard self.locale == object.locale else { return false }
                  guard NSDictionary(dictionary: self.testParameters ?? [:]).isEqual(to: object.testParameters ?? [:]) else { return false }
                  guard self.testSeries == object.testSeries else { return false }
                  return true
                }

                public static func == (lhs: StartOptions, rhs: StartOptions) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            public struct Options {

                /** The ID of the test run */
                public var testRunId: String

                /** The name of the owner */
                public var ownerName: String

                /** The name of the application */
                public var appName: String

                public init(testRunId: String, ownerName: String, appName: String) {
                    self.testRunId = testRunId
                    self.ownerName = ownerName
                    self.appName = appName
                }
            }

            public var options: Options

            public var startOptions: StartOptions

            public init(startOptions: StartOptions, options: Options) {
                self.startOptions = startOptions
                self.options = options
                super.init(service: TestStartTestRun.service) {
                    let jsonEncoder = JSONEncoder()
                    return try jsonEncoder.encode(startOptions)
                }
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(testRunId: String, startOptions: StartOptions, ownerName: String, appName: String) {
                let options = Options(testRunId: testRunId, ownerName: ownerName, appName: appName)
                self.init(startOptions: startOptions, options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "testRunId" + "}", with: "\(self.options.testRunId)").replacingOccurrences(of: "{" + "ownerName" + "}", with: "\(self.options.ownerName)").replacingOccurrences(of: "{" + "appName" + "}", with: "\(self.options.appName)")
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {

            /** Starts test run */
            public class Status200: APIModel {

                /** List with names of accepted devices */
                public var acceptedDevices: [String]?

                /** List with names and descriptions of rejected devices */
                public var rejectedDevices: [String]?

                public init(acceptedDevices: [String]? = nil, rejectedDevices: [String]? = nil) {
                    self.acceptedDevices = acceptedDevices
                    self.rejectedDevices = rejectedDevices
                }

                private enum CodingKeys: String, CodingKey {
                    case acceptedDevices = "accepted_devices"
                    case rejectedDevices = "rejected_devices"
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)

                    acceptedDevices = try container.decodeArrayIfPresent(.acceptedDevices)
                    rejectedDevices = try container.decodeArrayIfPresent(.rejectedDevices)
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)

                    try container.encodeIfPresent(acceptedDevices, forKey: .acceptedDevices)
                    try container.encodeIfPresent(rejectedDevices, forKey: .rejectedDevices)
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Status200 else { return false }
                  guard self.acceptedDevices == object.acceptedDevices else { return false }
                  guard self.rejectedDevices == object.rejectedDevices else { return false }
                  return true
                }

                public static func == (lhs: Status200, rhs: Status200) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }
            public typealias SuccessType = Status200

            /** OK */
            case status200(Status200)

            public var success: Status200? {
                switch self {
                case .status200(let response): return response
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(Status200.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
