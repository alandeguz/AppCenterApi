//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension EngagementAPI.Test {

    /**
    Creates a short ID for a list of devices
    */
    public enum TestCreateDeviceSelection {

        public static let service = APIService<Response>(id: "test_createDeviceSelection", tag: "test", method: "POST", path: "/v0.1/apps/{owner_name}/{app_name}/device_selection", hasBody: true, securityRequirement: SecurityRequirement(type: "APIToken", scope: ""))

        public final class Request: APIRequest<Response> {

            /** Creates a short ID for a list of devices */
            public class DeviceList: APIModel {

                public var devices: [String]

                public init(devices: [String]) {
                    self.devices = devices
                }

                private enum CodingKeys: String, CodingKey {
                    case devices
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)

                    devices = try container.decodeArray(.devices)
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)

                    try container.encode(devices, forKey: .devices)
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? DeviceList else { return false }
                  guard self.devices == object.devices else { return false }
                  return true
                }

                public static func == (lhs: DeviceList, rhs: DeviceList) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            public struct Options {

                /** The name of the owner */
                public var ownerName: String

                /** The name of the application */
                public var appName: String

                public init(ownerName: String, appName: String) {
                    self.ownerName = ownerName
                    self.appName = appName
                }
            }

            public var options: Options

            public var deviceList: DeviceList

            public init(deviceList: DeviceList, options: Options) {
                self.deviceList = deviceList
                self.options = options
                super.init(service: TestCreateDeviceSelection.service) {
                    let jsonEncoder = JSONEncoder()
                    return try jsonEncoder.encode(deviceList)
                }
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(deviceList: DeviceList, ownerName: String, appName: String) {
                let options = Options(ownerName: ownerName, appName: appName)
                self.init(deviceList: deviceList, options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "ownerName" + "}", with: "\(self.options.ownerName)").replacingOccurrences(of: "{" + "appName" + "}", with: "\(self.options.appName)")
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {

            /** Creates a short ID for a list of devices */
            public class Status201: APIModel {

                /** Identifier of the device selection */
                public var shortId: String

                public init(shortId: String) {
                    self.shortId = shortId
                }

                private enum CodingKeys: String, CodingKey {
                    case shortId
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)

                    shortId = try container.decode(.shortId)
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)

                    try container.encode(shortId, forKey: .shortId)
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Status201 else { return false }
                  guard self.shortId == object.shortId else { return false }
                  return true
                }

                public static func == (lhs: Status201, rhs: Status201) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            /** Creates a short ID for a list of devices */
            public class Status400: APIModel {

                /** Status of the operation */
                public var status: String

                /** Human-readable message that describes the error */
                public var message: String

                public init(status: String, message: String) {
                    self.status = status
                    self.message = message
                }

                private enum CodingKeys: String, CodingKey {
                    case status
                    case message
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)

                    status = try container.decode(.status)
                    message = try container.decode(.message)
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)

                    try container.encode(status, forKey: .status)
                    try container.encode(message, forKey: .message)
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Status400 else { return false }
                  guard self.status == object.status else { return false }
                  guard self.message == object.message else { return false }
                  return true
                }

                public static func == (lhs: Status400, rhs: Status400) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }
            public typealias SuccessType = Status201

            /** OK */
            case status201(Status201)

            /** Invalid list of device IDs */
            case status400(Status400)

            public var success: Status201? {
                switch self {
                case .status201(let response): return response
                default: return nil
                }
            }

            public var failure: Status400? {
                switch self {
                case .status400(let response): return response
                default: return nil
                }
            }

            /// either success or failure value. Success is anything in the 200..<300 status code range
            public var responseResult: APIResponseResult<Status201, Status400> {
                if let successValue = success {
                    return .success(successValue)
                } else if let failureValue = failure {
                    return .failure(failureValue)
                } else {
                    fatalError("Response does not have success or failure response")
                }
            }

            public var response: Any {
                switch self {
                case .status201(let response): return response
                case .status400(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status201: return 201
                case .status400: return 400
                }
            }

            public var successful: Bool {
                switch self {
                case .status201: return true
                case .status400: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 201: self = try .status201(decoder.decode(Status201.self, from: data))
                case 400: self = try .status400(decoder.decode(Status400.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
