//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension EngagementAPI.Test {

    /**
    Updates name and slug of a test series
    */
    public enum TestPatchTestSeries {

        public static let service = APIService<Response>(id: "test_patchTestSeries", tag: "test", method: "PATCH", path: "/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}", hasBody: true, securityRequirement: SecurityRequirement(type: "APIToken", scope: ""))

        public final class Request: APIRequest<Response> {

            /** Updates name and slug of a test series */
            public class Name: APIModel {

                /** Name of the new test series */
                public var name: String

                public init(name: String) {
                    self.name = name
                }

                private enum CodingKeys: String, CodingKey {
                    case name
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)

                    name = try container.decode(.name)
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)

                    try container.encode(name, forKey: .name)
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Name else { return false }
                  guard self.name == object.name else { return false }
                  return true
                }

                public static func == (lhs: Name, rhs: Name) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            public struct Options {

                /** The slug of the test series */
                public var testSeriesSlug: String

                /** The name of the owner */
                public var ownerName: String

                /** The name of the application */
                public var appName: String

                public init(testSeriesSlug: String, ownerName: String, appName: String) {
                    self.testSeriesSlug = testSeriesSlug
                    self.ownerName = ownerName
                    self.appName = appName
                }
            }

            public var options: Options

            public var name: Name

            public init(name: Name, options: Options) {
                self.name = name
                self.options = options
                super.init(service: TestPatchTestSeries.service) {
                    let jsonEncoder = JSONEncoder()
                    return try jsonEncoder.encode(name)
                }
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(testSeriesSlug: String, name: Name, ownerName: String, appName: String) {
                let options = Options(testSeriesSlug: testSeriesSlug, ownerName: ownerName, appName: appName)
                self.init(name: name, options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "testSeriesSlug" + "}", with: "\(self.options.testSeriesSlug)").replacingOccurrences(of: "{" + "ownerName" + "}", with: "\(self.options.ownerName)").replacingOccurrences(of: "{" + "appName" + "}", with: "\(self.options.appName)")
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {

            /** Updates name and slug of a test series */
            public class Status200: APIModel {

                /** Unique, human-readable identifier of the test series */
                public var slug: String

                /** Name of the test series */
                public var name: String

                /** Date of the latest test run that used this test series */
                public var mostRecentActivity: String?

                /** Most recent test runs */
                public var testRuns: [TestRuns]?

                public init(slug: String, name: String, mostRecentActivity: String? = nil, testRuns: [TestRuns]? = nil) {
                    self.slug = slug
                    self.name = name
                    self.mostRecentActivity = mostRecentActivity
                    self.testRuns = testRuns
                }

                private enum CodingKeys: String, CodingKey {
                    case slug
                    case name
                    case mostRecentActivity
                    case testRuns
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)

                    slug = try container.decode(.slug)
                    name = try container.decode(.name)
                    mostRecentActivity = try container.decodeIfPresent(.mostRecentActivity)
                    testRuns = try container.decodeArrayIfPresent(.testRuns)
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)

                    try container.encode(slug, forKey: .slug)
                    try container.encode(name, forKey: .name)
                    try container.encodeIfPresent(mostRecentActivity, forKey: .mostRecentActivity)
                    try container.encodeIfPresent(testRuns, forKey: .testRuns)
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Status200 else { return false }
                  guard self.slug == object.slug else { return false }
                  guard self.name == object.name else { return false }
                  guard self.mostRecentActivity == object.mostRecentActivity else { return false }
                  guard self.testRuns == object.testRuns else { return false }
                  return true
                }

                public static func == (lhs: Status200, rhs: Status200) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }
            public typealias SuccessType = Status200

            /** Test series was successfully patched */
            case status200(Status200)

            /** The new test series name is incorrect */
            case status400

            /** Test series with the given slug name was not found */
            case status404

            public var success: Status200? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                default: return ()
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status400: return 400
                case .status404: return 404
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status400: return false
                case .status404: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(Status200.self, from: data))
                case 400: self = .status400
                case 404: self = .status404
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
