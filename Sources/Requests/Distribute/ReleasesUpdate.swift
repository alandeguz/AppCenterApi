//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension EngagementAPI.Distribute {

    /**
    Updates a release.
    */
    public enum ReleasesUpdate {

        public static let service = APIService<Response>(id: "releases_update", tag: "distribute", method: "PATCH", path: "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}", hasBody: true, securityRequirement: SecurityRequirement(type: "APIToken", scope: ""))

        public final class Request: APIRequest<Response> {

            /** Updates a release. */
            public class Body: APIModel {

                /** Contains metadata about the build that produced the release being uploaded */
                public var build: Build?

                /** OBSOLETE. Will be removed in future releases - use destinations instead. Id of a destination. The release will be associated with this destination. If the destination doesn't exist a 400 is returned. If both destination name and id are passed, the id is taking precedence.
             */
                public var destinationId: String?

                /** OBSOLETE. Will be removed in future releases - use destinations instead. Name of a destination. The release will be associated with this destination. If the destination doesn't exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence.
             */
                public var destinationName: String?

                /** Not used anymore. */
                public var destinationType: String?

                /** Distribute this release under the following list of destinations (store groups or distribution groups). */
                public var destinations: [Destinations]?

                /** OBSOLETE. Will be removed in future releases - use destinations instead. Id of a distribution group. The release will be associated with this distribution group. If the distribution group doesn't exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence.
             */
                public var distributionGroupId: String?

                /** OBSOLETE. Will be removed in future releases - use destinations instead. Name of a distribution group. The release will be associated with this distribution group. If the distribution group doesn't exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence.
             */
                public var distributionGroupName: String?

                /** A boolean which determines whether this version should be a mandatory update or not. */
                public var mandatoryUpdate: Bool?

                /** An object containing all the release metadata. */
                public var metadata: Metadata?

                /** A boolean which determines whether to notify testers of a new release, default to true. */
                public var notifyTesters: Bool?

                /** Release notes for this release. */
                public var releaseNotes: String?

                /** Updates a release. */
                public class Build: APIModel {

                    /** The branch name of the build producing the release */
                    public var branchName: String?

                    /** The commit hash of the build producing the release */
                    public var commitHash: String?

                    /** The commit message of the build producing the release */
                    public var commitMessage: String?

                    public init(branchName: String? = nil, commitHash: String? = nil, commitMessage: String? = nil) {
                        self.branchName = branchName
                        self.commitHash = commitHash
                        self.commitMessage = commitMessage
                    }

                    private enum CodingKeys: String, CodingKey {
                        case branchName = "branch_name"
                        case commitHash = "commit_hash"
                        case commitMessage = "commit_message"
                    }

                    public required init(from decoder: Decoder) throws {
                        let container = try decoder.container(keyedBy: CodingKeys.self)

                        branchName = try container.decodeIfPresent(.branchName)
                        commitHash = try container.decodeIfPresent(.commitHash)
                        commitMessage = try container.decodeIfPresent(.commitMessage)
                    }

                    public func encode(to encoder: Encoder) throws {
                        var container = encoder.container(keyedBy: CodingKeys.self)

                        try container.encodeIfPresent(branchName, forKey: .branchName)
                        try container.encodeIfPresent(commitHash, forKey: .commitHash)
                        try container.encodeIfPresent(commitMessage, forKey: .commitMessage)
                    }

                    public func isEqual(to object: Any?) -> Bool {
                      guard let object = object as? Build else { return false }
                      guard self.branchName == object.branchName else { return false }
                      guard self.commitHash == object.commitHash else { return false }
                      guard self.commitMessage == object.commitMessage else { return false }
                      return true
                    }

                    public static func == (lhs: Build, rhs: Build) -> Bool {
                        return lhs.isEqual(to: rhs)
                    }
                }

                /** Updates a release. */
                public class Metadata: APIModel {

                    /** dsa signature of the release for the sparkle feed. */
                    public var dsaSignature: String?

                    public init(dsaSignature: String? = nil) {
                        self.dsaSignature = dsaSignature
                    }

                    private enum CodingKeys: String, CodingKey {
                        case dsaSignature = "dsa_signature"
                    }

                    public required init(from decoder: Decoder) throws {
                        let container = try decoder.container(keyedBy: CodingKeys.self)

                        dsaSignature = try container.decodeIfPresent(.dsaSignature)
                    }

                    public func encode(to encoder: Encoder) throws {
                        var container = encoder.container(keyedBy: CodingKeys.self)

                        try container.encodeIfPresent(dsaSignature, forKey: .dsaSignature)
                    }

                    public func isEqual(to object: Any?) -> Bool {
                      guard let object = object as? Metadata else { return false }
                      guard self.dsaSignature == object.dsaSignature else { return false }
                      return true
                    }

                    public static func == (lhs: Metadata, rhs: Metadata) -> Bool {
                        return lhs.isEqual(to: rhs)
                    }
                }

                public init(build: Build? = nil, destinationId: String? = nil, destinationName: String? = nil, destinationType: String? = nil, destinations: [Destinations]? = nil, distributionGroupId: String? = nil, distributionGroupName: String? = nil, mandatoryUpdate: Bool? = nil, metadata: Metadata? = nil, notifyTesters: Bool? = nil, releaseNotes: String? = nil) {
                    self.build = build
                    self.destinationId = destinationId
                    self.destinationName = destinationName
                    self.destinationType = destinationType
                    self.destinations = destinations
                    self.distributionGroupId = distributionGroupId
                    self.distributionGroupName = distributionGroupName
                    self.mandatoryUpdate = mandatoryUpdate
                    self.metadata = metadata
                    self.notifyTesters = notifyTesters
                    self.releaseNotes = releaseNotes
                }

                private enum CodingKeys: String, CodingKey {
                    case build
                    case destinationId = "destination_id"
                    case destinationName = "destination_name"
                    case destinationType = "destination_type"
                    case destinations
                    case distributionGroupId = "distribution_group_id"
                    case distributionGroupName = "distribution_group_name"
                    case mandatoryUpdate = "mandatory_update"
                    case metadata
                    case notifyTesters = "notify_testers"
                    case releaseNotes = "release_notes"
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)

                    build = try container.decodeIfPresent(.build)
                    destinationId = try container.decodeIfPresent(.destinationId)
                    destinationName = try container.decodeIfPresent(.destinationName)
                    destinationType = try container.decodeIfPresent(.destinationType)
                    destinations = try container.decodeArrayIfPresent(.destinations)
                    distributionGroupId = try container.decodeIfPresent(.distributionGroupId)
                    distributionGroupName = try container.decodeIfPresent(.distributionGroupName)
                    mandatoryUpdate = try container.decodeIfPresent(.mandatoryUpdate)
                    metadata = try container.decodeIfPresent(.metadata)
                    notifyTesters = try container.decodeIfPresent(.notifyTesters)
                    releaseNotes = try container.decodeIfPresent(.releaseNotes)
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)

                    try container.encodeIfPresent(build, forKey: .build)
                    try container.encodeIfPresent(destinationId, forKey: .destinationId)
                    try container.encodeIfPresent(destinationName, forKey: .destinationName)
                    try container.encodeIfPresent(destinationType, forKey: .destinationType)
                    try container.encodeIfPresent(destinations, forKey: .destinations)
                    try container.encodeIfPresent(distributionGroupId, forKey: .distributionGroupId)
                    try container.encodeIfPresent(distributionGroupName, forKey: .distributionGroupName)
                    try container.encodeIfPresent(mandatoryUpdate, forKey: .mandatoryUpdate)
                    try container.encodeIfPresent(metadata, forKey: .metadata)
                    try container.encodeIfPresent(notifyTesters, forKey: .notifyTesters)
                    try container.encodeIfPresent(releaseNotes, forKey: .releaseNotes)
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Body else { return false }
                  guard self.build == object.build else { return false }
                  guard self.destinationId == object.destinationId else { return false }
                  guard self.destinationName == object.destinationName else { return false }
                  guard self.destinationType == object.destinationType else { return false }
                  guard self.destinations == object.destinations else { return false }
                  guard self.distributionGroupId == object.distributionGroupId else { return false }
                  guard self.distributionGroupName == object.distributionGroupName else { return false }
                  guard self.mandatoryUpdate == object.mandatoryUpdate else { return false }
                  guard self.metadata == object.metadata else { return false }
                  guard self.notifyTesters == object.notifyTesters else { return false }
                  guard self.releaseNotes == object.releaseNotes else { return false }
                  return true
                }

                public static func == (lhs: Body, rhs: Body) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            public struct Options {

                /** The ID of the release */
                public var releaseId: Int

                /** The name of the owner */
                public var ownerName: String

                /** The name of the application */
                public var appName: String

                public init(releaseId: Int, ownerName: String, appName: String) {
                    self.releaseId = releaseId
                    self.ownerName = ownerName
                    self.appName = appName
                }
            }

            public var options: Options

            public var body: Body

            public init(body: Body, options: Options) {
                self.body = body
                self.options = options
                super.init(service: ReleasesUpdate.service) {
                    let jsonEncoder = JSONEncoder()
                    return try jsonEncoder.encode(body)
                }
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(releaseId: Int, body: Body, ownerName: String, appName: String) {
                let options = Options(releaseId: releaseId, ownerName: ownerName, appName: appName)
                self.init(body: body, options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "releaseId" + "}", with: "\(self.options.releaseId)").replacingOccurrences(of: "{" + "ownerName" + "}", with: "\(self.options.ownerName)").replacingOccurrences(of: "{" + "appName" + "}", with: "\(self.options.appName)")
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {

            /** Updates a release. */
            public class Status200: APIModel {

                public var releaseNotes: String?

                public init(releaseNotes: String? = nil) {
                    self.releaseNotes = releaseNotes
                }

                private enum CodingKeys: String, CodingKey {
                    case releaseNotes = "release_notes"
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)

                    releaseNotes = try container.decodeIfPresent(.releaseNotes)
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)

                    try container.encodeIfPresent(releaseNotes, forKey: .releaseNotes)
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Status200 else { return false }
                  guard self.releaseNotes == object.releaseNotes else { return false }
                  return true
                }

                public static func == (lhs: Status200, rhs: Status200) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            /** Updates a release. */
            public class Status404: APIModel {

                /** Updates a release. */
                public enum Code: String, Codable {
                    case badRequest = "BadRequest"
                    case conflict = "Conflict"
                    case notAcceptable = "NotAcceptable"
                    case notFound = "NotFound"
                    case internalServerError = "InternalServerError"
                    case unauthorized = "Unauthorized"
                    case tooManyRequests = "TooManyRequests"

                    public static let cases: [Code] = [
                      .badRequest,
                      .conflict,
                      .notAcceptable,
                      .notFound,
                      .internalServerError,
                      .unauthorized,
                      .tooManyRequests,
                    ]
                }

                public var code: Code

                public var message: String

                public init(code: Code, message: String) {
                    self.code = code
                    self.message = message
                }

                private enum CodingKeys: String, CodingKey {
                    case code
                    case message
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)

                    code = try container.decode(.code)
                    message = try container.decode(.message)
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)

                    try container.encode(code, forKey: .code)
                    try container.encode(message, forKey: .message)
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Status404 else { return false }
                  guard self.code == object.code else { return false }
                  guard self.message == object.message else { return false }
                  return true
                }

                public static func == (lhs: Status404, rhs: Status404) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }
            public typealias SuccessType = Status200

            /** Success */
            case status200(Status200)

            /** Failure */
            case status400(UNKNOWN_ALL_OFF)

            /** Release not found */
            case status404(Status404)

            public var success: Status200? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                case .status400(let response): return response
                case .status404(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status400: return 400
                case .status404: return 404
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status400: return false
                case .status404: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(Status200.self, from: data))
                case 400: self = try .status400(decoder.decode(UNKNOWN_ALL_OFF.self, from: data))
                case 404: self = try .status404(decoder.decode(Status404.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
