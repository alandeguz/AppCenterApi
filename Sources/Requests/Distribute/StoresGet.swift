//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension EngagementAPI.Distribute {

    /**
    Return the store details for specified store name.
    */
    public enum StoresGet {

        public static let service = APIService<Response>(id: "stores_get", tag: "distribute", method: "GET", path: "/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}", hasBody: false, securityRequirement: SecurityRequirement(type: "APIToken", scope: ""))

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** The name of the store */
                public var storeName: String

                /** The name of the owner */
                public var ownerName: String

                /** The name of the application */
                public var appName: String

                public init(storeName: String, ownerName: String, appName: String) {
                    self.storeName = storeName
                    self.ownerName = ownerName
                    self.appName = appName
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: StoresGet.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(storeName: String, ownerName: String, appName: String) {
                let options = Options(storeName: storeName, ownerName: ownerName, appName: appName)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "storeName" + "}", with: "\(self.options.storeName)").replacingOccurrences(of: "{" + "ownerName" + "}", with: "\(self.options.ownerName)").replacingOccurrences(of: "{" + "appName" + "}", with: "\(self.options.appName)")
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {

            /** Return the store details for specified store name. */
            public class Status200: APIModel {

                /** Store track */
                public enum Track: String, Codable {
                    case production = "production"
                    case alpha = "alpha"
                    case beta = "beta"
                    case testflightInternal = "testflight-internal"
                    case testflightExternal = "testflight-external"

                    public static let cases: [Track] = [
                      .production,
                      .alpha,
                      .beta,
                      .testflightInternal,
                      .testflightExternal,
                    ]
                }

                /** The ID of the principal that created the store. */
                public var createdBy: String?

                /** The type of the principal that created the store. */
                public var createdByPrincipalType: String?

                /** Store id */
                public var id: String?

                /** Store details for intune */
                public var intuneDetails: IntuneDetails?

                /** Store Name */
                public var name: String?

                /** Id for the shared service connection. In case of Apple / GooglePlay stores, this connection will be used to connect to the Apple / Google stores in App Center. */
                public var serviceConnectionId: String?

                /** Store track */
                public var track: Track?

                /** Store Type */
                public var type: String?

                /** Return the store details for specified store name. */
                public class IntuneDetails: APIModel {

                    public var appCategory: AppCategory?

                    public var targetAudience: TargetAudience?

                    /** Return the store details for specified store name. */
                    public class AppCategory: APIModel {

                        /** ID for the category. */
                        public var id: String?

                        /** display name for the app category */
                        public var name: String?

                        public init(id: String? = nil, name: String? = nil) {
                            self.id = id
                            self.name = name
                        }

                        private enum CodingKeys: String, CodingKey {
                            case id
                            case name
                        }

                        public required init(from decoder: Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)

                            id = try container.decodeIfPresent(.id)
                            name = try container.decodeIfPresent(.name)
                        }

                        public func encode(to encoder: Encoder) throws {
                            var container = encoder.container(keyedBy: CodingKeys.self)

                            try container.encodeIfPresent(id, forKey: .id)
                            try container.encodeIfPresent(name, forKey: .name)
                        }

                        public func isEqual(to object: Any?) -> Bool {
                          guard let object = object as? AppCategory else { return false }
                          guard self.id == object.id else { return false }
                          guard self.name == object.name else { return false }
                          return true
                        }

                        public static func == (lhs: AppCategory, rhs: AppCategory) -> Bool {
                            return lhs.isEqual(to: rhs)
                        }
                    }

                    /** Return the store details for specified store name. */
                    public class TargetAudience: APIModel {

                        /** ID for the target audience/group. */
                        public var id: String?

                        /** display name for the target audience/group */
                        public var name: String?

                        public init(id: String? = nil, name: String? = nil) {
                            self.id = id
                            self.name = name
                        }

                        private enum CodingKeys: String, CodingKey {
                            case id
                            case name
                        }

                        public required init(from decoder: Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)

                            id = try container.decodeIfPresent(.id)
                            name = try container.decodeIfPresent(.name)
                        }

                        public func encode(to encoder: Encoder) throws {
                            var container = encoder.container(keyedBy: CodingKeys.self)

                            try container.encodeIfPresent(id, forKey: .id)
                            try container.encodeIfPresent(name, forKey: .name)
                        }

                        public func isEqual(to object: Any?) -> Bool {
                          guard let object = object as? TargetAudience else { return false }
                          guard self.id == object.id else { return false }
                          guard self.name == object.name else { return false }
                          return true
                        }

                        public static func == (lhs: TargetAudience, rhs: TargetAudience) -> Bool {
                            return lhs.isEqual(to: rhs)
                        }
                    }

                    public init(appCategory: AppCategory? = nil, targetAudience: TargetAudience? = nil) {
                        self.appCategory = appCategory
                        self.targetAudience = targetAudience
                    }

                    private enum CodingKeys: String, CodingKey {
                        case appCategory = "app_category"
                        case targetAudience = "target_audience"
                    }

                    public required init(from decoder: Decoder) throws {
                        let container = try decoder.container(keyedBy: CodingKeys.self)

                        appCategory = try container.decodeIfPresent(.appCategory)
                        targetAudience = try container.decodeIfPresent(.targetAudience)
                    }

                    public func encode(to encoder: Encoder) throws {
                        var container = encoder.container(keyedBy: CodingKeys.self)

                        try container.encodeIfPresent(appCategory, forKey: .appCategory)
                        try container.encodeIfPresent(targetAudience, forKey: .targetAudience)
                    }

                    public func isEqual(to object: Any?) -> Bool {
                      guard let object = object as? IntuneDetails else { return false }
                      guard self.appCategory == object.appCategory else { return false }
                      guard self.targetAudience == object.targetAudience else { return false }
                      return true
                    }

                    public static func == (lhs: IntuneDetails, rhs: IntuneDetails) -> Bool {
                        return lhs.isEqual(to: rhs)
                    }
                }

                public init(createdBy: String? = nil, createdByPrincipalType: String? = nil, id: String? = nil, intuneDetails: IntuneDetails? = nil, name: String? = nil, serviceConnectionId: String? = nil, track: Track? = nil, type: String? = nil) {
                    self.createdBy = createdBy
                    self.createdByPrincipalType = createdByPrincipalType
                    self.id = id
                    self.intuneDetails = intuneDetails
                    self.name = name
                    self.serviceConnectionId = serviceConnectionId
                    self.track = track
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case createdBy = "created_by"
                    case createdByPrincipalType = "created_by_principal_type"
                    case id
                    case intuneDetails = "intune_details"
                    case name
                    case serviceConnectionId = "service_connection_id"
                    case track
                    case type
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)

                    createdBy = try container.decodeIfPresent(.createdBy)
                    createdByPrincipalType = try container.decodeIfPresent(.createdByPrincipalType)
                    id = try container.decodeIfPresent(.id)
                    intuneDetails = try container.decodeIfPresent(.intuneDetails)
                    name = try container.decodeIfPresent(.name)
                    serviceConnectionId = try container.decodeIfPresent(.serviceConnectionId)
                    track = try container.decodeIfPresent(.track)
                    type = try container.decodeIfPresent(.type)
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)

                    try container.encodeIfPresent(createdBy, forKey: .createdBy)
                    try container.encodeIfPresent(createdByPrincipalType, forKey: .createdByPrincipalType)
                    try container.encodeIfPresent(id, forKey: .id)
                    try container.encodeIfPresent(intuneDetails, forKey: .intuneDetails)
                    try container.encodeIfPresent(name, forKey: .name)
                    try container.encodeIfPresent(serviceConnectionId, forKey: .serviceConnectionId)
                    try container.encodeIfPresent(track, forKey: .track)
                    try container.encodeIfPresent(type, forKey: .type)
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Status200 else { return false }
                  guard self.createdBy == object.createdBy else { return false }
                  guard self.createdByPrincipalType == object.createdByPrincipalType else { return false }
                  guard self.id == object.id else { return false }
                  guard self.intuneDetails == object.intuneDetails else { return false }
                  guard self.name == object.name else { return false }
                  guard self.serviceConnectionId == object.serviceConnectionId else { return false }
                  guard self.track == object.track else { return false }
                  guard self.type == object.type else { return false }
                  return true
                }

                public static func == (lhs: Status200, rhs: Status200) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            /** Return the store details for specified store name. */
            public class DefaultResponse: APIModel {

                /** Return the store details for specified store name. */
                public enum Code: String, Codable {
                    case badRequest = "BadRequest"
                    case conflict = "Conflict"
                    case notAcceptable = "NotAcceptable"
                    case notFound = "NotFound"
                    case internalServerError = "InternalServerError"
                    case unauthorized = "Unauthorized"
                    case tooManyRequests = "TooManyRequests"

                    public static let cases: [Code] = [
                      .badRequest,
                      .conflict,
                      .notAcceptable,
                      .notFound,
                      .internalServerError,
                      .unauthorized,
                      .tooManyRequests,
                    ]
                }

                public var code: Code

                public var message: String

                public init(code: Code, message: String) {
                    self.code = code
                    self.message = message
                }

                private enum CodingKeys: String, CodingKey {
                    case code
                    case message
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)

                    code = try container.decode(.code)
                    message = try container.decode(.message)
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)

                    try container.encode(code, forKey: .code)
                    try container.encode(message, forKey: .message)
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? DefaultResponse else { return false }
                  guard self.code == object.code else { return false }
                  guard self.message == object.message else { return false }
                  return true
                }

                public static func == (lhs: DefaultResponse, rhs: DefaultResponse) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }
            public typealias SuccessType = Status200

            /** Success */
            case status200(Status200)

            /** Error */
            case defaultResponse(statusCode: Int, DefaultResponse)

            public var success: Status200? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var failure: DefaultResponse? {
                switch self {
                case .defaultResponse(_, let response): return response
                default: return nil
                }
            }

            /// either success or failure value. Success is anything in the 200..<300 status code range
            public var responseResult: APIResponseResult<Status200, DefaultResponse> {
                if let successValue = success {
                    return .success(successValue)
                } else if let failureValue = failure {
                    return .failure(failureValue)
                } else {
                    fatalError("Response does not have success or failure response")
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                case .defaultResponse(_, let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .defaultResponse(let statusCode, _): return statusCode
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .defaultResponse: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(Status200.self, from: data))
                default: self = try .defaultResponse(statusCode: statusCode, decoder.decode(DefaultResponse.self, from: data))
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
