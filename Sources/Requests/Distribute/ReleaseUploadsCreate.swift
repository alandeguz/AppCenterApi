//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension EngagementAPI.Distribute {

    /**
    Begins the upload process for a new release for the specified application.
    */
    public enum ReleaseUploadsCreate {

        public static let service = APIService<Response>(id: "releaseUploads_create", tag: "distribute", method: "POST", path: "/v0.1/apps/{owner_name}/{app_name}/release_uploads", hasBody: true, securityRequirement: SecurityRequirement(type: "APIToken", scope: ""))

        public final class Request: APIRequest<Response> {

            /** Begins the upload process for a new release for the specified application. */
            public class Body: APIModel {

                /** The build number of the uploaded binary, used with build_version for macOS app support. */
                public var buildNumber: String?

                /** The build version of the uploaded binary, used for macOS, Windows and Custom app support. */
                public var buildVersion: String?

                /** Optional value for explicitly specifying the ID of existing release. */
                public var releaseId: Double?

                public init(buildNumber: String? = nil, buildVersion: String? = nil, releaseId: Double? = nil) {
                    self.buildNumber = buildNumber
                    self.buildVersion = buildVersion
                    self.releaseId = releaseId
                }

                private enum CodingKeys: String, CodingKey {
                    case buildNumber = "build_number"
                    case buildVersion = "build_version"
                    case releaseId = "release_id"
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)

                    buildNumber = try container.decodeIfPresent(.buildNumber)
                    buildVersion = try container.decodeIfPresent(.buildVersion)
                    releaseId = try container.decodeIfPresent(.releaseId)
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)

                    try container.encodeIfPresent(buildNumber, forKey: .buildNumber)
                    try container.encodeIfPresent(buildVersion, forKey: .buildVersion)
                    try container.encodeIfPresent(releaseId, forKey: .releaseId)
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Body else { return false }
                  guard self.buildNumber == object.buildNumber else { return false }
                  guard self.buildVersion == object.buildVersion else { return false }
                  guard self.releaseId == object.releaseId else { return false }
                  return true
                }

                public static func == (lhs: Body, rhs: Body) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            public struct Options {

                /** The name of the owner */
                public var ownerName: String

                /** The name of the application */
                public var appName: String

                public init(ownerName: String, appName: String) {
                    self.ownerName = ownerName
                    self.appName = appName
                }
            }

            public var options: Options

            public var body: Body

            public init(body: Body, options: Options) {
                self.body = body
                self.options = options
                super.init(service: ReleaseUploadsCreate.service) {
                    let jsonEncoder = JSONEncoder()
                    return try jsonEncoder.encode(body)
                }
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(body: Body, ownerName: String, appName: String) {
                let options = Options(ownerName: ownerName, appName: appName)
                self.init(body: body, options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "ownerName" + "}", with: "\(self.options.ownerName)").replacingOccurrences(of: "{" + "appName" + "}", with: "\(self.options.appName)")
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {

            /** Begins the upload process for a new release for the specified application. */
            public class Status201: APIModel {

                /** The ID for the current upload */
                public var uploadId: String

                /** The URL where the client needs to upload the release to */
                public var uploadURL: String

                /** The URL for the current upload, reserved for future use */
                public var assetDomain: String?

                /** The ID for the current upload, reserved for future use */
                public var assetId: String?

                /** The token for the current upload, reserved for future use */
                public var assetToken: String?

                public init(uploadId: String, uploadURL: String, assetDomain: String? = nil, assetId: String? = nil, assetToken: String? = nil) {
                    self.uploadId = uploadId
                    self.uploadURL = uploadURL
                    self.assetDomain = assetDomain
                    self.assetId = assetId
                    self.assetToken = assetToken
                }

                private enum CodingKeys: String, CodingKey {
                    case uploadId = "upload_id"
                    case uploadURL = "upload_url"
                    case assetDomain = "asset_domain"
                    case assetId = "asset_id"
                    case assetToken = "asset_token"
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)

                    uploadId = try container.decode(.uploadId)
                    uploadURL = try container.decode(.uploadURL)
                    assetDomain = try container.decodeIfPresent(.assetDomain)
                    assetId = try container.decodeIfPresent(.assetId)
                    assetToken = try container.decodeIfPresent(.assetToken)
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)

                    try container.encode(uploadId, forKey: .uploadId)
                    try container.encode(uploadURL, forKey: .uploadURL)
                    try container.encodeIfPresent(assetDomain, forKey: .assetDomain)
                    try container.encodeIfPresent(assetId, forKey: .assetId)
                    try container.encodeIfPresent(assetToken, forKey: .assetToken)
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Status201 else { return false }
                  guard self.uploadId == object.uploadId else { return false }
                  guard self.uploadURL == object.uploadURL else { return false }
                  guard self.assetDomain == object.assetDomain else { return false }
                  guard self.assetId == object.assetId else { return false }
                  guard self.assetToken == object.assetToken else { return false }
                  return true
                }

                public static func == (lhs: Status201, rhs: Status201) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }
            public typealias SuccessType = Status201

            /** Success */
            case status201(Status201)

            public var success: Status201? {
                switch self {
                case .status201(let response): return response
                }
            }

            public var response: Any {
                switch self {
                case .status201(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status201: return 201
                }
            }

            public var successful: Bool {
                switch self {
                case .status201: return true
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 201: self = try .status201(decoder.decode(Status201.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
