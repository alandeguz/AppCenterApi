//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension EngagementAPI.Distribute {

    /**
    Return basic information about releases.
    */
    public enum ReleasesList {

        public static let service = APIService<Response>(id: "releases_list", tag: "distribute", method: "GET", path: "/v0.1/apps/{owner_name}/{app_name}/releases", hasBody: false, securityRequirement: SecurityRequirement(type: "APIToken", scope: ""))

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** When *true*, filters out releases that were uploaded but were never distributed. Releases that under deleted distribution groups will not be filtered out. */
                public var publishedOnly: Bool?

                /** When the scope is 'tester', only includes releases that have been distributed to groups that the user belongs to. */
                public var scope: String?

                /** The name of the owner */
                public var ownerName: String

                /** The name of the application */
                public var appName: String

                public init(publishedOnly: Bool? = nil, scope: String? = nil, ownerName: String, appName: String) {
                    self.publishedOnly = publishedOnly
                    self.scope = scope
                    self.ownerName = ownerName
                    self.appName = appName
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: ReleasesList.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(publishedOnly: Bool? = nil, scope: String? = nil, ownerName: String, appName: String) {
                let options = Options(publishedOnly: publishedOnly, scope: scope, ownerName: ownerName, appName: appName)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "ownerName" + "}", with: "\(self.options.ownerName)").replacingOccurrences(of: "{" + "appName" + "}", with: "\(self.options.appName)")
            }

            public override var parameters: [String: Any] {
                var params: [String: Any] = [:]
                if let publishedOnly = options.publishedOnly {
                  params["published_only"] = publishedOnly
                }
                if let scope = options.scope {
                  params["scope"] = scope
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = [Status200]

            /** Success */
            case status200([Status200])

            public var success: [Status200]? {
                switch self {
                case .status200(let response): return response
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode([Status200].self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
