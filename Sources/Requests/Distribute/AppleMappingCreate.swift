//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension EngagementAPI.Distribute {

    /**
    Create a mapping for an existing app in apple store for the specified application.
    */
    public enum AppleMappingCreate {

        public static let service = APIService<Response>(id: "appleMapping_create", tag: "distribute", method: "POST", path: "/v0.1/apps/{owner_name}/{app_name}/apple_mapping", hasBody: true, securityRequirement: SecurityRequirement(type: "APIToken", scope: ""))

        public final class Request: APIRequest<Response> {

            /** Create a mapping for an existing app in apple store for the specified application. */
            public class Body: APIModel {

                /** Id for the shared service connection. In case of Apple AppStore, this connection will be used to create and connect to the Apple AppStore in Mobile Center. */
                public var serviceConnectionId: String

                /** ID of the Team associated with the app in apple store */
                public var teamIdentifier: String

                /** ID of the apple application in apple store, takes precedence over bundle_identifier when both are provided */
                public var appleId: String?

                /** Bundle Identifier of the apple package */
                public var bundleIdentifier: String?

                public init(serviceConnectionId: String, teamIdentifier: String, appleId: String? = nil, bundleIdentifier: String? = nil) {
                    self.serviceConnectionId = serviceConnectionId
                    self.teamIdentifier = teamIdentifier
                    self.appleId = appleId
                    self.bundleIdentifier = bundleIdentifier
                }

                private enum CodingKeys: String, CodingKey {
                    case serviceConnectionId = "service_connection_id"
                    case teamIdentifier = "team_identifier"
                    case appleId = "apple_id"
                    case bundleIdentifier = "bundle_identifier"
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)

                    serviceConnectionId = try container.decode(.serviceConnectionId)
                    teamIdentifier = try container.decode(.teamIdentifier)
                    appleId = try container.decodeIfPresent(.appleId)
                    bundleIdentifier = try container.decodeIfPresent(.bundleIdentifier)
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)

                    try container.encode(serviceConnectionId, forKey: .serviceConnectionId)
                    try container.encode(teamIdentifier, forKey: .teamIdentifier)
                    try container.encodeIfPresent(appleId, forKey: .appleId)
                    try container.encodeIfPresent(bundleIdentifier, forKey: .bundleIdentifier)
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Body else { return false }
                  guard self.serviceConnectionId == object.serviceConnectionId else { return false }
                  guard self.teamIdentifier == object.teamIdentifier else { return false }
                  guard self.appleId == object.appleId else { return false }
                  guard self.bundleIdentifier == object.bundleIdentifier else { return false }
                  return true
                }

                public static func == (lhs: Body, rhs: Body) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            public struct Options {

                /** The name of the owner */
                public var ownerName: String

                /** The name of the application */
                public var appName: String

                public init(ownerName: String, appName: String) {
                    self.ownerName = ownerName
                    self.appName = appName
                }
            }

            public var options: Options

            public var body: Body

            public init(body: Body, options: Options) {
                self.body = body
                self.options = options
                super.init(service: AppleMappingCreate.service) {
                    let jsonEncoder = JSONEncoder()
                    return try jsonEncoder.encode(body)
                }
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(body: Body, ownerName: String, appName: String) {
                let options = Options(ownerName: ownerName, appName: appName)
                self.init(body: body, options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "ownerName" + "}", with: "\(self.options.ownerName)").replacingOccurrences(of: "{" + "appName" + "}", with: "\(self.options.appName)")
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {

            /** Create a mapping for an existing app in apple store for the specified application. */
            public class Status201: APIModel {

                /** ID of the apple application in Mobile Center */
                public var appId: String?

                /** ID of the apple application in apple store */
                public var appleId: String?

                /** Id for the shared service connection. In case of Apple AppStore, this connection will be used to create and connect to the Apple AppStore in Mobile Center. */
                public var serviceConnectionId: String?

                /** ID of the Team associated with the app in apple store */
                public var teamIdentifier: String?

                public init(appId: String? = nil, appleId: String? = nil, serviceConnectionId: String? = nil, teamIdentifier: String? = nil) {
                    self.appId = appId
                    self.appleId = appleId
                    self.serviceConnectionId = serviceConnectionId
                    self.teamIdentifier = teamIdentifier
                }

                private enum CodingKeys: String, CodingKey {
                    case appId = "app_id"
                    case appleId = "apple_id"
                    case serviceConnectionId = "service_connection_id"
                    case teamIdentifier = "team_identifier"
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)

                    appId = try container.decodeIfPresent(.appId)
                    appleId = try container.decodeIfPresent(.appleId)
                    serviceConnectionId = try container.decodeIfPresent(.serviceConnectionId)
                    teamIdentifier = try container.decodeIfPresent(.teamIdentifier)
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)

                    try container.encodeIfPresent(appId, forKey: .appId)
                    try container.encodeIfPresent(appleId, forKey: .appleId)
                    try container.encodeIfPresent(serviceConnectionId, forKey: .serviceConnectionId)
                    try container.encodeIfPresent(teamIdentifier, forKey: .teamIdentifier)
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Status201 else { return false }
                  guard self.appId == object.appId else { return false }
                  guard self.appleId == object.appleId else { return false }
                  guard self.serviceConnectionId == object.serviceConnectionId else { return false }
                  guard self.teamIdentifier == object.teamIdentifier else { return false }
                  return true
                }

                public static func == (lhs: Status201, rhs: Status201) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            /** Create a mapping for an existing app in apple store for the specified application. */
            public class DefaultResponse: APIModel {

                /** Create a mapping for an existing app in apple store for the specified application. */
                public enum Code: String, Codable {
                    case badRequest = "BadRequest"
                    case conflict = "Conflict"
                    case notAcceptable = "NotAcceptable"
                    case notFound = "NotFound"
                    case internalServerError = "InternalServerError"
                    case unauthorized = "Unauthorized"
                    case tooManyRequests = "TooManyRequests"

                    public static let cases: [Code] = [
                      .badRequest,
                      .conflict,
                      .notAcceptable,
                      .notFound,
                      .internalServerError,
                      .unauthorized,
                      .tooManyRequests,
                    ]
                }

                public var code: Code

                public var message: String

                public init(code: Code, message: String) {
                    self.code = code
                    self.message = message
                }

                private enum CodingKeys: String, CodingKey {
                    case code
                    case message
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)

                    code = try container.decode(.code)
                    message = try container.decode(.message)
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)

                    try container.encode(code, forKey: .code)
                    try container.encode(message, forKey: .message)
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? DefaultResponse else { return false }
                  guard self.code == object.code else { return false }
                  guard self.message == object.message else { return false }
                  return true
                }

                public static func == (lhs: DefaultResponse, rhs: DefaultResponse) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }
            public typealias SuccessType = Status201

            /** Success */
            case status201(Status201)

            /** Error */
            case defaultResponse(statusCode: Int, DefaultResponse)

            public var success: Status201? {
                switch self {
                case .status201(let response): return response
                default: return nil
                }
            }

            public var failure: DefaultResponse? {
                switch self {
                case .defaultResponse(_, let response): return response
                default: return nil
                }
            }

            /// either success or failure value. Success is anything in the 200..<300 status code range
            public var responseResult: APIResponseResult<Status201, DefaultResponse> {
                if let successValue = success {
                    return .success(successValue)
                } else if let failureValue = failure {
                    return .failure(failureValue)
                } else {
                    fatalError("Response does not have success or failure response")
                }
            }

            public var response: Any {
                switch self {
                case .status201(let response): return response
                case .defaultResponse(_, let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status201: return 201
                case .defaultResponse(let statusCode, _): return statusCode
                }
            }

            public var successful: Bool {
                switch self {
                case .status201: return true
                case .defaultResponse: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 201: self = try .status201(decoder.decode(Status201.self, from: data))
                default: self = try .defaultResponse(statusCode: statusCode, decoder.decode(DefaultResponse.self, from: data))
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
