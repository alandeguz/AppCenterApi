//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension EngagementAPI.Distribute {

    /**
    Commits or aborts the upload process for a release for the specified application
    */
    public enum ReleaseUploadsComplete {

        public static let service = APIService<Response>(id: "releaseUploads_complete", tag: "distribute", method: "PATCH", path: "/v0.1/apps/{owner_name}/{app_name}/release_uploads/{upload_id}", hasBody: true, securityRequirement: SecurityRequirement(type: "APIToken", scope: ""))

        public final class Request: APIRequest<Response> {

            /** Commits or aborts the upload process for a release for the specified application */
            public class Body: APIModel {

                /** The desired operation for the upload */
                public enum Status: String, Codable {
                    case committed = "committed"
                    case aborted = "aborted"

                    public static let cases: [Status] = [
                      .committed,
                      .aborted,
                    ]
                }

                /** The desired operation for the upload */
                public var status: Status

                public init(status: Status) {
                    self.status = status
                }

                private enum CodingKeys: String, CodingKey {
                    case status
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)

                    status = try container.decode(.status)
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)

                    try container.encode(status, forKey: .status)
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Body else { return false }
                  guard self.status == object.status else { return false }
                  return true
                }

                public static func == (lhs: Body, rhs: Body) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            public struct Options {

                /** The ID of the upload */
                public var uploadId: String

                /** The name of the owner */
                public var ownerName: String

                /** The name of the application */
                public var appName: String

                public init(uploadId: String, ownerName: String, appName: String) {
                    self.uploadId = uploadId
                    self.ownerName = ownerName
                    self.appName = appName
                }
            }

            public var options: Options

            public var body: Body

            public init(body: Body, options: Options) {
                self.body = body
                self.options = options
                super.init(service: ReleaseUploadsComplete.service) {
                    let jsonEncoder = JSONEncoder()
                    return try jsonEncoder.encode(body)
                }
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(uploadId: String, body: Body, ownerName: String, appName: String) {
                let options = Options(uploadId: uploadId, ownerName: ownerName, appName: appName)
                self.init(body: body, options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "uploadId" + "}", with: "\(self.options.uploadId)").replacingOccurrences(of: "{" + "ownerName" + "}", with: "\(self.options.ownerName)").replacingOccurrences(of: "{" + "appName" + "}", with: "\(self.options.appName)")
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {

            /** Commits or aborts the upload process for a release for the specified application */
            public class Status200: APIModel {

                /** The ID of the release. */
                public var releaseId: Double?

                /** A URL to the new release. If upload was aborted will be null. */
                public var releaseURL: String?

                public init(releaseId: Double? = nil, releaseURL: String? = nil) {
                    self.releaseId = releaseId
                    self.releaseURL = releaseURL
                }

                private enum CodingKeys: String, CodingKey {
                    case releaseId = "release_id"
                    case releaseURL = "release_url"
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)

                    releaseId = try container.decodeIfPresent(.releaseId)
                    releaseURL = try container.decodeIfPresent(.releaseURL)
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)

                    try container.encodeIfPresent(releaseId, forKey: .releaseId)
                    try container.encodeIfPresent(releaseURL, forKey: .releaseURL)
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Status200 else { return false }
                  guard self.releaseId == object.releaseId else { return false }
                  guard self.releaseURL == object.releaseURL else { return false }
                  return true
                }

                public static func == (lhs: Status200, rhs: Status200) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }
            public typealias SuccessType = Status200

            /** Success */
            case status200(Status200)

            /** Unknown upload_id or status was committed but the upload hasn't finished. */
            case status400

            public var success: Status200? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                default: return ()
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status400: return 400
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status400: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(Status200.self, from: data))
                case 400: self = .status400
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
