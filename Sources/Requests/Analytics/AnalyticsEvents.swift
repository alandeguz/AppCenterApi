//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension EngagementAPI.Analytics {

    /**
    Count of active events in the time range ordered by event.
    */
    public enum AnalyticsEvents {

        public static let service = APIService<Response>(id: "Analytics_Events", tag: "analytics", method: "GET", path: "/v0.1/apps/{owner_name}/{app_name}/analytics/events", hasBody: false, securityRequirement: SecurityRequirement(type: "APIToken", scope: ""))

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** Start date time in data in ISO 8601 date time format. */
                public var start: DateTime

                /** Last date time in data in ISO 8601 date time format. */
                public var end: DateTime?

                public var versions: [String]?

                /** To select the specific events. */
                public var eventName: [String]?

                /** The maximum number of results to return. (0 will fetch all results) */
                public var dollartop: Int?

                /** The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. */
                public var dollarskip: Int?

                /** Controls whether or not to include a count of all the items across all pages. */
                public var dollarinlinecount: InlineCountParameter?

                /** controls the sorting order and sorting based on which column */
                public var dollarorderby: String?

                /** The name of the owner */
                public var ownerName: String

                /** The name of the application */
                public var appName: String

                public init(start: DateTime, end: DateTime? = nil, versions: [String]? = nil, eventName: [String]? = nil, dollartop: Int? = nil, dollarskip: Int? = nil, dollarinlinecount: InlineCountParameter? = nil, dollarorderby: String? = nil, ownerName: String, appName: String) {
                    self.start = start
                    self.end = end
                    self.versions = versions
                    self.eventName = eventName
                    self.dollartop = dollartop
                    self.dollarskip = dollarskip
                    self.dollarinlinecount = dollarinlinecount
                    self.dollarorderby = dollarorderby
                    self.ownerName = ownerName
                    self.appName = appName
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: AnalyticsEvents.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(start: DateTime, end: DateTime? = nil, versions: [String]? = nil, eventName: [String]? = nil, dollartop: Int? = nil, dollarskip: Int? = nil, dollarinlinecount: InlineCountParameter? = nil, dollarorderby: String? = nil, ownerName: String, appName: String) {
                let options = Options(start: start, end: end, versions: versions, eventName: eventName, dollartop: dollartop, dollarskip: dollarskip, dollarinlinecount: dollarinlinecount, dollarorderby: dollarorderby, ownerName: ownerName, appName: appName)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "ownerName" + "}", with: "\(self.options.ownerName)").replacingOccurrences(of: "{" + "appName" + "}", with: "\(self.options.appName)")
            }

            public override var parameters: [String: Any] {
                var params: [String: Any] = [:]
                params["start"] = options.start.encode()
                if let end = options.end?.encode() {
                  params["end"] = end
                }
                if let versions = options.versions?.joined(separator: "|") {
                  params["versions"] = versions
                }
                if let eventName = options.eventName?.joined(separator: "|") {
                  params["event_name"] = eventName
                }
                if let dollartop = options.dollartop {
                  params["$top"] = dollartop
                }
                if let dollarskip = options.dollarskip {
                  params["$skip"] = dollarskip
                }
                if let dollarinlinecount = options.dollarinlinecount?.encode() {
                  params["$inlinecount"] = dollarinlinecount
                }
                if let dollarorderby = options.dollarorderby {
                  params["$orderby"] = dollarorderby
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {

            /** Count of active events in the time range ordered by event. */
            public class Status200: APIModel {

                public var events: [Events]?

                /** The total count of events. */
                public var total: Int?

                /** The active device over this period. */
                public var totalDevices: Int?

                public init(events: [Events]? = nil, total: Int? = nil, totalDevices: Int? = nil) {
                    self.events = events
                    self.total = total
                    self.totalDevices = totalDevices
                }

                private enum CodingKeys: String, CodingKey {
                    case events
                    case total
                    case totalDevices = "total_devices"
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)

                    events = try container.decodeArrayIfPresent(.events)
                    total = try container.decodeIfPresent(.total)
                    totalDevices = try container.decodeIfPresent(.totalDevices)
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)

                    try container.encodeIfPresent(events, forKey: .events)
                    try container.encodeIfPresent(total, forKey: .total)
                    try container.encodeIfPresent(totalDevices, forKey: .totalDevices)
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Status200 else { return false }
                  guard self.events == object.events else { return false }
                  guard self.total == object.total else { return false }
                  guard self.totalDevices == object.totalDevices else { return false }
                  return true
                }

                public static func == (lhs: Status200, rhs: Status200) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            /** Count of active events in the time range ordered by event. */
            public class DefaultResponse: APIModel {

                public var error: ErrorType?

                /** Count of active events in the time range ordered by event. */
                public class ErrorType: APIModel {

                    /** The status code return by the API. It can be 400 or 403 or 500. */
                    public enum Code: Int, Codable {
                        case _400 = 400
                        case _403 = 403
                        case _500 = 500

                        public static let cases: [Code] = [
                          ._400,
                          ._403,
                          ._500,
                        ]
                    }

                    /** The status code return by the API. It can be 400 or 403 or 500. */
                    public var code: Code?

                    /** The reason for the request failed. */
                    public var message: String?

                    public init(code: Code? = nil, message: String? = nil) {
                        self.code = code
                        self.message = message
                    }

                    private enum CodingKeys: String, CodingKey {
                        case code
                        case message
                    }

                    public required init(from decoder: Decoder) throws {
                        let container = try decoder.container(keyedBy: CodingKeys.self)

                        code = try container.decodeIfPresent(.code)
                        message = try container.decodeIfPresent(.message)
                    }

                    public func encode(to encoder: Encoder) throws {
                        var container = encoder.container(keyedBy: CodingKeys.self)

                        try container.encodeIfPresent(code, forKey: .code)
                        try container.encodeIfPresent(message, forKey: .message)
                    }

                    public func isEqual(to object: Any?) -> Bool {
                      guard let object = object as? ErrorType else { return false }
                      guard self.code == object.code else { return false }
                      guard self.message == object.message else { return false }
                      return true
                    }

                    public static func == (lhs: ErrorType, rhs: ErrorType) -> Bool {
                        return lhs.isEqual(to: rhs)
                    }
                }

                public init(error: ErrorType? = nil) {
                    self.error = error
                }

                private enum CodingKeys: String, CodingKey {
                    case error
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)

                    error = try container.decodeIfPresent(.error)
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)

                    try container.encodeIfPresent(error, forKey: .error)
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? DefaultResponse else { return false }
                  guard self.error == object.error else { return false }
                  return true
                }

                public static func == (lhs: DefaultResponse, rhs: DefaultResponse) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }
            public typealias SuccessType = Status200

            /** Count of active events in the time range ordered by event. */
            case status200(Status200)

            /** Error code with reason. */
            case defaultResponse(statusCode: Int, DefaultResponse)

            public var success: Status200? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var failure: DefaultResponse? {
                switch self {
                case .defaultResponse(_, let response): return response
                default: return nil
                }
            }

            /// either success or failure value. Success is anything in the 200..<300 status code range
            public var responseResult: APIResponseResult<Status200, DefaultResponse> {
                if let successValue = success {
                    return .success(successValue)
                } else if let failureValue = failure {
                    return .failure(failureValue)
                } else {
                    fatalError("Response does not have success or failure response")
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                case .defaultResponse(_, let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .defaultResponse(let statusCode, _): return statusCode
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .defaultResponse: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(Status200.self, from: data))
                default: self = try .defaultResponse(statusCode: statusCode, decoder.decode(DefaultResponse.self, from: data))
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
