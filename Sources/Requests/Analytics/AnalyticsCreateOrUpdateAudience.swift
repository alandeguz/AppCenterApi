//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension EngagementAPI.Analytics {

    /**
    Creates or updates audience definition.
    */
    public enum AnalyticsCreateOrUpdateAudience {

        public static let service = APIService<Response>(id: "Analytics_CreateOrUpdateAudience", tag: "analytics", method: "PUT", path: "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}", hasBody: true, securityRequirement: SecurityRequirement(type: "APIToken", scope: ""))

        public final class Request: APIRequest<Response> {

            /** Creates or updates audience definition. */
            public class Audience: APIModel {

                /** Custom properties used in the definition. */
                public enum CustomProperties: String, Codable {
                    case string = "string"
                    case number = "number"
                    case boolean = "boolean"
                    case dateTime = "date_time"

                    public static let cases: [CustomProperties] = [
                      .string,
                      .number,
                      .boolean,
                      .dateTime,
                    ]
                }

                /** Audience definition in OData format. */
                public var definition: String

                /** Custom properties used in the definition. */
                public var customProperties: [String: CustomProperties]?

                /** Audience description. */
                public var description: String?

                public var enabled: Bool?

                public init(definition: String, customProperties: [String: CustomProperties]? = nil, description: String? = nil, enabled: Bool? = nil) {
                    self.definition = definition
                    self.customProperties = customProperties
                    self.description = description
                    self.enabled = enabled
                }

                private enum CodingKeys: String, CodingKey {
                    case definition
                    case customProperties = "custom_properties"
                    case description
                    case enabled
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)

                    definition = try container.decode(.definition)
                    customProperties = try container.decodeIfPresent(.customProperties)
                    description = try container.decodeIfPresent(.description)
                    enabled = try container.decodeIfPresent(.enabled)
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)

                    try container.encode(definition, forKey: .definition)
                    try container.encodeIfPresent(customProperties, forKey: .customProperties)
                    try container.encodeIfPresent(description, forKey: .description)
                    try container.encodeIfPresent(enabled, forKey: .enabled)
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Audience else { return false }
                  guard self.definition == object.definition else { return false }
                  guard self.customProperties == object.customProperties else { return false }
                  guard self.description == object.description else { return false }
                  guard self.enabled == object.enabled else { return false }
                  return true
                }

                public static func == (lhs: Audience, rhs: Audience) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            public struct Options {

                /** The name of the audience */
                public var audienceName: String

                /** The name of the owner */
                public var ownerName: String

                /** The name of the application */
                public var appName: String

                public init(audienceName: String, ownerName: String, appName: String) {
                    self.audienceName = audienceName
                    self.ownerName = ownerName
                    self.appName = appName
                }
            }

            public var options: Options

            public var audience: Audience

            public init(audience: Audience, options: Options) {
                self.audience = audience
                self.options = options
                super.init(service: AnalyticsCreateOrUpdateAudience.service) {
                    let jsonEncoder = JSONEncoder()
                    return try jsonEncoder.encode(audience)
                }
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(audienceName: String, audience: Audience, ownerName: String, appName: String) {
                let options = Options(audienceName: audienceName, ownerName: ownerName, appName: appName)
                self.init(audience: audience, options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "audienceName" + "}", with: "\(self.options.audienceName)").replacingOccurrences(of: "{" + "ownerName" + "}", with: "\(self.options.ownerName)").replacingOccurrences(of: "{" + "appName" + "}", with: "\(self.options.appName)")
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {

            /** Creates or updates audience definition. */
            public class Status200: APIModel {

                /** Custom properties used in the definition. */
                public enum CustomProperties: String, Codable {
                    case string = "string"
                    case number = "number"
                    case boolean = "boolean"
                    case dateTime = "date_time"

                    public static let cases: [CustomProperties] = [
                      .string,
                      .number,
                      .boolean,
                      .dateTime,
                    ]
                }

                /** Custom properties used in the definition. */
                public var customProperties: [String: CustomProperties]?

                public var enabled: Bool?

                /** Estimated total audience size. */
                public var estimatedTotalCount: Int?

                /** Date the audience was last refreshed. */
                public var timestamp: DateTime?

                public init(customProperties: [String: CustomProperties]? = nil, enabled: Bool? = nil, estimatedTotalCount: Int? = nil, timestamp: DateTime? = nil) {
                    self.customProperties = customProperties
                    self.enabled = enabled
                    self.estimatedTotalCount = estimatedTotalCount
                    self.timestamp = timestamp
                }

                private enum CodingKeys: String, CodingKey {
                    case customProperties = "custom_properties"
                    case enabled
                    case estimatedTotalCount = "estimated_total_count"
                    case timestamp
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)

                    customProperties = try container.decodeIfPresent(.customProperties)
                    enabled = try container.decodeIfPresent(.enabled)
                    estimatedTotalCount = try container.decodeIfPresent(.estimatedTotalCount)
                    timestamp = try container.decodeIfPresent(.timestamp)
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)

                    try container.encodeIfPresent(customProperties, forKey: .customProperties)
                    try container.encodeIfPresent(enabled, forKey: .enabled)
                    try container.encodeIfPresent(estimatedTotalCount, forKey: .estimatedTotalCount)
                    try container.encodeIfPresent(timestamp, forKey: .timestamp)
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Status200 else { return false }
                  guard self.customProperties == object.customProperties else { return false }
                  guard self.enabled == object.enabled else { return false }
                  guard self.estimatedTotalCount == object.estimatedTotalCount else { return false }
                  guard self.timestamp == object.timestamp else { return false }
                  return true
                }

                public static func == (lhs: Status200, rhs: Status200) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            /** Creates or updates audience definition. */
            public class DefaultResponse: APIModel {

                public var error: ErrorType

                /** Creates or updates audience definition. */
                public class ErrorType: APIModel {

                    /** Creates or updates audience definition. */
                    public enum Code: String, Codable {
                        case badRequest = "BadRequest"
                        case conflict = "Conflict"
                        case notAcceptable = "NotAcceptable"
                        case notFound = "NotFound"
                        case internalServerError = "InternalServerError"
                        case unauthorized = "Unauthorized"
                        case tooManyRequests = "TooManyRequests"

                        public static let cases: [Code] = [
                          .badRequest,
                          .conflict,
                          .notAcceptable,
                          .notFound,
                          .internalServerError,
                          .unauthorized,
                          .tooManyRequests,
                        ]
                    }

                    public var code: Code

                    public var message: String

                    public init(code: Code, message: String) {
                        self.code = code
                        self.message = message
                    }

                    private enum CodingKeys: String, CodingKey {
                        case code
                        case message
                    }

                    public required init(from decoder: Decoder) throws {
                        let container = try decoder.container(keyedBy: CodingKeys.self)

                        code = try container.decode(.code)
                        message = try container.decode(.message)
                    }

                    public func encode(to encoder: Encoder) throws {
                        var container = encoder.container(keyedBy: CodingKeys.self)

                        try container.encode(code, forKey: .code)
                        try container.encode(message, forKey: .message)
                    }

                    public func isEqual(to object: Any?) -> Bool {
                      guard let object = object as? ErrorType else { return false }
                      guard self.code == object.code else { return false }
                      guard self.message == object.message else { return false }
                      return true
                    }

                    public static func == (lhs: ErrorType, rhs: ErrorType) -> Bool {
                        return lhs.isEqual(to: rhs)
                    }
                }

                public init(error: ErrorType) {
                    self.error = error
                }

                private enum CodingKeys: String, CodingKey {
                    case error
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)

                    error = try container.decode(.error)
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)

                    try container.encode(error, forKey: .error)
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? DefaultResponse else { return false }
                  guard self.error == object.error else { return false }
                  return true
                }

                public static func == (lhs: DefaultResponse, rhs: DefaultResponse) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }
            public typealias SuccessType = Status200

            /** Updated audiences definition. */
            case status200(Status200)

            /** Error code with reason */
            case defaultResponse(statusCode: Int, DefaultResponse)

            public var success: Status200? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var failure: DefaultResponse? {
                switch self {
                case .defaultResponse(_, let response): return response
                default: return nil
                }
            }

            /// either success or failure value. Success is anything in the 200..<300 status code range
            public var responseResult: APIResponseResult<Status200, DefaultResponse> {
                if let successValue = success {
                    return .success(successValue)
                } else if let failureValue = failure {
                    return .failure(failureValue)
                } else {
                    fatalError("Response does not have success or failure response")
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                case .defaultResponse(_, let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .defaultResponse(let statusCode, _): return statusCode
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .defaultResponse: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(Status200.self, from: data))
                default: self = try .defaultResponse(statusCode: statusCode, decoder.decode(DefaultResponse.self, from: data))
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
