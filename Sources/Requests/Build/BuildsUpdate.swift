//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension EngagementAPI.Build {

    /**
    Cancels a build
    */
    public enum BuildsUpdate {

        public static let service = APIService<Response>(id: "builds_update", tag: "build", method: "PATCH", path: "/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}", hasBody: true, securityRequirement: SecurityRequirement(type: "APIToken", scope: ""))

        public final class Request: APIRequest<Response> {

            /** Cancels a build */
            public class Properties: APIModel {

                /** The build status; used to cancel builds */
                public enum Status: String, Codable {
                    case cancelling = "cancelling"

                    public static let cases: [Status] = [
                      .cancelling,
                    ]
                }

                /** The build status; used to cancel builds */
                public var status: Status?

                public init(status: Status? = nil) {
                    self.status = status
                }

                private enum CodingKeys: String, CodingKey {
                    case status
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)

                    status = try container.decodeIfPresent(.status)
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)

                    try container.encodeIfPresent(status, forKey: .status)
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Properties else { return false }
                  guard self.status == object.status else { return false }
                  return true
                }

                public static func == (lhs: Properties, rhs: Properties) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            public struct Options {

                /** The build ID */
                public var buildId: Int

                /** The name of the owner */
                public var ownerName: String

                /** The name of the application */
                public var appName: String

                public init(buildId: Int, ownerName: String, appName: String) {
                    self.buildId = buildId
                    self.ownerName = ownerName
                    self.appName = appName
                }
            }

            public var options: Options

            public var properties: Properties

            public init(properties: Properties, options: Options) {
                self.properties = properties
                self.options = options
                super.init(service: BuildsUpdate.service) {
                    let jsonEncoder = JSONEncoder()
                    return try jsonEncoder.encode(properties)
                }
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(buildId: Int, properties: Properties, ownerName: String, appName: String) {
                let options = Options(buildId: buildId, ownerName: ownerName, appName: appName)
                self.init(properties: properties, options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "buildId" + "}", with: "\(self.options.buildId)").replacingOccurrences(of: "{" + "ownerName" + "}", with: "\(self.options.ownerName)").replacingOccurrences(of: "{" + "appName" + "}", with: "\(self.options.appName)")
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {

            /** Cancels a build */
            public class Status200: APIModel {

                /** The build ID */
                public var id: Int

                /** The build number */
                public var buildNumber: String

                /** The time the build was queued */
                public var queueTime: String

                /** The build status */
                public var status: String

                /** The build result */
                public var result: String

                /** The source branch name */
                public var sourceBranch: String

                /** The source SHA */
                public var sourceVersion: String

                /** The time the build was finished */
                public var finishTime: String?

                /** The time the build status was last changed */
                public var lastChangedDate: String?

                /** The time the build was started */
                public var startTime: String?

                public init(id: Int, buildNumber: String, queueTime: String, status: String, result: String, sourceBranch: String, sourceVersion: String, finishTime: String? = nil, lastChangedDate: String? = nil, startTime: String? = nil) {
                    self.id = id
                    self.buildNumber = buildNumber
                    self.queueTime = queueTime
                    self.status = status
                    self.result = result
                    self.sourceBranch = sourceBranch
                    self.sourceVersion = sourceVersion
                    self.finishTime = finishTime
                    self.lastChangedDate = lastChangedDate
                    self.startTime = startTime
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case buildNumber
                    case queueTime
                    case status
                    case result
                    case sourceBranch
                    case sourceVersion
                    case finishTime
                    case lastChangedDate
                    case startTime
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)

                    id = try container.decode(.id)
                    buildNumber = try container.decode(.buildNumber)
                    queueTime = try container.decode(.queueTime)
                    status = try container.decode(.status)
                    result = try container.decode(.result)
                    sourceBranch = try container.decode(.sourceBranch)
                    sourceVersion = try container.decode(.sourceVersion)
                    finishTime = try container.decodeIfPresent(.finishTime)
                    lastChangedDate = try container.decodeIfPresent(.lastChangedDate)
                    startTime = try container.decodeIfPresent(.startTime)
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)

                    try container.encode(id, forKey: .id)
                    try container.encode(buildNumber, forKey: .buildNumber)
                    try container.encode(queueTime, forKey: .queueTime)
                    try container.encode(status, forKey: .status)
                    try container.encode(result, forKey: .result)
                    try container.encode(sourceBranch, forKey: .sourceBranch)
                    try container.encode(sourceVersion, forKey: .sourceVersion)
                    try container.encodeIfPresent(finishTime, forKey: .finishTime)
                    try container.encodeIfPresent(lastChangedDate, forKey: .lastChangedDate)
                    try container.encodeIfPresent(startTime, forKey: .startTime)
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Status200 else { return false }
                  guard self.id == object.id else { return false }
                  guard self.buildNumber == object.buildNumber else { return false }
                  guard self.queueTime == object.queueTime else { return false }
                  guard self.status == object.status else { return false }
                  guard self.result == object.result else { return false }
                  guard self.sourceBranch == object.sourceBranch else { return false }
                  guard self.sourceVersion == object.sourceVersion else { return false }
                  guard self.finishTime == object.finishTime else { return false }
                  guard self.lastChangedDate == object.lastChangedDate else { return false }
                  guard self.startTime == object.startTime else { return false }
                  return true
                }

                public static func == (lhs: Status200, rhs: Status200) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }
            public typealias SuccessType = Status200

            /** Success */
            case status200(Status200)

            public var success: Status200? {
                switch self {
                case .status200(let response): return response
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(Status200.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
