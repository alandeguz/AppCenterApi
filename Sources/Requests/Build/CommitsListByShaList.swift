//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension EngagementAPI.Build {

    /**
    Returns commit information for a batch of shas
    */
    public enum CommitsListByShaList {

        public static let service = APIService<Response>(id: "commits_listByShaList", tag: "build", method: "GET", path: "/v0.1/apps/{owner_name}/{app_name}/commits/batch", hasBody: false, securityRequirement: SecurityRequirement(type: "APIToken", scope: ""))

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** A collection of commit SHAs comma-delimited */
                public var hashes: [String]

                /** The name of the owner */
                public var ownerName: String

                /** The name of the application */
                public var appName: String

                public init(hashes: [String], ownerName: String, appName: String) {
                    self.hashes = hashes
                    self.ownerName = ownerName
                    self.appName = appName
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: CommitsListByShaList.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(hashes: [String], ownerName: String, appName: String) {
                let options = Options(hashes: hashes, ownerName: ownerName, appName: appName)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "ownerName" + "}", with: "\(self.options.ownerName)").replacingOccurrences(of: "{" + "appName" + "}", with: "\(self.options.appName)")
            }

            public override var parameters: [String: Any] {
                var params: [String: Any] = [:]
                params["hashes"] = options.hashes.joined(separator: ",")
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = [[String: Any]]

            /** Success */
            case status200([[String: Any]])

            public var success: [[String: Any]]? {
                switch self {
                case .status200(let response): return response
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decodeAny([[String: Any]].self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
