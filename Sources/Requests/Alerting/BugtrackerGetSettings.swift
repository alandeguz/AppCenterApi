//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension EngagementAPI.Alerting {

    /**
    Get bug tracker settings for a particular app
    */
    public enum BugtrackerGetSettings {

        public static let service = APIService<Response>(id: "bugtracker_getSettings", tag: "alerting", method: "GET", path: "/v0.1/apps/{owner_name}/{app_name}/bugtracker", hasBody: false, securityRequirement: SecurityRequirement(type: "APIToken", scope: ""))

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** The name of the owner */
                public var ownerName: String

                /** The name of the application */
                public var appName: String

                public init(ownerName: String, appName: String) {
                    self.ownerName = ownerName
                    self.appName = appName
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: BugtrackerGetSettings.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(ownerName: String, appName: String) {
                let options = Options(ownerName: ownerName, appName: appName)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "ownerName" + "}", with: "\(self.options.ownerName)").replacingOccurrences(of: "{" + "appName" + "}", with: "\(self.options.appName)")
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {

            /** Get bug tracker settings for a particular app */
            public class Status200: APIModel {

                /** Event types enabled for bugtracker */
                public enum EventTypes: String, Codable {
                    case newCrashGroupCreated = "newCrashGroupCreated"
                    case newAppReleased = "newAppReleased"

                    public static let cases: [EventTypes] = [
                      .newCrashGroupCreated,
                      .newAppReleased,
                    ]
                }

                /** bugtracker state */
                public enum State: String, Codable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                    case unauthorized = "unauthorized"

                    public static let cases: [State] = [
                      .enabled,
                      .disabled,
                      .unauthorized,
                    ]
                }

                /** Event types enabled for bugtracker */
                public var eventTypes: [EventTypes]?

                /** Bugtracker specific settings */
                public var settings: Settings?

                /** bugtracker state */
                public var state: State?

                /** ID of OAuth token */
                public var tokenId: String?

                /** type of bugtracker */
                public var type: RepoTypeParameter?

                /** Get bug tracker settings for a particular app */
                public class Settings: APIModel {

                    /** type of bugtracker */
                    public var type: RepoTypeParameter

                    public var ownerName: String

                    public var callbackURL: String?

                    public init(type: RepoTypeParameter, ownerName: String, callbackURL: String? = nil) {
                        self.type = type
                        self.ownerName = ownerName
                        self.callbackURL = callbackURL
                    }

                    private enum CodingKeys: String, CodingKey {
                        case type
                        case ownerName = "owner_name"
                        case callbackURL = "callback_url"
                    }

                    public required init(from decoder: Decoder) throws {
                        let container = try decoder.container(keyedBy: CodingKeys.self)

                        type = try container.decode(.type)
                        ownerName = try container.decode(.ownerName)
                        callbackURL = try container.decodeIfPresent(.callbackURL)
                    }

                    public func encode(to encoder: Encoder) throws {
                        var container = encoder.container(keyedBy: CodingKeys.self)

                        try container.encode(type, forKey: .type)
                        try container.encode(ownerName, forKey: .ownerName)
                        try container.encodeIfPresent(callbackURL, forKey: .callbackURL)
                    }

                    public func isEqual(to object: Any?) -> Bool {
                      guard let object = object as? Settings else { return false }
                      guard self.type == object.type else { return false }
                      guard self.ownerName == object.ownerName else { return false }
                      guard self.callbackURL == object.callbackURL else { return false }
                      return true
                    }

                    public static func == (lhs: Settings, rhs: Settings) -> Bool {
                        return lhs.isEqual(to: rhs)
                    }
                }

                public init(eventTypes: [EventTypes]? = nil, settings: Settings? = nil, state: State? = nil, tokenId: String? = nil, type: RepoTypeParameter? = nil) {
                    self.eventTypes = eventTypes
                    self.settings = settings
                    self.state = state
                    self.tokenId = tokenId
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case eventTypes = "event_types"
                    case settings
                    case state
                    case tokenId = "token_id"
                    case type
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)

                    eventTypes = try container.decodeArrayIfPresent(.eventTypes)
                    settings = try container.decodeIfPresent(.settings)
                    state = try container.decodeIfPresent(.state)
                    tokenId = try container.decodeIfPresent(.tokenId)
                    type = try container.decodeIfPresent(.type)
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)

                    try container.encodeIfPresent(eventTypes, forKey: .eventTypes)
                    try container.encodeIfPresent(settings, forKey: .settings)
                    try container.encodeIfPresent(state, forKey: .state)
                    try container.encodeIfPresent(tokenId, forKey: .tokenId)
                    try container.encodeIfPresent(type, forKey: .type)
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Status200 else { return false }
                  guard self.eventTypes == object.eventTypes else { return false }
                  guard self.settings == object.settings else { return false }
                  guard self.state == object.state else { return false }
                  guard self.tokenId == object.tokenId else { return false }
                  guard self.type == object.type else { return false }
                  return true
                }

                public static func == (lhs: Status200, rhs: Status200) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }
            public typealias SuccessType = Status200

            /** Success */
            case status200(Status200)

            /** Error code with reason */
            case defaultResponse(statusCode: Int, UNKNOWN_ALL_OFF)

            public var success: Status200? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var failure: UNKNOWN_ALL_OFF? {
                switch self {
                case .defaultResponse(_, let response): return response
                default: return nil
                }
            }

            /// either success or failure value. Success is anything in the 200..<300 status code range
            public var responseResult: APIResponseResult<Status200, UNKNOWN_ALL_OFF> {
                if let successValue = success {
                    return .success(successValue)
                } else if let failureValue = failure {
                    return .failure(failureValue)
                } else {
                    fatalError("Response does not have success or failure response")
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                case .defaultResponse(_, let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .defaultResponse(let statusCode, _): return statusCode
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .defaultResponse: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(Status200.self, from: data))
                default: self = try .defaultResponse(statusCode: statusCode, decoder.decode(UNKNOWN_ALL_OFF.self, from: data))
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
