//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension EngagementAPI.Alerting {

    /**
    Get project issue related to a crash group
    */
    public enum BugTrackerGetRepoIssueFromCrash {

        public static let service = APIService<Response>(id: "bugTracker_getRepoIssueFromCrash", tag: "alerting", method: "GET", path: "/v0.1/apps/{owner_name}/{app_name}/bugtracker/crashGroup/{crash_group_id}", hasBody: false, securityRequirement: SecurityRequirement(type: "APIToken", scope: ""))

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** CrashGroup Id */
                public var crashGroupId: String

                /** The name of the owner */
                public var ownerName: String

                /** The name of the application */
                public var appName: String

                public init(crashGroupId: String, ownerName: String, appName: String) {
                    self.crashGroupId = crashGroupId
                    self.ownerName = ownerName
                    self.appName = appName
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: BugTrackerGetRepoIssueFromCrash.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(crashGroupId: String, ownerName: String, appName: String) {
                let options = Options(crashGroupId: crashGroupId, ownerName: ownerName, appName: appName)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "crashGroupId" + "}", with: "\(self.options.crashGroupId)").replacingOccurrences(of: "{" + "ownerName" + "}", with: "\(self.options.ownerName)").replacingOccurrences(of: "{" + "appName" + "}", with: "\(self.options.appName)")
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {

            /** Get project issue related to a crash group */
            public class Status200: APIModel {

                public var bugTrackerType: RepoTypeParameter?

                public var eventType: String?

                public var id: String?

                public var mobileCenterId: String?

                public var repoName: String?

                public var title: String?

                public var url: String?

                public init(bugTrackerType: RepoTypeParameter? = nil, eventType: String? = nil, id: String? = nil, mobileCenterId: String? = nil, repoName: String? = nil, title: String? = nil, url: String? = nil) {
                    self.bugTrackerType = bugTrackerType
                    self.eventType = eventType
                    self.id = id
                    self.mobileCenterId = mobileCenterId
                    self.repoName = repoName
                    self.title = title
                    self.url = url
                }

                private enum CodingKeys: String, CodingKey {
                    case bugTrackerType = "bug_tracker_type"
                    case eventType = "event_type"
                    case id
                    case mobileCenterId = "mobile_center_id"
                    case repoName = "repo_name"
                    case title
                    case url
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)

                    bugTrackerType = try container.decodeIfPresent(.bugTrackerType)
                    eventType = try container.decodeIfPresent(.eventType)
                    id = try container.decodeIfPresent(.id)
                    mobileCenterId = try container.decodeIfPresent(.mobileCenterId)
                    repoName = try container.decodeIfPresent(.repoName)
                    title = try container.decodeIfPresent(.title)
                    url = try container.decodeIfPresent(.url)
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)

                    try container.encodeIfPresent(bugTrackerType, forKey: .bugTrackerType)
                    try container.encodeIfPresent(eventType, forKey: .eventType)
                    try container.encodeIfPresent(id, forKey: .id)
                    try container.encodeIfPresent(mobileCenterId, forKey: .mobileCenterId)
                    try container.encodeIfPresent(repoName, forKey: .repoName)
                    try container.encodeIfPresent(title, forKey: .title)
                    try container.encodeIfPresent(url, forKey: .url)
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Status200 else { return false }
                  guard self.bugTrackerType == object.bugTrackerType else { return false }
                  guard self.eventType == object.eventType else { return false }
                  guard self.id == object.id else { return false }
                  guard self.mobileCenterId == object.mobileCenterId else { return false }
                  guard self.repoName == object.repoName else { return false }
                  guard self.title == object.title else { return false }
                  guard self.url == object.url else { return false }
                  return true
                }

                public static func == (lhs: Status200, rhs: Status200) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }
            public typealias SuccessType = Status200

            /** Success */
            case status200(Status200)

            /** Error code with reason */
            case defaultResponse(statusCode: Int, UNKNOWN_ALL_OFF)

            public var success: Status200? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var failure: UNKNOWN_ALL_OFF? {
                switch self {
                case .defaultResponse(_, let response): return response
                default: return nil
                }
            }

            /// either success or failure value. Success is anything in the 200..<300 status code range
            public var responseResult: APIResponseResult<Status200, UNKNOWN_ALL_OFF> {
                if let successValue = success {
                    return .success(successValue)
                } else if let failureValue = failure {
                    return .failure(failureValue)
                } else {
                    fatalError("Response does not have success or failure response")
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                case .defaultResponse(_, let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .defaultResponse(let statusCode, _): return statusCode
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .defaultResponse: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(Status200.self, from: data))
                default: self = try .defaultResponse(statusCode: statusCode, decoder.decode(UNKNOWN_ALL_OFF.self, from: data))
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
