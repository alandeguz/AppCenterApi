//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension EngagementAPI.Crash {

    /**
    Available for UWP apps only.

    Gets a list of crash groups and whether the list contains all available groups. Available for UWP apps only.
    */
    public enum CrashGroupsList {

        public static let service = APIService<Response>(id: "crashGroups_list", tag: "crash", method: "GET", path: "/v0.1/apps/{owner_name}/{app_name}/crash_groups", hasBody: false, securityRequirement: SecurityRequirement(type: "APIToken", scope: ""))

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** Earliest date when the last time a crash occured in a crash group */
                public var lastOccurrenceFrom: DateTime?

                /** Latest date when the last time a crash occured in a crash group */
                public var lastOccurrenceTo: DateTime?

                /** version */
                public var appVersion: String?

                public var groupType: GroupType?

                public var groupStatus: GroupStatus?

                /** A freetext search that matches in crash, crash types, crash stack_traces and crash user */
                public var groupTextSearch: String?

                /** the OData-like $orderby argument */
                public var dollarorderby: GroupOrderby?

                /** Cassandra request continuation token. The token is used for pagination. */
                public var continuationToken: String?

                /** The name of the owner */
                public var ownerName: String

                /** The name of the application */
                public var appName: String

                public init(lastOccurrenceFrom: DateTime? = nil, lastOccurrenceTo: DateTime? = nil, appVersion: String? = nil, groupType: GroupType? = nil, groupStatus: GroupStatus? = nil, groupTextSearch: String? = nil, dollarorderby: GroupOrderby? = nil, continuationToken: String? = nil, ownerName: String, appName: String) {
                    self.lastOccurrenceFrom = lastOccurrenceFrom
                    self.lastOccurrenceTo = lastOccurrenceTo
                    self.appVersion = appVersion
                    self.groupType = groupType
                    self.groupStatus = groupStatus
                    self.groupTextSearch = groupTextSearch
                    self.dollarorderby = dollarorderby
                    self.continuationToken = continuationToken
                    self.ownerName = ownerName
                    self.appName = appName
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: CrashGroupsList.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(lastOccurrenceFrom: DateTime? = nil, lastOccurrenceTo: DateTime? = nil, appVersion: String? = nil, groupType: GroupType? = nil, groupStatus: GroupStatus? = nil, groupTextSearch: String? = nil, dollarorderby: GroupOrderby? = nil, continuationToken: String? = nil, ownerName: String, appName: String) {
                let options = Options(lastOccurrenceFrom: lastOccurrenceFrom, lastOccurrenceTo: lastOccurrenceTo, appVersion: appVersion, groupType: groupType, groupStatus: groupStatus, groupTextSearch: groupTextSearch, dollarorderby: dollarorderby, continuationToken: continuationToken, ownerName: ownerName, appName: appName)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "ownerName" + "}", with: "\(self.options.ownerName)").replacingOccurrences(of: "{" + "appName" + "}", with: "\(self.options.appName)")
            }

            public override var parameters: [String: Any] {
                var params: [String: Any] = [:]
                if let lastOccurrenceFrom = options.lastOccurrenceFrom?.encode() {
                  params["last_occurrence_from"] = lastOccurrenceFrom
                }
                if let lastOccurrenceTo = options.lastOccurrenceTo?.encode() {
                  params["last_occurrence_to"] = lastOccurrenceTo
                }
                if let appVersion = options.appVersion {
                  params["app_version"] = appVersion
                }
                if let groupType = options.groupType?.encode() {
                  params["group_type"] = groupType
                }
                if let groupStatus = options.groupStatus?.encode() {
                  params["group_status"] = groupStatus
                }
                if let groupTextSearch = options.groupTextSearch {
                  params["group_text_search"] = groupTextSearch
                }
                if let dollarorderby = options.dollarorderby?.encode() {
                  params["$orderby"] = dollarorderby
                }
                if let continuationToken = options.continuationToken {
                  params["continuation_token"] = continuationToken
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {

            /** Gets a list of crash groups and whether the list contains all available groups. Available for UWP apps only. */
            public class Status200: APIModel {

                public var limitedResultSet: Bool

                public var crashGroups: [CrashGroups]

                /** Cassandra request continuation token. The token is used for pagination. */
                public var continuationToken: String?

                public init(limitedResultSet: Bool, crashGroups: [CrashGroups], continuationToken: String? = nil) {
                    self.limitedResultSet = limitedResultSet
                    self.crashGroups = crashGroups
                    self.continuationToken = continuationToken
                }

                private enum CodingKeys: String, CodingKey {
                    case limitedResultSet = "limited_result_set"
                    case crashGroups = "crash_groups"
                    case continuationToken = "continuation_token"
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)

                    limitedResultSet = try container.decode(.limitedResultSet)
                    crashGroups = try container.decodeArray(.crashGroups)
                    continuationToken = try container.decodeIfPresent(.continuationToken)
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)

                    try container.encode(limitedResultSet, forKey: .limitedResultSet)
                    try container.encode(crashGroups, forKey: .crashGroups)
                    try container.encodeIfPresent(continuationToken, forKey: .continuationToken)
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Status200 else { return false }
                  guard self.limitedResultSet == object.limitedResultSet else { return false }
                  guard self.crashGroups == object.crashGroups else { return false }
                  guard self.continuationToken == object.continuationToken else { return false }
                  return true
                }

                public static func == (lhs: Status200, rhs: Status200) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            /** Gets a list of crash groups and whether the list contains all available groups. Available for UWP apps only. */
            public class DefaultResponse: APIModel {

                public var message: String

                public init(message: String) {
                    self.message = message
                }

                private enum CodingKeys: String, CodingKey {
                    case message
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)

                    message = try container.decode(.message)
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)

                    try container.encode(message, forKey: .message)
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? DefaultResponse else { return false }
                  guard self.message == object.message else { return false }
                  return true
                }

                public static func == (lhs: DefaultResponse, rhs: DefaultResponse) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }
            public typealias SuccessType = Status200

            /** Success */
            case status200(Status200)

            /** Error */
            case defaultResponse(statusCode: Int, DefaultResponse)

            public var success: Status200? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var failure: DefaultResponse? {
                switch self {
                case .defaultResponse(_, let response): return response
                default: return nil
                }
            }

            /// either success or failure value. Success is anything in the 200..<300 status code range
            public var responseResult: APIResponseResult<Status200, DefaultResponse> {
                if let successValue = success {
                    return .success(successValue)
                } else if let failureValue = failure {
                    return .failure(failureValue)
                } else {
                    fatalError("Response does not have success or failure response")
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                case .defaultResponse(_, let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .defaultResponse(let statusCode, _): return statusCode
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .defaultResponse: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(Status200.self, from: data))
                default: self = try .defaultResponse(statusCode: statusCode, decoder.decode(DefaultResponse.self, from: data))
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
