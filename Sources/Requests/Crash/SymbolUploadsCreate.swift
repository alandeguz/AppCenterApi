//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension EngagementAPI.Crash {

    /**
    Begins the symbol upload process for a new set of symbols for the specified application
    */
    public enum SymbolUploadsCreate {

        public static let service = APIService<Response>(id: "symbolUploads_create", tag: "crash", method: "POST", path: "/v0.1/apps/{owner_name}/{app_name}/symbol_uploads", hasBody: true, securityRequirement: SecurityRequirement(type: "APIToken", scope: ""))

        public final class Request: APIRequest<Response> {

            /** Begins the symbol upload process for a new set of symbols for the specified application */
            public class Body: APIModel {

                /** The type of the symbol for the current symbol upload */
                public enum SymbolType: String, Codable {
                    case apple = "Apple"
                    case javaScript = "JavaScript"
                    case breakpad = "Breakpad"
                    case androidProguard = "AndroidProguard"
                    case uwp = "UWP"

                    public static let cases: [SymbolType] = [
                      .apple,
                      .javaScript,
                      .breakpad,
                      .androidProguard,
                      .uwp,
                    ]
                }

                /** The type of the symbol for the current symbol upload */
                public var symbolType: SymbolType

                /** The build number. Optional for Apple. Required for Android. */
                public var build: String?

                /** The callback URL that the client can optionally provide to get status updates for the current symbol upload */
                public var clientCallback: String?

                /** The file name for the symbol upload */
                public var fileName: String?

                /** The version number. Optional for Apple. Required for Android. */
                public var version: String?

                public init(symbolType: SymbolType, build: String? = nil, clientCallback: String? = nil, fileName: String? = nil, version: String? = nil) {
                    self.symbolType = symbolType
                    self.build = build
                    self.clientCallback = clientCallback
                    self.fileName = fileName
                    self.version = version
                }

                private enum CodingKeys: String, CodingKey {
                    case symbolType = "symbol_type"
                    case build
                    case clientCallback = "client_callback"
                    case fileName = "file_name"
                    case version
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)

                    symbolType = try container.decode(.symbolType)
                    build = try container.decodeIfPresent(.build)
                    clientCallback = try container.decodeIfPresent(.clientCallback)
                    fileName = try container.decodeIfPresent(.fileName)
                    version = try container.decodeIfPresent(.version)
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)

                    try container.encode(symbolType, forKey: .symbolType)
                    try container.encodeIfPresent(build, forKey: .build)
                    try container.encodeIfPresent(clientCallback, forKey: .clientCallback)
                    try container.encodeIfPresent(fileName, forKey: .fileName)
                    try container.encodeIfPresent(version, forKey: .version)
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Body else { return false }
                  guard self.symbolType == object.symbolType else { return false }
                  guard self.build == object.build else { return false }
                  guard self.clientCallback == object.clientCallback else { return false }
                  guard self.fileName == object.fileName else { return false }
                  guard self.version == object.version else { return false }
                  return true
                }

                public static func == (lhs: Body, rhs: Body) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            public struct Options {

                /** The name of the owner */
                public var ownerName: String

                /** The name of the application */
                public var appName: String

                public init(ownerName: String, appName: String) {
                    self.ownerName = ownerName
                    self.appName = appName
                }
            }

            public var options: Options

            public var body: Body

            public init(body: Body, options: Options) {
                self.body = body
                self.options = options
                super.init(service: SymbolUploadsCreate.service) {
                    let jsonEncoder = JSONEncoder()
                    return try jsonEncoder.encode(body)
                }
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(body: Body, ownerName: String, appName: String) {
                let options = Options(ownerName: ownerName, appName: appName)
                self.init(body: body, options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "ownerName" + "}", with: "\(self.options.ownerName)").replacingOccurrences(of: "{" + "appName" + "}", with: "\(self.options.appName)")
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {

            /** Begins the symbol upload process for a new set of symbols for the specified application */
            public class Status200: APIModel {

                /** The id for the current upload */
                public var symbolUploadId: String

                /** The URL where the client needs to upload the symbol blob to */
                public var uploadURL: String

                /** Describes how long the upload_url is valid */
                public var expirationDate: DateTime

                public init(symbolUploadId: String, uploadURL: String, expirationDate: DateTime) {
                    self.symbolUploadId = symbolUploadId
                    self.uploadURL = uploadURL
                    self.expirationDate = expirationDate
                }

                private enum CodingKeys: String, CodingKey {
                    case symbolUploadId = "symbol_upload_id"
                    case uploadURL = "upload_url"
                    case expirationDate = "expiration_date"
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)

                    symbolUploadId = try container.decode(.symbolUploadId)
                    uploadURL = try container.decode(.uploadURL)
                    expirationDate = try container.decode(.expirationDate)
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)

                    try container.encode(symbolUploadId, forKey: .symbolUploadId)
                    try container.encode(uploadURL, forKey: .uploadURL)
                    try container.encode(expirationDate, forKey: .expirationDate)
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Status200 else { return false }
                  guard self.symbolUploadId == object.symbolUploadId else { return false }
                  guard self.uploadURL == object.uploadURL else { return false }
                  guard self.expirationDate == object.expirationDate else { return false }
                  return true
                }

                public static func == (lhs: Status200, rhs: Status200) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            /** Begins the symbol upload process for a new set of symbols for the specified application */
            public class Status400: APIModel {

                public var message: String

                public init(message: String) {
                    self.message = message
                }

                private enum CodingKeys: String, CodingKey {
                    case message
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)

                    message = try container.decode(.message)
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)

                    try container.encode(message, forKey: .message)
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Status400 else { return false }
                  guard self.message == object.message else { return false }
                  return true
                }

                public static func == (lhs: Status400, rhs: Status400) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            /** Begins the symbol upload process for a new set of symbols for the specified application */
            public class Status403: APIModel {

                public var message: String

                public init(message: String) {
                    self.message = message
                }

                private enum CodingKeys: String, CodingKey {
                    case message
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)

                    message = try container.decode(.message)
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)

                    try container.encode(message, forKey: .message)
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Status403 else { return false }
                  guard self.message == object.message else { return false }
                  return true
                }

                public static func == (lhs: Status403, rhs: Status403) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            /** Begins the symbol upload process for a new set of symbols for the specified application */
            public class Status500: APIModel {

                public var message: String

                public init(message: String) {
                    self.message = message
                }

                private enum CodingKeys: String, CodingKey {
                    case message
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)

                    message = try container.decode(.message)
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)

                    try container.encode(message, forKey: .message)
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Status500 else { return false }
                  guard self.message == object.message else { return false }
                  return true
                }

                public static func == (lhs: Status500, rhs: Status500) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }
            public typealias SuccessType = Status200

            /** Success */
            case status200(Status200)

            /** Bad request */
            case status400(Status400)

            /** Unauthorized */
            case status403(Status403)

            /** Internal error */
            case status500(Status500)

            public var success: Status200? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                case .status400(let response): return response
                case .status403(let response): return response
                case .status500(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status400: return 400
                case .status403: return 403
                case .status500: return 500
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status400: return false
                case .status403: return false
                case .status500: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(Status200.self, from: data))
                case 400: self = try .status400(decoder.decode(Status400.self, from: data))
                case 403: self = try .status403(decoder.decode(Status403.self, from: data))
                case 500: self = try .status500(decoder.decode(Status500.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
