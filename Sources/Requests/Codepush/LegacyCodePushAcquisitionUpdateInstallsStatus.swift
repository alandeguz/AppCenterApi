//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension EngagementAPI.Codepush {

    /**
    Report deploy of specified release
    */
    public enum LegacyCodePushAcquisitionUpdateInstallsStatus {

        public static let service = APIService<Response>(id: "legacyCodePushAcquisition_updateInstallsStatus", tag: "codepush", method: "POST", path: "/v0.1/legacy/reportStatus/deploy", hasBody: true, securityRequirement: SecurityRequirement(type: "APIToken", scope: ""))

        public final class Request: APIRequest<Response> {

            /** Report deploy of specified release */
            public class ReleaseMetadata: APIModel {

                public var appVersion: String?

                public var clientUniqueId: String?

                public var deploymentKey: String?

                public var label: String?

                public var previousDeploymentKey: String?

                public var previousLabelOrAppVersion: String?

                public var status: String?

                public init(appVersion: String? = nil, clientUniqueId: String? = nil, deploymentKey: String? = nil, label: String? = nil, previousDeploymentKey: String? = nil, previousLabelOrAppVersion: String? = nil, status: String? = nil) {
                    self.appVersion = appVersion
                    self.clientUniqueId = clientUniqueId
                    self.deploymentKey = deploymentKey
                    self.label = label
                    self.previousDeploymentKey = previousDeploymentKey
                    self.previousLabelOrAppVersion = previousLabelOrAppVersion
                    self.status = status
                }

                private enum CodingKeys: String, CodingKey {
                    case appVersion
                    case clientUniqueId
                    case deploymentKey
                    case label
                    case previousDeploymentKey
                    case previousLabelOrAppVersion
                    case status
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)

                    appVersion = try container.decodeIfPresent(.appVersion)
                    clientUniqueId = try container.decodeIfPresent(.clientUniqueId)
                    deploymentKey = try container.decodeIfPresent(.deploymentKey)
                    label = try container.decodeIfPresent(.label)
                    previousDeploymentKey = try container.decodeIfPresent(.previousDeploymentKey)
                    previousLabelOrAppVersion = try container.decodeIfPresent(.previousLabelOrAppVersion)
                    status = try container.decodeIfPresent(.status)
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)

                    try container.encodeIfPresent(appVersion, forKey: .appVersion)
                    try container.encodeIfPresent(clientUniqueId, forKey: .clientUniqueId)
                    try container.encodeIfPresent(deploymentKey, forKey: .deploymentKey)
                    try container.encodeIfPresent(label, forKey: .label)
                    try container.encodeIfPresent(previousDeploymentKey, forKey: .previousDeploymentKey)
                    try container.encodeIfPresent(previousLabelOrAppVersion, forKey: .previousLabelOrAppVersion)
                    try container.encodeIfPresent(status, forKey: .status)
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? ReleaseMetadata else { return false }
                  guard self.appVersion == object.appVersion else { return false }
                  guard self.clientUniqueId == object.clientUniqueId else { return false }
                  guard self.deploymentKey == object.deploymentKey else { return false }
                  guard self.label == object.label else { return false }
                  guard self.previousDeploymentKey == object.previousDeploymentKey else { return false }
                  guard self.previousLabelOrAppVersion == object.previousLabelOrAppVersion else { return false }
                  guard self.status == object.status else { return false }
                  return true
                }

                public static func == (lhs: ReleaseMetadata, rhs: ReleaseMetadata) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            public var releaseMetadata: ReleaseMetadata

            public init(releaseMetadata: ReleaseMetadata) {
                self.releaseMetadata = releaseMetadata
                super.init(service: LegacyCodePushAcquisitionUpdateInstallsStatus.service) {
                    let jsonEncoder = JSONEncoder()
                    return try jsonEncoder.encode(releaseMetadata)
                }
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {

            /** Report deploy of specified release */
            public class DefaultResponse: APIModel {

                public var message: String

                public init(message: String) {
                    self.message = message
                }

                private enum CodingKeys: String, CodingKey {
                    case message
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)

                    message = try container.decode(.message)
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)

                    try container.encode(message, forKey: .message)
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? DefaultResponse else { return false }
                  guard self.message == object.message else { return false }
                  return true
                }

                public static func == (lhs: DefaultResponse, rhs: DefaultResponse) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }
            public typealias SuccessType = Void

            /** Success */
            case status200

            /** Error */
            case defaultResponse(statusCode: Int, DefaultResponse)

            public var success: Void? {
                switch self {
                case .status200: return ()
                default: return nil
                }
            }

            public var failure: DefaultResponse? {
                switch self {
                case .defaultResponse(_, let response): return response
                default: return nil
                }
            }

            /// either success or failure value. Success is anything in the 200..<300 status code range
            public var responseResult: APIResponseResult<Void, DefaultResponse> {
                if let successValue = success {
                    return .success(successValue)
                } else if let failureValue = failure {
                    return .failure(failureValue)
                } else {
                    fatalError("Response does not have success or failure response")
                }
            }

            public var response: Any {
                switch self {
                case .defaultResponse(_, let response): return response
                default: return ()
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .defaultResponse(let statusCode, _): return statusCode
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .defaultResponse: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = .status200
                default: self = try .defaultResponse(statusCode: statusCode, decoder.decode(DefaultResponse.self, from: data))
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
